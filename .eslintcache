[{"F:\\coursedo.github.io\\src\\index.js":"1","F:\\coursedo.github.io\\src\\reportWebVitals.js":"2","F:\\coursedo.github.io\\src\\App.js":"3","F:\\coursedo.github.io\\src\\core\\store.js":"4","F:\\coursedo.github.io\\src\\components\\GlobalModal\\index.js":"5","F:\\coursedo.github.io\\src\\ultis\\functions.js":"6","F:\\coursedo.github.io\\src\\pages\\ForgotPassword\\index.jsx":"7","F:\\coursedo.github.io\\src\\pages\\SignUp\\index.jsx":"8","F:\\coursedo.github.io\\src\\pages\\VerifyEmail\\index.jsx":"9","F:\\coursedo.github.io\\src\\pages\\CreatePassword\\index.jsx":"10","F:\\coursedo.github.io\\src\\pages\\SignIn\\index.jsx":"11","F:\\coursedo.github.io\\src\\pages\\CreateCourse\\index.jsx":"12","F:\\coursedo.github.io\\src\\pages\\Courses\\index.jsx":"13","F:\\coursedo.github.io\\src\\pages\\Dashboard\\index.jsx":"14","F:\\coursedo.github.io\\src\\pages\\Profile\\index.jsx":"15","F:\\coursedo.github.io\\src\\pages\\EditCourse\\index.jsx":"16","F:\\coursedo.github.io\\src\\pages\\Home\\index.jsx":"17","F:\\coursedo.github.io\\src\\pages\\CreateCourse\\redux\\actions.js":"18","F:\\coursedo.github.io\\src\\ultis\\firebaseConfig.js":"19","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\addTeacher.jsx":"20","F:\\coursedo.github.io\\src\\pages\\SignIn\\redux\\actions.js":"21","F:\\coursedo.github.io\\src\\components\\CInput\\index.jsx":"22","F:\\coursedo.github.io\\src\\pages\\Home\\constant.js":"23","F:\\coursedo.github.io\\src\\pages\\Home\\redux\\actions.js":"24","F:\\coursedo.github.io\\src\\pages\\Home\\components\\discoverBtn.jsx":"25","F:\\coursedo.github.io\\src\\pages\\Home\\components\\swipeComponent.jsx":"26","F:\\coursedo.github.io\\src\\pages\\Dashboard\\constant.js":"27","F:\\coursedo.github.io\\src\\pages\\Dashboard\\redux\\actions.js":"28","F:\\coursedo.github.io\\src\\pages\\CreateCourse\\constant.js":"29","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\teacherList.jsx":"30","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\studentList.jsx":"31","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\categoryList.jsx":"32","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\coursesList.jsx":"33","F:\\coursedo.github.io\\src\\pages\\Profile\\components\\changePassTab.jsx":"34","F:\\coursedo.github.io\\src\\pages\\Profile\\components\\profileTab.jsx":"35","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\searchInput.js":"36","F:\\coursedo.github.io\\src\\components\\Header\\index.jsx":"37","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\coursesTab.jsx":"38","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\profileTab.jsx":"39","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\addCategory.jsx":"40","F:\\coursedo.github.io\\src\\components\\Footer\\index.jsx":"41","F:\\coursedo.github.io\\src\\pages\\Profile\\components\\avatarDialog.jsx":"42","F:\\coursedo.github.io\\src\\components\\CourseCard\\index.jsx":"43","F:\\coursedo.github.io\\src\\components\\CateCard\\index.jsx":"44","F:\\coursedo.github.io\\src\\core\\reducer.js":"45","F:\\coursedo.github.io\\src\\core\\epic.js":"46","F:\\coursedo.github.io\\src\\components\\Categories\\index.jsx":"47","F:\\coursedo.github.io\\src\\pages\\Home\\redux\\epics.js":"48","F:\\coursedo.github.io\\src\\pages\\CreateCourse\\redux\\reducer.js":"49","F:\\coursedo.github.io\\src\\pages\\Dashboard\\redux\\reducer.js":"50","F:\\coursedo.github.io\\src\\pages\\SignIn\\redux\\reducer.js":"51","F:\\coursedo.github.io\\src\\pages\\SignIn\\redux\\epics.js":"52","F:\\coursedo.github.io\\src\\pages\\Dashboard\\redux\\epics.js":"53","F:\\coursedo.github.io\\src\\pages\\CreateCourse\\redux\\epics.js":"54","F:\\coursedo.github.io\\src\\pages\\Home\\redux\\reducer.js":"55","F:\\coursedo.github.io\\src\\ultis\\api.js":"56","F:\\coursedo.github.io\\src\\pages\\Courses\\redux\\epics.js":"57","F:\\coursedo.github.io\\src\\pages\\Courses\\redux\\actions.js":"58","F:\\coursedo.github.io\\src\\pages\\Courses\\redux\\reducer.js":"59","F:\\coursedo.github.io\\src\\pages\\Courses\\Category\\index.jsx":"60","F:\\coursedo.github.io\\src\\pages\\DetailCourse\\redux\\epics.js":"61","F:\\coursedo.github.io\\src\\pages\\DetailCourse\\redux\\actions.js":"62","F:\\coursedo.github.io\\src\\pages\\DetailCourse\\redux\\reducer.js":"63","F:\\coursedo.github.io\\src\\pages\\DetailCourse\\index.jsx":"64","F:\\coursedo.github.io\\src\\pages\\DetailCourse\\components\\introduceTab.jsx":"65","F:\\coursedo.github.io\\src\\pages\\DetailCourse\\components\\syllabusTab.jsx":"66","F:\\coursedo.github.io\\src\\pages\\DetailCourse\\components\\feedbackTab.jsx":"67","F:\\coursedo.github.io\\src\\pages\\About\\index.jsx":"68","F:\\coursedo.github.io\\src\\pages\\MyCourses\\index.jsx":"69","F:\\coursedo.github.io\\src\\pages\\MyCourses\\components\\watchlistTab.jsx":"70"},{"size":1229,"mtime":1610262896000,"results":"71","hashOfConfig":"72"},{"size":375,"mtime":1610167306000,"results":"73","hashOfConfig":"72"},{"size":1848,"mtime":1610666522000,"results":"74","hashOfConfig":"72"},{"size":1047,"mtime":1610167306000,"results":"75","hashOfConfig":"72"},{"size":2343,"mtime":1610620360000,"results":"76","hashOfConfig":"72"},{"size":897,"mtime":1610642822000,"results":"77","hashOfConfig":"72"},{"size":3965,"mtime":1610167306000,"results":"78","hashOfConfig":"72"},{"size":6074,"mtime":1610167306000,"results":"79","hashOfConfig":"72"},{"size":648,"mtime":1610167306000,"results":"80","hashOfConfig":"72"},{"size":4565,"mtime":1610167306000,"results":"81","hashOfConfig":"72"},{"size":5201,"mtime":1610190896000,"results":"82","hashOfConfig":"72"},{"size":18650,"mtime":1610666322000,"results":"83","hashOfConfig":"72"},{"size":7392,"mtime":1610641732000,"results":"84","hashOfConfig":"72"},{"size":4274,"mtime":1610666322000,"results":"85","hashOfConfig":"72"},{"size":1629,"mtime":1610666322000,"results":"86","hashOfConfig":"72"},{"size":20622,"mtime":1610666322000,"results":"87","hashOfConfig":"72"},{"size":3001,"mtime":1610666322000,"results":"88","hashOfConfig":"72"},{"size":921,"mtime":1610620360000,"results":"89","hashOfConfig":"72"},{"size":523,"mtime":1610262894000,"results":"90","hashOfConfig":"72"},{"size":8174,"mtime":1610262894000,"results":"91","hashOfConfig":"72"},{"size":2325,"mtime":1610666322000,"results":"92","hashOfConfig":"72"},{"size":333,"mtime":1610167306000,"results":"93","hashOfConfig":"72"},{"size":1502,"mtime":1610200018000,"results":"94","hashOfConfig":"72"},{"size":491,"mtime":1610328500000,"results":"95","hashOfConfig":"72"},{"size":586,"mtime":1610482810000,"results":"96","hashOfConfig":"72"},{"size":1900,"mtime":1610666322000,"results":"97","hashOfConfig":"72"},{"size":277,"mtime":1610262894000,"results":"98","hashOfConfig":"72"},{"size":1871,"mtime":1610620360000,"results":"99","hashOfConfig":"72"},{"size":1248,"mtime":1610666322000,"results":"100","hashOfConfig":"72"},{"size":4736,"mtime":1610262894000,"results":"101","hashOfConfig":"72"},{"size":5031,"mtime":1610262894000,"results":"102","hashOfConfig":"72"},{"size":4302,"mtime":1610190896000,"results":"103","hashOfConfig":"72"},{"size":5732,"mtime":1610666322000,"results":"104","hashOfConfig":"72"},{"size":4473,"mtime":1610620360000,"results":"105","hashOfConfig":"72"},{"size":6367,"mtime":1610620360000,"results":"106","hashOfConfig":"72"},{"size":2787,"mtime":1610190896000,"results":"107","hashOfConfig":"72"},{"size":8830,"mtime":1610666364000,"results":"108","hashOfConfig":"72"},{"size":4819,"mtime":1610666322000,"results":"109","hashOfConfig":"72"},{"size":1340,"mtime":1610262894000,"results":"110","hashOfConfig":"72"},{"size":4116,"mtime":1610262894000,"results":"111","hashOfConfig":"72"},{"size":500,"mtime":1610666322000,"results":"112","hashOfConfig":"72"},{"size":2889,"mtime":1610620360000,"results":"113","hashOfConfig":"72"},{"size":3441,"mtime":1610652450000,"results":"114","hashOfConfig":"72"},{"size":709,"mtime":1610485130000,"results":"115","hashOfConfig":"72"},{"size":777,"mtime":1610641360000,"results":"116","hashOfConfig":"72"},{"size":550,"mtime":1610641348000,"results":"117","hashOfConfig":"72"},{"size":1692,"mtime":1610636280000,"results":"118","hashOfConfig":"72"},{"size":1682,"mtime":1610328500000,"results":"119","hashOfConfig":"72"},{"size":1323,"mtime":1610666322000,"results":"120","hashOfConfig":"72"},{"size":2178,"mtime":1610620360000,"results":"121","hashOfConfig":"72"},{"size":2280,"mtime":1610666322000,"results":"122","hashOfConfig":"72"},{"size":9402,"mtime":1610666322000,"results":"123","hashOfConfig":"72"},{"size":6291,"mtime":1610666322000,"results":"124","hashOfConfig":"72"},{"size":3689,"mtime":1610666322000,"results":"125","hashOfConfig":"72"},{"size":1301,"mtime":1610666322000,"results":"126","hashOfConfig":"72"},{"size":2054,"mtime":1610666322000,"results":"127","hashOfConfig":"72"},{"size":2235,"mtime":1610635982000,"results":"128","hashOfConfig":"72"},{"size":653,"mtime":1610637974000,"results":"129","hashOfConfig":"72"},{"size":1221,"mtime":1610638070000,"results":"130","hashOfConfig":"72"},{"size":7184,"mtime":1610641718000,"results":"131","hashOfConfig":"72"},{"size":5232,"mtime":1610679302000,"results":"132","hashOfConfig":"72"},{"size":1469,"mtime":1610678566000,"results":"133","hashOfConfig":"72"},{"size":1115,"mtime":1610678602000,"results":"134","hashOfConfig":"72"},{"size":9986,"mtime":1610678844000,"results":"135","hashOfConfig":"72"},{"size":1130,"mtime":1610663458000,"results":"136","hashOfConfig":"72"},{"size":3222,"mtime":1610679388000,"results":"137","hashOfConfig":"72"},{"size":3894,"mtime":1610679834000,"results":"138","hashOfConfig":"72"},{"size":1212,"mtime":1610666322000,"results":"139","hashOfConfig":"72"},{"size":2603,"mtime":1610666322000,"results":"140","hashOfConfig":"72"},{"size":2841,"mtime":1610666322000,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"yiyuk4",{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"144"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"144"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"144"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"144"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"144"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"144"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"144"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"144"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"144"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"144"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"144"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"144"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"144"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"144"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"144"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"144"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"144"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"144"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"144"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"144"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"144"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"144"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"144"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"144"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"301","messages":"302","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"144"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"144"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"F:\\coursedo.github.io\\src\\index.js",[],["309","310"],"F:\\coursedo.github.io\\src\\reportWebVitals.js",[],"F:\\coursedo.github.io\\src\\App.js",[],"F:\\coursedo.github.io\\src\\core\\store.js",[],"F:\\coursedo.github.io\\src\\components\\GlobalModal\\index.js",[],"F:\\coursedo.github.io\\src\\ultis\\functions.js",[],"F:\\coursedo.github.io\\src\\pages\\ForgotPassword\\index.jsx",["311"],"import { Button } from 'antd'\r\nimport CInput from 'components/CInput'\r\nimport { Form, Formik } from 'formik'\r\nimport { ResetPassword } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory } from 'react-router-dom'\r\nimport * as yup from 'yup'\r\nimport '../SignIn/signin.css'\r\nimport forgotPic from 'assets/images/forgot_password.jpg'\r\nimport logo from 'assets/logo.png'\r\n\r\nfunction ForgotPassword() {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth?.user)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  const validationSchema = yup.object().shape({\r\n    email: yup\r\n      .string()\r\n      .trim()\r\n      .max(48, 'Email must have at most 48 characters')\r\n      .label('Email')\r\n      .email('Invalid email')\r\n      .required('* Please input email')\r\n  })\r\n\r\n  const handleForgot = values => {\r\n    dispatch(\r\n      ResetPassword.get({\r\n        ...values,\r\n        email: values.email.toLowerCase()\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleForgot(values)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"bg\">\r\n      <div id=\"loginBg\">\r\n        <a href=\"/\" style={{ textDecoration: 'none', color: 'white' }}>\r\n          <img src={logo} alt=\"forgot\" width={100} />\r\n        </a>\r\n        <div id=\"loginBox\">\r\n          <Formik\r\n            initialValues={{\r\n              email: ''\r\n            }}\r\n            isInitialValid={false}\r\n            validationSchema={validationSchema}\r\n            onSubmit={values => handleForgot(values)}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              values,\r\n              isValid,\r\n              errors,\r\n              touched,\r\n              setFieldTouched\r\n            }) => {\r\n              return (\r\n                <Form className=\"formStyle\">\r\n                  <span id=\"loginStyle\">\r\n                    Ok let’s fetch you ya’ login details\r\n                  </span>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.email}\r\n                    onChange={handleChange('email')}\r\n                    onTouchStart={() => setFieldTouched('email')}\r\n                    onBlur={handleBlur('email')}\r\n                    placeholder=\"Email\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.email}\r\n                  />\r\n                  <div style={{ alignSelf: 'flex-end', marginBottom: 34 }}>\r\n                    <span>Already have an account? </span>\r\n                    <Button\r\n                      style={{ padding: 0 }}\r\n                      color=\"primary\"\r\n                      type=\"link\"\r\n                      onClick={() =>\r\n                        history.push({\r\n                          pathname: '/signin',\r\n                          state: { from: `/forgot` }\r\n                        })\r\n                      }\r\n                    >\r\n                      Back to Sign Up\r\n                    </Button>\r\n                  </div>\r\n                  <Button\r\n                    id=\"loginBtn\"\r\n                    disabled={!isValid}\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Proceed\r\n                  </Button>\r\n                </Form>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      {isDesktopOrLaptop && (\r\n        <div id=\"imgBg\" style={{ backgroundImage: `url(${forgotPic})` }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ForgotPassword\r\n","F:\\coursedo.github.io\\src\\pages\\SignUp\\index.jsx",["312","313"],"import { Button } from 'antd'\r\nimport CInput from 'components/CInput'\r\nimport { Form, Formik } from 'formik'\r\nimport { SignUpRequest } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { ROLES } from 'ultis/functions'\r\nimport * as yup from 'yup'\r\nimport '../SignIn/signin.css'\r\nimport signupPic from 'assets/images/signup.png'\r\nimport logo from 'assets/logo.png'\r\n\r\nfunction SignUp() {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth?.user)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  const validationSchema = yup.object().shape({\r\n    email: yup\r\n      .string()\r\n      .trim()\r\n      .max(48, 'Email must have at most 48 characters')\r\n      .label('Email')\r\n      .email('Invalid email')\r\n      .required('* Please input email'),\r\n    password: yup\r\n      .string()\r\n      .required('* Please input password')\r\n      .min(8, 'Password must include at least 8 characters')\r\n      .max(48, 'Password must include at most 48 characters')\r\n      .matches(/(?=.{8,})/, {\r\n        message: 'Password must include at least 8 characters'\r\n      }),\r\n    fullName: yup\r\n      .string()\r\n      .trim()\r\n      .required('* Please input password')\r\n      .min(3, 'Full name must include at least 3 characters')\r\n      .max(64, 'Full name must include at most 48 characters')\r\n      .matches(\r\n        /[^a-z0-9A-Z_ÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂưăạảấầẩẫậắằẳẵặẹẻẽềềểỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ]/u,\r\n        {\r\n          message: 'Invalid full name'\r\n        }\r\n      )\r\n  })\r\n\r\n  const handleSignup = values => {\r\n    dispatch(\r\n      SignUpRequest.get({\r\n        ...values,\r\n        email: values.email.toLowerCase(),\r\n        role: ROLES.NOT_VERIFIED\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleSignup(values)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"bg\">\r\n      <div id=\"loginBg\">\r\n        <a href=\"/\" style={{ textDecoration: 'none', color: 'white' }}>\r\n          <img src={logo} alt=\"signup\" width={100} />\r\n        </a>\r\n        <div id=\"loginBox\">\r\n          <Formik\r\n            initialValues={{\r\n              email: '',\r\n              password: '',\r\n              fullName: ''\r\n            }}\r\n            isInitialValid={false}\r\n            validationSchema={validationSchema}\r\n            onSubmit={values => handleSignup(values)}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              values,\r\n              isValid,\r\n              errors,\r\n              touched,\r\n              setFieldTouched\r\n            }) => {\r\n              return (\r\n                <Form className=\"formStyle\">\r\n                  <span id=\"loginStyle\">Please create a new account here</span>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.fullName}\r\n                    onChange={handleChange('fullName')}\r\n                    onTouchStart={() => setFieldTouched('fullName')}\r\n                    onBlur={handleBlur('fullName')}\r\n                    placeholder=\"Full name\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.fullName}\r\n                  />\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.email}\r\n                    onChange={handleChange('email')}\r\n                    onTouchStart={() => setFieldTouched('email')}\r\n                    onBlur={handleBlur('email')}\r\n                    placeholder=\"Email\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.email}\r\n                  />\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    type=\"password\"\r\n                    onChange={handleChange('password')}\r\n                    onTouchStart={() => setFieldTouched('password')}\r\n                    value={values.password}\r\n                    onBlur={handleBlur('password')}\r\n                    placeholder=\"Password\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.password}\r\n                    type=\"password\"\r\n                  />\r\n                  <div style={{ alignSelf: 'flex-end', marginBottom: 34 }}>\r\n                    <span>Already have an account? </span>\r\n                    <Button\r\n                      style={{ padding: 0 }}\r\n                      color=\"primary\"\r\n                      type=\"link\"\r\n                      onClick={() =>\r\n                        history.push({\r\n                          pathname: '/signin',\r\n                          state: { from: `/signup` }\r\n                        })\r\n                      }\r\n                    >\r\n                      Sign in\r\n                    </Button>\r\n                  </div>\r\n                  <Button\r\n                    id=\"loginBtn\"\r\n                    disabled={!isValid}\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Sign up\r\n                  </Button>\r\n                </Form>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      {isDesktopOrLaptop && (\r\n        <div id=\"imgBg\" style={{ backgroundImage: `url(${signupPic})` }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignUp\r\n","F:\\coursedo.github.io\\src\\pages\\VerifyEmail\\index.jsx",["314"],"import { Space, Spin } from 'antd'\r\nimport { VerifyEmail } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport '../SignIn/signin.css'\r\n\r\nfunction VerifyEmailPage() {\r\n  const param = useParams()\r\n  const { token } = param\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(VerifyEmail.get({ token }))\r\n  }, [])\r\n\r\n  return (\r\n    <Space\r\n      style={{ display: 'flex', justifyContent: 'center', paddingTop: 48 }}\r\n    >\r\n      <Spin size=\"large\" />\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default VerifyEmailPage\r\n","F:\\coursedo.github.io\\src\\pages\\CreatePassword\\index.jsx",["315"],"import { Button } from 'antd'\r\nimport CInput from 'components/CInput'\r\nimport { Form, Formik } from 'formik'\r\nimport { CreatePassword } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport * as yup from 'yup'\r\nimport '../SignIn/signin.css'\r\nimport forgotPic from 'assets/images/forgot_password.jpg'\r\nimport logo from 'assets/logo.png'\r\n\r\nfunction CreatePasswordPage() {\r\n  const param = useParams()\r\n  const { token } = param\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth?.user)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (user || !token) {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  const validationSchema = yup.object().shape({\r\n    password: yup\r\n      .string()\r\n      .required('* Please input password')\r\n      .min(8, 'Password must include at least 8 characters')\r\n      .max(48, 'Password must include at most 48 characters')\r\n      .matches(/(?=.{8,})/, {\r\n        message: 'Password must include at least 8 characters'\r\n      }),\r\n    confirm: yup\r\n      .string()\r\n      .required('* Please input password')\r\n      .min(8, 'Password must include at least 8 characters')\r\n      .max(48, 'Password must include at most 48 characters')\r\n      .matches(/(?=.{8,})/, {\r\n        message: 'Password must include at least 8 characters'\r\n      })\r\n      .oneOf(\r\n        [yup.ref('password'), null],\r\n        'Confirm password must be the same as password'\r\n      )\r\n  })\r\n\r\n  const handleCreate = values => {\r\n    dispatch(\r\n      CreatePassword.get({\r\n        password: values.password,\r\n        token: token\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleCreate(values)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"bg\">\r\n      <div id=\"loginBg\">\r\n        <a href=\"/\" style={{ textDecoration: 'none', color: 'white' }}>\r\n          <img src={logo} alt=\"logo\" width={100} />\r\n        </a>\r\n        <div id=\"loginBox\">\r\n          <Formik\r\n            initialValues={{\r\n              password: '',\r\n              confirm: ''\r\n            }}\r\n            isInitialValid={false}\r\n            validationSchema={validationSchema}\r\n            onSubmit={values => handleCreate(values)}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              values,\r\n              isValid,\r\n              errors,\r\n              touched,\r\n              setFieldTouched\r\n            }) => {\r\n              return (\r\n                <Form className=\"formStyle\">\r\n                  <span id=\"loginStyle\">Input new password to continue</span>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.password}\r\n                    onChange={handleChange('password')}\r\n                    onTouchStart={() => setFieldTouched('password')}\r\n                    onBlur={handleBlur('password')}\r\n                    placeholder=\"New password\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.password}\r\n                    type=\"password\"\r\n                  />\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.confirm}\r\n                    onChange={handleChange('confirm')}\r\n                    onTouchStart={() => setFieldTouched('confirm')}\r\n                    onBlur={handleBlur('confirm')}\r\n                    placeholder=\"Confirm password\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.confirm}\r\n                    type=\"password\"\r\n                  />\r\n                  <Button\r\n                    style={{ marginTop: 24 }}\r\n                    id=\"loginBtn\"\r\n                    disabled={!isValid}\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Reset password\r\n                  </Button>\r\n                </Form>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      {isDesktopOrLaptop && (\r\n        <div id=\"imgBg\" style={{ backgroundImage: `url(${forgotPic})` }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreatePasswordPage\r\n","F:\\coursedo.github.io\\src\\pages\\SignIn\\index.jsx",["316","317"],"import { Button } from 'antd'\r\nimport signinPic from 'assets/images/signin.png'\r\nimport logo from 'assets/logo.png'\r\nimport CInput from 'components/CInput'\r\nimport { Form, Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { ROLES } from 'ultis/functions'\r\nimport * as yup from 'yup'\r\nimport { SignInRequest } from './redux/actions'\r\nimport './signin.css'\r\n\r\nfunction SignIn() {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth?.user)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      if (user.role === ROLES.ADMIN) {\r\n        history.replace('/admin')\r\n      } else {\r\n        if (history.location.state) {\r\n          history.goBack()\r\n        } else {\r\n          history.replace('/')\r\n        }\r\n      }\r\n    }\r\n  }, [user])\r\n\r\n  const validationSchema = yup.object().shape({\r\n    password: yup\r\n      .string()\r\n      .required('* Please input password')\r\n      .min(8, 'Password must include at least 8 characters')\r\n      .max(48, 'Password must include at most 48 characters')\r\n      .matches(/(?=.{8,})/, {\r\n        message: 'Password must include at least 8 characters'\r\n      }),\r\n    email: yup\r\n      .string()\r\n      .trim()\r\n      .max(48, 'Email must have at most 48 characters')\r\n      .label('Email')\r\n      .email('Invalid email')\r\n      .required('* Please input email')\r\n  })\r\n\r\n  const handleLogin = values => {\r\n    dispatch(\r\n      SignInRequest.get({ ...values, email: values.email.toLowerCase() })\r\n    )\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleLogin(values)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"bg\">\r\n      <div id=\"loginBg\">\r\n        <a href=\"/\" style={{ textDecoration: 'none', color: 'white' }}>\r\n          <img src={logo} alt=\"signin\" width={100} />\r\n        </a>\r\n        <div id=\"loginBox\">\r\n          <Formik\r\n            initialValues={{\r\n              password: '',\r\n              email: ''\r\n            }}\r\n            isInitialValid={false}\r\n            validationSchema={validationSchema}\r\n            onSubmit={values => handleLogin(values)}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              values,\r\n              isValid,\r\n              errors,\r\n              touched,\r\n              setFieldTouched\r\n            }) => {\r\n              return (\r\n                <Form className=\"formStyle\">\r\n                  <span id=\"loginStyle\">\r\n                    Sign in to your account to continue\r\n                  </span>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.email}\r\n                    onChange={handleChange('email')}\r\n                    onTouchStart={() => setFieldTouched('email')}\r\n                    onBlur={handleBlur('email')}\r\n                    placeholder=\"Email\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.email}\r\n                  />\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    type=\"password\"\r\n                    onChange={handleChange('password')}\r\n                    onTouchStart={() => setFieldTouched('password')}\r\n                    value={values.password}\r\n                    onBlur={handleBlur('password')}\r\n                    placeholder=\"Password\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.password}\r\n                    type=\"password\"\r\n                  />\r\n                  <div className=\"buttomBox\">\r\n                    <Button\r\n                      style={{ padding: 0 }}\r\n                      color=\"primary\"\r\n                      type=\"link\"\r\n                      onClick={() => history.push('/forgot')}\r\n                    >\r\n                      Forgot password?\r\n                    </Button>\r\n                    <div>\r\n                      <span>Don’t have an account? </span>\r\n                      <Button\r\n                        style={{ padding: 0 }}\r\n                        color=\"primary\"\r\n                        type=\"link\"\r\n                        onClick={() => history.push('/signup')}\r\n                      >\r\n                        Sign up\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                  <Button\r\n                    id=\"loginBtn\"\r\n                    disabled={!isValid}\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Sign in\r\n                  </Button>\r\n                </Form>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      {isDesktopOrLaptop && (\r\n        <div id=\"imgBg\" style={{ backgroundImage: `url(${signinPic})` }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignIn\r\n","F:\\coursedo.github.io\\src\\pages\\CreateCourse\\index.jsx",["318","319"],"import {\r\n  Button,\r\n  Select,\r\n  Space,\r\n  Switch,\r\n  Typography,\r\n  Row,\r\n  Col,\r\n  Upload\r\n} from 'antd'\r\nimport CInput from 'components/CInput'\r\nimport Header from 'components/Header'\r\nimport { Formik } from 'formik'\r\nimport { GetAllCategories } from 'pages/Dashboard/redux/actions'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { COLOR, ROLES } from 'ultis/functions'\r\nimport { validationCourseSchema } from './constant'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport './createCourse.css'\r\nimport { beforeUpload } from 'pages/Dashboard/component/addTeacher'\r\nimport { dummyRequest } from 'pages/Dashboard/component/addTeacher'\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons'\r\nimport { getBase64 } from 'pages/Dashboard/component/addTeacher'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport { convertToRaw } from 'draft-js'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport CoursedoFirebase from 'ultis/firebaseConfig'\r\nimport { AddCourse } from './redux/actions'\r\n\r\nconst { Title, Text } = Typography\r\nconst { Option } = Select\r\n\r\nexport default function CreateCourse(props) {\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth.user)\r\n  const history = useHistory()\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n  const categoryList = useSelector(state => state.Dashboard.categoryList)\r\n  const [isLoadingImage, setLoadingImage] = useState(false)\r\n  const [imgName, setImgName] = useState(null)\r\n  let realList = []\r\n  categoryList.forEach(item => {\r\n    realList.push({\r\n      name: item.name,\r\n      id: item.id\r\n    })\r\n    item?.subCategory &&\r\n      item?.subCategory.length > 0 &&\r\n      item?.subCategory.forEach(subCat => {\r\n        realList.push({\r\n          name: subCat.name,\r\n          id: subCat.id\r\n        })\r\n      })\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (user && user.role !== ROLES.TEACHER) {\r\n      history.replace('/')\r\n    } else {\r\n      dispatch(GetAllCategories.get())\r\n    }\r\n  }, [])\r\n\r\n  const submitCourse = (values, imgURL) => {\r\n    values.chapters.forEach((item, index) => {\r\n      item.numberId = index + 1\r\n    })\r\n    dispatch(\r\n      AddCourse.get({\r\n        ...values,\r\n        numberOfChapter: values.chapters.length,\r\n        thumbnail: imgURL\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleUploadImg = values => {\r\n    CoursedoFirebase.storage()\r\n      .ref('Courses')\r\n      .child(imgName)\r\n      .getDownloadURL()\r\n      .then(dwnURL => {\r\n        submitCourse(values, dwnURL)\r\n      })\r\n      .catch(async error => {\r\n        try {\r\n          const snapshot = await CoursedoFirebase.storage()\r\n            .ref('Courses')\r\n            .child(imgName)\r\n            .putString(values.thumbnail, 'data_url')\r\n          const downloadUrl = await snapshot.ref.getDownloadURL()\r\n          submitCourse(values, downloadUrl)\r\n        } catch (errorUpload) {}\r\n      })\r\n  }\r\n\r\n  const handleUploadThumb = (info, handleChange) => {\r\n    if (info.file.status === 'uploading') {\r\n      setLoadingImage(true)\r\n      return\r\n    }\r\n    if (info.file.status === 'done') {\r\n      setImgName(info.file.name)\r\n      getBase64(info.file.originFileObj, imageUrl => {\r\n        handleChange('thumbnail')(imageUrl)\r\n        setLoadingImage(false)\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleDescription = (state, setFieldValue = value => {}) => {\r\n    const rawContentState = convertToRaw(state.getCurrentContent())\r\n    const markup = draftToHtml(rawContentState)\r\n    setFieldValue('description', markup)\r\n  }\r\n\r\n  if (!user) {\r\n    return (\r\n      <>\r\n        <Header from=\"addCourse\" />\r\n        <Space size=\"large\" align=\"center\" direction=\"vertical\">\r\n          <Typography variant=\"body1\" style={{ margin: 28 }}>\r\n            You are not signed in. Please sign in to create course\r\n          </Typography>\r\n          <Button\r\n            type=\"primary\"\r\n            size=\"large\"\r\n            onClick={() =>\r\n              history.push({\r\n                pathname: '/signin',\r\n                state: { from: `/create` }\r\n              })\r\n            }\r\n          >\r\n            Sign in\r\n          </Button>\r\n        </Space>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      {isLoadingImage ? (\r\n        <LoadingOutlined style={{ color: COLOR.primary1 }} />\r\n      ) : (\r\n        <PlusOutlined />\r\n      )}\r\n      <div\r\n        className=\"ant-upload-text\"\r\n        style={{ fontFamily: 'Source Sans Pro' }}\r\n      >\r\n        {isLoadingImage ? 'Uploading' : 'Upload'}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Header from=\"addCourse\" />\r\n      <Formik\r\n        initialValues={{\r\n          name: '',\r\n          shortDescription: null,\r\n          description: '',\r\n          thumbnail: null,\r\n          price: 0,\r\n          chapters: [{ numberId: 1, name: '', description: null, video: null }],\r\n          categoryId: null,\r\n          completeStatus: false,\r\n          publicStatus: true\r\n        }}\r\n        isInitialValid={false}\r\n        validationSchema={validationCourseSchema}\r\n        onSubmit={values => submitCourse(values, values.thumbnail)}\r\n      >\r\n        {({\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          values,\r\n          isValid,\r\n          errors,\r\n          touched,\r\n          setFieldTouched,\r\n          setFieldValue\r\n        }) => {\r\n          return (\r\n            <div\r\n              className={'createBg'}\r\n              style={{\r\n                marginLeft: isDesktopOrLaptop ? 64 : 0,\r\n                marginRight: isDesktopOrLaptop ? 64 : 0\r\n              }}\r\n            >\r\n              <Title\r\n                level={4}\r\n                style={{ textAlign: 'center', marginBottom: 48 }}\r\n              >\r\n                Create new course\r\n              </Title>\r\n              <Upload\r\n                name=\"avatar\"\r\n                listType=\"picture-card\"\r\n                className=\"avatar-uploader\"\r\n                showUploadList={false}\r\n                customRequest={dummyRequest}\r\n                beforeUpload={beforeUpload}\r\n                onChange={info => handleUploadThumb(info, handleChange)}\r\n              >\r\n                {values.thumbnail ? (\r\n                  <img\r\n                    src={values.thumbnail}\r\n                    alt=\"avatar\"\r\n                    style={{ width: '100%' }}\r\n                  />\r\n                ) : (\r\n                  uploadButton\r\n                )}\r\n              </Upload>\r\n              <CInput\r\n                className=\"inputBox\"\r\n                value={values.thumbnail}\r\n                onChange={handleChange('thumbnail')}\r\n                onTouchStart={() => setFieldTouched('thumbnail')}\r\n                onBlur={handleBlur('thumbnail')}\r\n                placeholder=\"Để link hình ở đây nha\"\r\n              />\r\n              <Typography style={{ color: 'red' }}>\r\n                {errors.thumbnail}\r\n              </Typography>\r\n              <div style={{ marginTop: 12 }}>\r\n                <Text strong>Name</Text>\r\n                <CInput\r\n                  className=\"inputBox\"\r\n                  value={values.name}\r\n                  onChange={handleChange('name')}\r\n                  onTouchStart={() => setFieldTouched('name')}\r\n                  onBlur={handleBlur('name')}\r\n                  placeholder=\"Python Development\"\r\n                  error={errors.name}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Text strong>Short description</Text>\r\n                <CInput\r\n                  className=\"inputBox\"\r\n                  value={values.shortDescription}\r\n                  onChange={handleChange('shortDescription')}\r\n                  onTouchStart={() => setFieldTouched('shortDescription')}\r\n                  onBlur={handleBlur('shortDescription')}\r\n                  placeholder=\"This is a Python course\"\r\n                  error={errors.shortDescription}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Text strong>Description</Text>\r\n                <Editor\r\n                  wrapperClassName=\"wrapperClassName\"\r\n                  editorClassName=\"editorClassName\"\r\n                  onBlur={(event, state) =>\r\n                    handleDescription(state, setFieldValue)\r\n                  }\r\n                />\r\n              </div>\r\n\r\n              <div style={{ marginBottom: 12, marginTop: 16 }}>\r\n                <Text strong>Category</Text>\r\n                <Select\r\n                  style={{ width: '100%' }}\r\n                  value={values.categoryId}\r\n                  onChange={value => setFieldValue('categoryId', value)}\r\n                >\r\n                  <Option value={null}>Choose one category</Option>\r\n                  {realList.map(item => (\r\n                    <Option key={`cate${item.id}`} value={item.id}>\r\n                      {item.name}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n                <Typography style={{ color: 'red' }}>\r\n                  {errors.categoryId}\r\n                </Typography>\r\n              </div>\r\n\r\n              <Row align=\"middle\" justify=\"space-between\" wrap gutter={32}>\r\n                <Col span={10} sm={24} lg={10} className=\"rowCol\">\r\n                  <Text strong style={{ marginBottom: 12, marginRight: 8 }}>\r\n                    Price\r\n                  </Text>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.price}\r\n                    onChange={handleChange('price')}\r\n                    onTouchStart={() => setFieldTouched('price')}\r\n                    onBlur={handleBlur('price')}\r\n                    placeholder=\"1.99\"\r\n                    error={errors.price}\r\n                    type=\"number\"\r\n                  />\r\n                </Col>\r\n\r\n                <Col span={8} sm={12} lg={8} className=\"rowCol\">\r\n                  <Text strong>Mark as complete</Text>\r\n                  <Switch\r\n                    defaultChecked={values.completeStatus}\r\n                    onChange={checked =>\r\n                      setFieldValue('completeStatus', checked)\r\n                    }\r\n                  />\r\n                </Col>\r\n\r\n                <Col span={6} sm={12} lg={6} className=\"rowCol\">\r\n                  <Text strong>Public</Text>\r\n                  <Switch\r\n                    defaultChecked={values.publicStatus}\r\n                    onChange={checked => setFieldValue('publicStatus', checked)}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <div style={{ marginTop: 48 }}>\r\n                <Title style={{ marginBottom: 16 }} level={5}>\r\n                  Chapters\r\n                </Title>\r\n                <Row\r\n                  align=\"top\"\r\n                  justify=\"start\"\r\n                  wrap\r\n                  gutter={[\r\n                    { xs: 8, sm: 16, md: 24 },\r\n                    { xs: 8, sm: 16, md: 24 }\r\n                  ]}\r\n                >\r\n                  {values.chapters.length > 0 &&\r\n                    values.chapters.map((step, i) => (\r\n                      <Col\r\n                        span={8}\r\n                        key={`step${step.numberId}`}\r\n                        xs={24}\r\n                        md={12}\r\n                        lg={8}\r\n                      >\r\n                        <div className=\"rowCol\" style={{ marginBottom: 8 }}>\r\n                          <Text strong>Chapter {i + 1}</Text>\r\n                          <Button\r\n                            size=\"middle\"\r\n                            style={{ backgroundColor: 'red', color: 'white' }}\r\n                            onClick={() => {\r\n                              let chapters = values.chapters\r\n                              chapters.splice(i, 1)\r\n                              setFieldValue('chapters', chapters)\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </div>\r\n\r\n                        <CInput\r\n                          className=\"inputBox\"\r\n                          value={step.name}\r\n                          onChange={event => {\r\n                            let chapters = values.chapters\r\n                            chapters[i].name = event.target.value\r\n                            setFieldValue('chapters', chapters)\r\n                          }}\r\n                          onTouchStart={() => setFieldTouched('chapters')}\r\n                          onBlur={handleBlur('chapters')}\r\n                          placeholder=\"Chapter name\"\r\n                          error={\r\n                            errors.chapters &&\r\n                            typeof errors.chapters === 'object' &&\r\n                            errors.chapters[i]?.name &&\r\n                            errors.chapters[i].name\r\n                          }\r\n                        />\r\n                        <CInput\r\n                          className=\"inputBox\"\r\n                          value={step.description}\r\n                          onChange={event => {\r\n                            let chapters = values.chapters\r\n                            chapters[i].description = event.target.value\r\n                            setFieldValue('chapters', chapters)\r\n                          }}\r\n                          onTouchStart={() => setFieldTouched('chapters')}\r\n                          onBlur={handleBlur('chapters')}\r\n                          placeholder=\"Description\"\r\n                          error={\r\n                            errors.chapters &&\r\n                            typeof errors.chapters === 'object' &&\r\n                            errors.chapters[i]?.description &&\r\n                            errors.chapters[i].description\r\n                          }\r\n                        />\r\n                        <CInput\r\n                          className=\"inputBox\"\r\n                          value={step.video}\r\n                          onChange={event => {\r\n                            let chapters = values.chapters\r\n                            chapters[i].video = event.target.value\r\n                            setFieldValue('chapters', chapters)\r\n                          }}\r\n                          onTouchStart={() => setFieldTouched('chapters')}\r\n                          onBlur={handleBlur('chapters')}\r\n                          placeholder=\"Chapter video link\"\r\n                          error={\r\n                            errors.chapters &&\r\n                            typeof errors.chapters === 'object' &&\r\n                            errors.chapters[i]?.video &&\r\n                            errors.chapters[i].video\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    ))}\r\n                </Row>\r\n\r\n                {errors.chapters && typeof errors.chapters === 'string' && (\r\n                  <Typography style={{ color: 'red' }}>\r\n                    {errors.chapters}\r\n                  </Typography>\r\n                )}\r\n                <Button\r\n                  size=\"middle\"\r\n                  type=\"primary\"\r\n                  style={{ marginTop: 16 }}\r\n                  onClick={() => {\r\n                    let chapters = values.chapters\r\n                    chapters.push({\r\n                      numberId: values.chapters.length + 1,\r\n                      name: '',\r\n                      description: null,\r\n                      video: null\r\n                    })\r\n                    setFieldValue('chapters', chapters)\r\n                  }}\r\n                >\r\n                  Add chapter\r\n                </Button>\r\n              </div>\r\n\r\n              <div style={{ textAlign: 'center', marginTop: 64 }}>\r\n                <Button\r\n                  size=\"large\"\r\n                  style={{\r\n                    marginRight: 24,\r\n                    backgroundColor: 'red',\r\n                    color: 'white'\r\n                  }}\r\n                  onClick={() => history.goBack()}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  size=\"large\"\r\n                  type=\"primary\"\r\n                  disabled={!isValid}\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Create\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )\r\n        }}\r\n      </Formik>\r\n    </>\r\n  )\r\n}\r\n","F:\\coursedo.github.io\\src\\pages\\Courses\\index.jsx",["320","321","322"],"import { Button, Col, Menu, Pagination, Row, Select } from 'antd'\r\nimport bgPic from 'assets/images/bg.png'\r\nimport CourseCard from 'components/CourseCard'\r\nimport Footer from 'components/Footer'\r\nimport Header from 'components/Header'\r\nimport 'components/Header/header.css'\r\nimport 'pages/Home/home.css'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { checkBadge, history } from 'ultis/functions'\r\nimport { GetCoursesFilter, UpdateCurCate } from './redux/actions'\r\nimport queryString from 'query-string'\r\nconst { Option } = Select\r\nconst { SubMenu } = Menu\r\n\r\nfunction Courses(props) {\r\n  const dispatch = useDispatch()\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n  const { courseList, page, sort, sortOrder, total } = useSelector(\r\n    state => state.CourseList\r\n  )\r\n  const { categoryList } = useSelector(state => state.Dashboard)\r\n  const user = useSelector(state => state.Auth.user)\r\n  const value = queryString.parse(props.location.search)\r\n  const keyword = value?.keyword || null\r\n\r\n  useEffect(() => {\r\n    const val = {\r\n      keyword: keyword,\r\n      page: Math.floor(total / 6) + 1 < page ? 1 : page,\r\n      limit: 6,\r\n      sort: sort,\r\n      sortOrder: sortOrder\r\n    }\r\n    dispatch(GetCoursesFilter.get(val))\r\n    return () => {}\r\n  }, [dispatch, keyword, page, sortOrder, sort])\r\n\r\n  const background = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          flex: 1,\r\n          backgroundColor: 'white'\r\n        }}\r\n      >\r\n        {isDesktopOrLaptop && (\r\n          <div id=\"landing\" style={{ backgroundImage: `url(${bgPic})` }}>\r\n            <span id=\"welcomeTxt\">\r\n              Browse Thousands of Our Video Tutorials Curated Only for you.\r\n            </span>\r\n            {user ? (\r\n              <div />\r\n            ) : (\r\n              <Button\r\n                style={{\r\n                  marginTop: '1vw',\r\n                  backgroundColor: 'white',\r\n                  color: '#FFC000'\r\n                }}\r\n                type=\"primary\"\r\n                onClick={() => history.push('/signup')}\r\n              >\r\n                Join for Free\r\n              </Button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderCourses = () => {\r\n    return (\r\n      <Row gutter={16}>\r\n        {courseList.length > 0 ? (\r\n          courseList.map(item => {\r\n            return (\r\n              <Col span={8} xs={24} sm={12} md={8} style={{ marginBlock: 30 }}>\r\n                <CourseCard\r\n                  id={item.id}\r\n                  img={item.thumbnail}\r\n                  title={item.name}\r\n                  teacher={item.teacherName}\r\n                  cate={item.category}\r\n                  price={item.price}\r\n                  rating={item.rating}\r\n                  total={item.ratingCount}\r\n                  item={item}\r\n                />\r\n              </Col>\r\n            )\r\n          })\r\n        ) : (\r\n          <div />\r\n        )}\r\n      </Row>\r\n    )\r\n  }\r\n\r\n  const handleChange = value => {\r\n    let val = null\r\n    if (value === '1') {\r\n      val = {\r\n        keyword: keyword,\r\n        page: 1,\r\n        limit: 6\r\n      }\r\n    } else if (value === '2') {\r\n      val = {\r\n        keyword: keyword,\r\n        page: 1,\r\n        limit: 6,\r\n        sort: 'rating'\r\n      }\r\n    } else if (value === '3') {\r\n      val = {\r\n        keyword: keyword,\r\n        page: 1,\r\n        limit: 6,\r\n        sort: 'price',\r\n        sortOrder: 'asc'\r\n      }\r\n    } else if (value === '4') {\r\n      val = {\r\n        keyword: keyword,\r\n        page: 1,\r\n        limit: 6,\r\n        sort: 'price',\r\n        sortOrder: 'desc'\r\n      }\r\n    }\r\n    dispatch(GetCoursesFilter.get(val))\r\n  }\r\n\r\n  const updatePage = num => {\r\n    const val = {\r\n      keyword: keyword,\r\n      page: num,\r\n      limit: 6,\r\n      sort: sort,\r\n      sortOrder: sortOrder\r\n    }\r\n    dispatch(GetCoursesFilter.get(val))\r\n  }\r\n\r\n  const renderHeader = () => {\r\n    return (\r\n      <Row\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'row',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          flex: 1,\r\n          marginTop: 50\r\n        }}\r\n      >\r\n        <Col>\r\n          <p id=\"catTitle\">\r\n            {keyword !== null\r\n              ? keyword[0].toUpperCase() + keyword.slice(1)\r\n              : 'All Courses'}\r\n          </p>\r\n        </Col>\r\n\r\n        <Col>\r\n          <Select\r\n            defaultValue=\"Sort By\"\r\n            style={{ width: 120 }}\r\n            onChange={handleChange}\r\n          >\r\n            <Option value=\"1\">Sort</Option>\r\n            <Option value=\"2\">Rating</Option>\r\n            <Option value=\"3\">Price Increase</Option>\r\n            <Option value=\"4\">Price Decrease</Option>\r\n          </Select>\r\n        </Col>\r\n      </Row>\r\n    )\r\n  }\r\n\r\n  const renderListCat = () => {\r\n    return (\r\n      <Menu style={{ width: 256 }} mode=\"inline\">\r\n        {categoryList?.length > 0 ? (\r\n          categoryList.map((item, index) => {\r\n            return (\r\n              <SubMenu\r\n                key={'sub' + index.toString()}\r\n                title={item.name}\r\n                onTitleClick={() => {\r\n                  dispatch(UpdateCurCate.get(item?.name))\r\n                  history.push(`/categories/${item.id}`)\r\n                }}\r\n              >\r\n                {item.subCategory?.length > 0 ? (\r\n                  item.subCategory.map(sub => {\r\n                    return (\r\n                      <Menu.Item\r\n                        key={sub.id.toString()}\r\n                        onClick={() => {\r\n                          dispatch(UpdateCurCate.get(sub?.name))\r\n                          history.push(`/categories/${sub.id}`)\r\n                        }}\r\n                      >\r\n                        {sub.name}\r\n                      </Menu.Item>\r\n                    )\r\n                  })\r\n                ) : (\r\n                  <div />\r\n                )}\r\n              </SubMenu>\r\n            )\r\n          })\r\n        ) : (\r\n          <div />\r\n        )}\r\n      </Menu>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Header />\r\n      {background()}\r\n      <div className=\"container-fluid\">\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flex: 1,\r\n              flexDirection: 'column'\r\n            }}\r\n          >\r\n            {renderHeader()}\r\n            {renderCourses()}\r\n            <div\r\n              style={{\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                display: 'flex',\r\n                flex: 1,\r\n                marginBlock: 60\r\n              }}\r\n            >\r\n              <Pagination\r\n                current={page}\r\n                onChange={num => updatePage(num)}\r\n                total={total}\r\n                pageSize={6}\r\n              />\r\n            </div>\r\n          </div>\r\n          {isDesktopOrLaptop && (\r\n            <div style={{ marginTop: 50 }}>{renderListCat()}</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Courses\r\n","F:\\coursedo.github.io\\src\\pages\\Dashboard\\index.jsx",["323","324"],"import { LoadingOutlined, UserOutlined } from '@ant-design/icons'\r\nimport { Avatar, Button, Menu, Spin } from 'antd'\r\nimport { SignOut } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { FaChalkboardTeacher } from 'react-icons/fa'\r\nimport { FiBookOpen, FiGrid, FiUsers } from 'react-icons/fi'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { COLOR, ROLES } from 'ultis/functions'\r\nimport CategoryList from './component/categoryList'\r\nimport CoursesList from './component/coursesList'\r\nimport StudentList from './component/studentList'\r\nimport TeacherList from './component/teacherList'\r\nimport { PAGE } from './constant'\r\nimport './dashboard.css'\r\nimport { SetCurrentPage } from './redux/actions'\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction Dashboard() {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth.user)\r\n  const isLoadingDashboard = useSelector(\r\n    state => state.Dashboard.isLoadingDashboard\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!user || user?.role !== ROLES.ADMIN) {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (history.action === 'POP') {\r\n        dispatch(SignOut.get())\r\n      }\r\n    }\r\n  }, [history])\r\n\r\n  const currentPage = useSelector(state => state.Dashboard.currentPage)\r\n\r\n  const onMenuSelect = e => {\r\n    dispatch(SetCurrentPage.get({ currentPage: e.key }))\r\n  }\r\n\r\n  const handleSignOut = () => {\r\n    dispatch(SignOut.get())\r\n    history.replace('/')\r\n  }\r\n\r\n  const renderRightDashboard = () => {\r\n    switch (currentPage) {\r\n      case PAGE.CATEGORY:\r\n        return <CategoryList />\r\n      case PAGE.COURSE:\r\n        return <CoursesList />\r\n      case PAGE.TEACHER:\r\n        return <TeacherList />\r\n      case PAGE.STUDENT:\r\n        return <StudentList />\r\n      default:\r\n        return <CategoryList />\r\n    }\r\n  }\r\n\r\n  if (isLoadingDashboard || !user || user.role !== ROLES.ADMIN) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div id=\"dashboardBg\">\r\n      <div id=\"menuContainer\">\r\n        {user?.avatar ? (\r\n          <Avatar size={100} src={user?.avatar} />\r\n        ) : (\r\n          <Avatar size={100} icon={<UserOutlined />} />\r\n        )}\r\n        <span id=\"adminName\">{user.fullName ? user.fullName : 'Admin'}</span>\r\n        <Menu\r\n          defaultSelectedKeys={[PAGE.CATEGORY]}\r\n          selectedKeys={[currentPage]}\r\n          mode=\"inline\"\r\n          onClick={onMenuSelect}\r\n          style={{ backgroundColor: COLOR.primary1 }}\r\n        >\r\n          <Menu.Item\r\n            style={{ color: 'white' }}\r\n            className=\"customItem\"\r\n            key={PAGE.CATEGORY}\r\n            icon={<FiGrid size={16} style={{ marginRight: 8 }} />}\r\n          >\r\n            Categories\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            style={{ color: 'white' }}\r\n            className=\"customItem\"\r\n            key={PAGE.COURSE}\r\n            icon={<FiBookOpen size={16} style={{ marginRight: 8 }} />}\r\n          >\r\n            Courses\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            style={{ color: 'white' }}\r\n            className=\"customItem\"\r\n            key={PAGE.TEACHER}\r\n            icon={<FaChalkboardTeacher size={14} style={{ marginRight: 8 }} />}\r\n          >\r\n            Teachers\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            style={{ color: 'white' }}\r\n            className=\"customItem\"\r\n            key={PAGE.STUDENT}\r\n            icon={<FiUsers size={16} style={{ marginRight: 8 }} />}\r\n          >\r\n            Students\r\n          </Menu.Item>\r\n        </Menu>\r\n        <Button\r\n          type=\"ghost\"\r\n          style={{\r\n            width: '80%',\r\n            marginTop: 64,\r\n            borderColor: 'white',\r\n            borderRadius: 8,\r\n            color: 'white'\r\n          }}\r\n          onClick={() => handleSignOut()}\r\n        >\r\n          Log out\r\n        </Button>\r\n      </div>\r\n      {renderRightDashboard()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","F:\\coursedo.github.io\\src\\pages\\Profile\\index.jsx",["325"],"import { LoadingOutlined } from '@ant-design/icons'\r\nimport { Spin, Tabs } from 'antd'\r\nimport Footer from 'components/Footer'\r\nimport Header from 'components/Header'\r\nimport React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { COLOR } from 'ultis/functions'\r\nimport ChangePassTab from './components/changePassTab'\r\nimport ProfileTab from './components/profileTab'\r\nimport './profile.css'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction Profile() {\r\n  const userDetail = useSelector(state => state.Auth.user)\r\n  const isLoadingProfile = useSelector(state => state.Auth.isLoadingProfile)\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    if (!userDetail) {\r\n      history.replace('/')\r\n    }\r\n  }, [])\r\n\r\n  if (isLoadingProfile || !userDetail) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\" style={{ alignSelf: 'center' }}>\r\n          Profile\r\n        </span>\r\n        <Tabs defaultActiveKey=\"1\" centered>\r\n          <TabPane tab=\"Information\" key=\"1\">\r\n            <ProfileTab user={userDetail} />\r\n          </TabPane>\r\n          <TabPane tab=\"Change Password\" key=\"2\">\r\n            <ChangePassTab user={userDetail} />\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n","F:\\coursedo.github.io\\src\\pages\\EditCourse\\index.jsx",["326","327"],"import { LoadingOutlined, PlusOutlined } from '@ant-design/icons'\r\nimport {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Select,\r\n  Spin,\r\n  Switch,\r\n  Typography,\r\n  Upload\r\n} from 'antd'\r\nimport CInput from 'components/CInput'\r\nimport Header from 'components/Header'\r\nimport { convertToRaw, EditorState, ContentState } from 'draft-js'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport htmlToDraft from 'html-to-draftjs'\r\nimport { Formik } from 'formik'\r\nimport { validationCourseSchema } from 'pages/CreateCourse/constant'\r\nimport 'pages/CreateCourse/createCourse.css'\r\nimport { GetCourseDetail } from 'pages/CreateCourse/redux/actions'\r\nimport {\r\n  beforeUpload,\r\n  dummyRequest,\r\n  getBase64\r\n} from 'pages/Dashboard/component/addTeacher'\r\nimport { GetAllCategories } from 'pages/Dashboard/redux/actions'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport CoursedoFirebase from 'ultis/firebaseConfig'\r\nimport { COLOR, ROLES } from 'ultis/functions'\r\n\r\nconst { Title, Text } = Typography\r\nconst { Option } = Select\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nexport default function EditCourse(props) {\r\n  const param = useParams()\r\n  const { courseId } = param\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth.user)\r\n  const courseDetail = useSelector(state => state.Course.courseDetail)\r\n  const isLoading = useSelector(state => state.Course.isLoading)\r\n  const history = useHistory()\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n  const categoryList = useSelector(state => state.Dashboard.categoryList)\r\n  const [isLoadingImage, setLoadingImage] = useState(false)\r\n  const [imgName, setImgName] = useState(null)\r\n  let realList = []\r\n  categoryList.forEach(item => {\r\n    realList.push({\r\n      name: item.name,\r\n      id: item.id\r\n    })\r\n    item?.subCategory &&\r\n      item?.subCategory.length > 0 &&\r\n      item?.subCategory.forEach(subCat => {\r\n        realList.push({\r\n          name: subCat.name,\r\n          id: subCat.id\r\n        })\r\n      })\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (user && (user.role === ROLES.ADMIN || user.role === ROLES.TEACHER)) {\r\n      dispatch(GetAllCategories.get())\r\n      dispatch(GetCourseDetail.get(courseId))\r\n    } else {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  const submitCourse = (values, imgURL) => {\r\n    values.chapters.forEach((item, index) => {\r\n      item.numberId = index + 1\r\n    })\r\n    // dispatch(\r\n    //   AddCourse.get({\r\n    //     ...values,\r\n    //     numberOfChapter: values.chapters.length,\r\n    //     thumbnail: imgURL\r\n    //   })\r\n    // )\r\n  }\r\n\r\n  const handleUploadImg = values => {\r\n    CoursedoFirebase.storage()\r\n      .ref('Courses')\r\n      .child(imgName)\r\n      .getDownloadURL()\r\n      .then(dwnURL => {\r\n        submitCourse(values, dwnURL)\r\n      })\r\n      .catch(async error => {\r\n        try {\r\n          const snapshot = await CoursedoFirebase.storage()\r\n            .ref('Courses')\r\n            .child(imgName)\r\n            .putString(values.thumbnail, 'data_url')\r\n          const downloadUrl = await snapshot.ref.getDownloadURL()\r\n          submitCourse(values, downloadUrl)\r\n        } catch (errorUpload) {}\r\n      })\r\n  }\r\n\r\n  const handleUploadThumb = (info, handleChange) => {\r\n    if (info.file.status === 'uploading') {\r\n      setLoadingImage(true)\r\n      return\r\n    }\r\n    if (info.file.status === 'done') {\r\n      setImgName(info.file.name)\r\n      getBase64(info.file.originFileObj, imageUrl => {\r\n        handleChange('thumbnail')(imageUrl)\r\n        setLoadingImage(false)\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleDescription = (state, setFieldValue = value => {}) => {\r\n    const rawContentState = convertToRaw(state.getCurrentContent())\r\n    const markup = draftToHtml(rawContentState)\r\n    setFieldValue('description', markup)\r\n  }\r\n\r\n  if (isLoading || !user || !courseDetail) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (user.role === ROLES.TEACHER && courseDetail.teacherId !== user.id) {\r\n    return (\r\n      <>\r\n        <Header from=\"addCourse\" />\r\n        <div style={{ textAlign: 'center' }}>\r\n          <Typography variant=\"body1\" style={{ margin: 28 }}>\r\n            You are not allowed to edit this course. Press this button to go\r\n            back to home.\r\n          </Typography>\r\n          <Button\r\n            type=\"primary\"\r\n            size=\"large\"\r\n            onClick={() => history.replace('/')}\r\n          >\r\n            Return to homepage\r\n          </Button>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const blocksFromHtml = htmlToDraft(courseDetail.description)\r\n  const { contentBlocks, entityMap } = blocksFromHtml\r\n  const contentState = ContentState.createFromBlockArray(\r\n    contentBlocks,\r\n    entityMap\r\n  )\r\n  const editorState = EditorState.createWithContent(contentState)\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      {isLoadingImage ? (\r\n        <LoadingOutlined style={{ color: COLOR.primary1 }} />\r\n      ) : (\r\n        <PlusOutlined />\r\n      )}\r\n      <div\r\n        className=\"ant-upload-text\"\r\n        style={{ fontFamily: 'Source Sans Pro' }}\r\n      >\r\n        {isLoadingImage ? 'Uploading' : 'Upload'}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Header from=\"addCourse\" />\r\n      <Formik\r\n        initialValues={{\r\n          name: courseDetail.name || '',\r\n          shortDescription: courseDetail.shortDescription || null,\r\n          description: courseDetail.description || '',\r\n          thumbnail: courseDetail.thumbnail || null,\r\n          price: courseDetail.price || 0,\r\n          chapters: courseDetail.chapters || [\r\n            { numberId: 1, name: '', description: null, video: null }\r\n          ],\r\n          categoryId: courseDetail.categoryId || null,\r\n          completeStatus: courseDetail.completeStatus || false,\r\n          publicStatus: courseDetail.publicStatus || true\r\n        }}\r\n        isInitialValid={false}\r\n        validationSchema={validationCourseSchema}\r\n        onSubmit={values => submitCourse(values, values.thumbnail)}\r\n      >\r\n        {({\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          values,\r\n          isValid,\r\n          errors,\r\n          touched,\r\n          setFieldTouched,\r\n          setFieldValue\r\n        }) => {\r\n          return (\r\n            <div\r\n              className={'createBg'}\r\n              style={{\r\n                marginLeft: isDesktopOrLaptop ? 64 : 0,\r\n                marginRight: isDesktopOrLaptop ? 64 : 0\r\n              }}\r\n            >\r\n              <Title\r\n                level={4}\r\n                style={{ textAlign: 'center', marginBottom: 48 }}\r\n              >\r\n                Edit course\r\n              </Title>\r\n              <Upload\r\n                name=\"avatar\"\r\n                listType=\"picture-card\"\r\n                className=\"avatar-uploader\"\r\n                showUploadList={false}\r\n                customRequest={dummyRequest}\r\n                beforeUpload={beforeUpload}\r\n                onChange={info => handleUploadThumb(info, handleChange)}\r\n              >\r\n                {values.thumbnail ? (\r\n                  <img\r\n                    src={values.thumbnail}\r\n                    alt=\"avatar\"\r\n                    style={{ width: '100%' }}\r\n                  />\r\n                ) : (\r\n                  uploadButton\r\n                )}\r\n              </Upload>\r\n              <CInput\r\n                className=\"inputBox\"\r\n                value={values.thumbnail}\r\n                onChange={handleChange('thumbnail')}\r\n                onTouchStart={() => setFieldTouched('thumbnail')}\r\n                onBlur={handleBlur('thumbnail')}\r\n                placeholder=\"Để link hình ở đây nha\"\r\n              />\r\n              <Typography style={{ color: 'red' }}>\r\n                {errors.thumbnail}\r\n              </Typography>\r\n              <div style={{ marginTop: 12 }}>\r\n                <Text strong>Name</Text>\r\n                <CInput\r\n                  className=\"inputBox\"\r\n                  value={values.name}\r\n                  onChange={handleChange('name')}\r\n                  onTouchStart={() => setFieldTouched('name')}\r\n                  onBlur={handleBlur('name')}\r\n                  placeholder=\"Python Development\"\r\n                  error={errors.name}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Text strong>Short description</Text>\r\n                <CInput\r\n                  className=\"inputBox\"\r\n                  value={values.shortDescription}\r\n                  onChange={handleChange('shortDescription')}\r\n                  onTouchStart={() => setFieldTouched('shortDescription')}\r\n                  onBlur={handleBlur('shortDescription')}\r\n                  placeholder=\"This is a Python course\"\r\n                  error={errors.shortDescription}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Text strong>Description</Text>\r\n                <Editor\r\n                  wrapperClassName=\"wrapperClassName\"\r\n                  editorClassName=\"editorClassName\"\r\n                  defaultEditorState={editorState}\r\n                  onBlur={(event, state) =>\r\n                    handleDescription(state, setFieldValue)\r\n                  }\r\n                />\r\n              </div>\r\n\r\n              <div style={{ marginBottom: 12, marginTop: 16 }}>\r\n                <Text strong>Category</Text>\r\n                <Select\r\n                  disabled\r\n                  style={{ width: '100%' }}\r\n                  value={values.categoryId}\r\n                  onChange={value => setFieldValue('categoryId', value)}\r\n                >\r\n                  <Option value={null}>Choose one category</Option>\r\n                  {realList.map(item => (\r\n                    <Option key={`cate${item.id}`} value={item.id}>\r\n                      {item.name}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n                <Typography style={{ color: 'red' }}>\r\n                  {errors.categoryId}\r\n                </Typography>\r\n              </div>\r\n\r\n              <Row align=\"middle\" justify=\"space-between\" wrap gutter={32}>\r\n                <Col span={10} sm={24} lg={10} className=\"rowCol\">\r\n                  <Text strong style={{ marginBottom: 12, marginRight: 8 }}>\r\n                    Price\r\n                  </Text>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.price}\r\n                    onChange={handleChange('price')}\r\n                    onTouchStart={() => setFieldTouched('price')}\r\n                    onBlur={handleBlur('price')}\r\n                    placeholder=\"1.99\"\r\n                    error={errors.price}\r\n                    type=\"number\"\r\n                  />\r\n                </Col>\r\n\r\n                <Col span={8} sm={12} lg={8} className=\"rowCol\">\r\n                  <Text strong>Mark as complete</Text>\r\n                  <Switch\r\n                    defaultChecked={values.completeStatus}\r\n                    onChange={checked =>\r\n                      setFieldValue('completeStatus', checked)\r\n                    }\r\n                  />\r\n                </Col>\r\n\r\n                <Col span={6} sm={12} lg={6} className=\"rowCol\">\r\n                  <Text strong>Public</Text>\r\n                  <Switch\r\n                    defaultChecked={values.publicStatus}\r\n                    onChange={checked => setFieldValue('publicStatus', checked)}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <div style={{ marginTop: 48 }}>\r\n                <Title style={{ marginBottom: 16 }} level={5}>\r\n                  Chapters\r\n                </Title>\r\n                <Row\r\n                  align=\"top\"\r\n                  justify=\"start\"\r\n                  wrap\r\n                  gutter={[\r\n                    { xs: 8, sm: 16, md: 24 },\r\n                    { xs: 8, sm: 16, md: 24 }\r\n                  ]}\r\n                >\r\n                  {values.chapters.length > 0 &&\r\n                    values.chapters.map((step, i) => (\r\n                      <Col\r\n                        span={8}\r\n                        key={`step${step.numberId}`}\r\n                        xs={24}\r\n                        md={12}\r\n                        lg={8}\r\n                      >\r\n                        <div className=\"rowCol\" style={{ marginBottom: 8 }}>\r\n                          <Text strong>Chapter {i + 1}</Text>\r\n                          <Button\r\n                            size=\"middle\"\r\n                            style={{ backgroundColor: 'red', color: 'white' }}\r\n                            onClick={() => {\r\n                              let chapters = values.chapters\r\n                              chapters.splice(i, 1)\r\n                              setFieldValue('chapters', chapters)\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </div>\r\n\r\n                        <CInput\r\n                          className=\"inputBox\"\r\n                          value={step.name}\r\n                          onChange={event => {\r\n                            let chapters = values.chapters\r\n                            chapters[i].name = event.target.value\r\n                            setFieldValue('chapters', chapters)\r\n                          }}\r\n                          onTouchStart={() => setFieldTouched('chapters')}\r\n                          onBlur={handleBlur('chapters')}\r\n                          placeholder=\"Chapter name\"\r\n                          error={\r\n                            errors.chapters &&\r\n                            typeof errors.chapters === 'object' &&\r\n                            errors.chapters[i]?.name &&\r\n                            errors.chapters[i].name\r\n                          }\r\n                        />\r\n                        <CInput\r\n                          className=\"inputBox\"\r\n                          value={step.description}\r\n                          onChange={event => {\r\n                            let chapters = values.chapters\r\n                            chapters[i].description = event.target.value\r\n                            setFieldValue('chapters', chapters)\r\n                          }}\r\n                          onTouchStart={() => setFieldTouched('chapters')}\r\n                          onBlur={handleBlur('chapters')}\r\n                          placeholder=\"Description\"\r\n                          error={\r\n                            errors.chapters &&\r\n                            typeof errors.chapters === 'object' &&\r\n                            errors.chapters[i]?.description &&\r\n                            errors.chapters[i].description\r\n                          }\r\n                        />\r\n                        <CInput\r\n                          className=\"inputBox\"\r\n                          value={step.video}\r\n                          onChange={event => {\r\n                            let chapters = values.chapters\r\n                            chapters[i].video = event.target.value\r\n                            setFieldValue('chapters', chapters)\r\n                          }}\r\n                          onTouchStart={() => setFieldTouched('chapters')}\r\n                          onBlur={handleBlur('chapters')}\r\n                          placeholder=\"Chapter video link\"\r\n                          error={\r\n                            errors.chapters &&\r\n                            typeof errors.chapters === 'object' &&\r\n                            errors.chapters[i]?.video &&\r\n                            errors.chapters[i].video\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    ))}\r\n                </Row>\r\n\r\n                {errors.chapters && typeof errors.chapters === 'string' && (\r\n                  <Typography style={{ color: 'red' }}>\r\n                    {errors.chapters}\r\n                  </Typography>\r\n                )}\r\n                <Button\r\n                  size=\"middle\"\r\n                  type=\"primary\"\r\n                  style={{ marginTop: 16 }}\r\n                  onClick={() => {\r\n                    let chapters = values.chapters\r\n                    chapters.push({\r\n                      numberId: values.chapters.length + 1,\r\n                      name: '',\r\n                      description: null,\r\n                      video: null\r\n                    })\r\n                    setFieldValue('chapters', chapters)\r\n                  }}\r\n                >\r\n                  Add chapter\r\n                </Button>\r\n              </div>\r\n\r\n              <div style={{ textAlign: 'center', marginTop: 64 }}>\r\n                <Button\r\n                  size=\"large\"\r\n                  style={{\r\n                    marginRight: 24,\r\n                    backgroundColor: 'red',\r\n                    color: 'white'\r\n                  }}\r\n                  onClick={() => history.goBack()}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  size=\"large\"\r\n                  type=\"primary\"\r\n                  disabled={!isValid}\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Update\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )\r\n        }}\r\n      </Formik>\r\n    </>\r\n  )\r\n}\r\n","F:\\coursedo.github.io\\src\\pages\\Home\\index.jsx",["328"],"import { Button } from 'antd'\r\nimport bgPic from 'assets/images/bg.png'\r\nimport Footer from 'components/Footer'\r\nimport Header from 'components/Header'\r\nimport { GetAllCategories } from 'pages/Dashboard/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { history } from 'ultis/functions'\r\nimport '../../components/Header/header.css'\r\nimport DiscoBtn from './components/discoverBtn'\r\nimport SwipeList from './components/swipeComponent'\r\nimport { courses } from './constant'\r\nimport './home.css'\r\nimport { GetHomeCourse } from './redux/actions'\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch()\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n  const user = useSelector(state => state.Auth.user)\r\n  const { trending, mostBuy, newest } = useSelector(state => state.Home)\r\n\r\n  useEffect(() => {\r\n    dispatch(GetAllCategories.get())\r\n    dispatch(GetHomeCourse.get())\r\n    return () => {}\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Header />\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          flex: 1,\r\n          backgroundColor: 'white'\r\n        }}\r\n      >\r\n        {isDesktopOrLaptop && (\r\n          <div id=\"landing\" style={{ backgroundImage: `url(${bgPic})` }}>\r\n            <span id=\"welcomeTxt\">\r\n              Get Access to Unlimited Educational Resources. Everywhere,\r\n              Everytime!\r\n            </span>\r\n            {user ? (\r\n              <div />\r\n            ) : (\r\n              <Button\r\n                style={{\r\n                  marginTop: '1vw',\r\n                  backgroundColor: 'white',\r\n                  color: '#FFC000'\r\n                }}\r\n                type=\"primary\"\r\n                onClick={() => history.push('/signup')}\r\n              >\r\n                Join for Free\r\n              </Button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"container-fluid\">\r\n        <div id=\"swipe\">\r\n          <p id=\"type\">Trending Courses</p>\r\n          <SwipeList list={trending} type={'courses'} />\r\n          <DiscoBtn onClick={() => history.push('/courses')} />\r\n        </div>\r\n\r\n        <div id=\"swipe\">\r\n          <p id=\"type\">Most Popular Courses</p>\r\n          <SwipeList list={mostBuy} type={'courses'} />\r\n          <DiscoBtn onClick={() => history.push('/courses')} />\r\n        </div>\r\n        <div id=\"swipe\">\r\n          <p id=\"type\">Newest Courses</p>\r\n          <SwipeList list={newest} type={'courses'} />\r\n          <DiscoBtn onClick={() => history.push('/courses')} />\r\n        </div>\r\n        <div id=\"swipe\">\r\n          <p id=\"type\">Top categories</p>\r\n          <SwipeList list={courses} type={'category'} />\r\n          <DiscoBtn onClick={() => history.push('/categories')} />\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","F:\\coursedo.github.io\\src\\pages\\CreateCourse\\redux\\actions.js",[],"F:\\coursedo.github.io\\src\\ultis\\firebaseConfig.js",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\addTeacher.jsx",[],"F:\\coursedo.github.io\\src\\pages\\SignIn\\redux\\actions.js",[],"F:\\coursedo.github.io\\src\\components\\CInput\\index.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Home\\constant.js",[],"F:\\coursedo.github.io\\src\\pages\\Home\\redux\\actions.js",[],"F:\\coursedo.github.io\\src\\pages\\Home\\components\\discoverBtn.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Home\\components\\swipeComponent.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\constant.js",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\redux\\actions.js",[],"F:\\coursedo.github.io\\src\\pages\\CreateCourse\\constant.js",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\teacherList.jsx",["329"],"import {\r\n  EyeOutlined,\r\n  LoadingOutlined,\r\n  PlusCircleOutlined\r\n} from '@ant-design/icons'\r\nimport { Button, Space, Spin, Table, Tabs } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { COLOR, ROLES } from 'ultis/functions'\r\nimport { PAGE } from '../constant'\r\nimport '../dashboard.css'\r\nimport { GetUserProfile, GetUsers, SetCurrentPage } from '../redux/actions'\r\nimport AddTeacherModal from './addTeacher'\r\nimport CoursesTab from './coursesTab'\r\nimport ProfileTab from './profileTab'\r\nimport { getColumnSearchProps } from './searchInput'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction TeacherList() {\r\n  const userList = useSelector(state => state.Dashboard.userList)\r\n  const isLoading = useSelector(state => state.Dashboard.isLoading)\r\n  const detailPage = useSelector(state => state.Dashboard.detailPage)\r\n  const userDetail = useSelector(state => state.Dashboard.userDetail)\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchColumn] = useState('')\r\n  const refInput = useRef()\r\n\r\n  const [edit, setEdit] = useState(false)\r\n\r\n  useEffect(() => {\r\n    dispatch(GetUsers.get({ role: ROLES.TEACHER }))\r\n  }, [])\r\n\r\n  const onAddNewTeacher = () => {\r\n    setEdit(true)\r\n  }\r\n\r\n  const handleView = record => {\r\n    dispatch(GetUserProfile.get(record.id))\r\n    dispatch(\r\n      SetCurrentPage.get({\r\n        currentPage: PAGE.TEACHER,\r\n        detailPage: PAGE.PROFILE\r\n      })\r\n    )\r\n  }\r\n\r\n  const userColumns = [\r\n    {\r\n      ...getColumnSearchProps(\r\n        'id',\r\n        'Enter id to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n      sorter: (a, b) => a.id.localeCompare(b.id)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'fullName',\r\n        'Enter name to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Name',\r\n      dataIndex: 'fullName',\r\n      key: 'fullName',\r\n      sorter: (a, b) => a.fullName.localeCompare(b.fullName)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'email',\r\n        'Enter email to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Email',\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n      sorter: (a, b) => a.email.localeCompare(b.email)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'phoneNumber',\r\n        'Enter email to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Phone number',\r\n      dataIndex: 'phoneNumber',\r\n      key: 'phoneNumber',\r\n      sorter: (a, b) => a.phoneNumber.localeCompare(b.phoneNumber)\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <EyeOutlined\r\n              style={{ fontSize: 20 }}\r\n              onClick={() => handleView(record)}\r\n            />\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (detailPage === PAGE.PROFILE) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\" style={{ alignSelf: 'center' }}>\r\n          Profile\r\n        </span>\r\n        <Tabs defaultActiveKey=\"1\" centered>\r\n          <TabPane tab=\"Information\" key=\"1\">\r\n            <ProfileTab user={userDetail} />\r\n          </TabPane>\r\n          <TabPane tab=\"All courses\" key=\"2\">\r\n            <CoursesTab courseList={userDetail.courses} role={ROLES.TEACHER} />\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\">Teachers</span>\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<PlusCircleOutlined />}\r\n          style={{ width: 200, marginBottom: 32 }}\r\n          onClick={() => onAddNewTeacher()}\r\n          size=\"large\"\r\n        >\r\n          Add new teacher\r\n        </Button>\r\n        <Table columns={userColumns} dataSource={userList} />\r\n      </div>\r\n      <AddTeacherModal\r\n        visible={edit}\r\n        onClose={() => {\r\n          setEdit(false)\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TeacherList\r\n","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\studentList.jsx",["330"],"import { EyeOutlined, LoadingOutlined } from '@ant-design/icons'\r\nimport { Space, Spin, Table } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { COLOR, ROLES } from 'ultis/functions'\r\nimport { ACCOUNT_STATUS, PAGE } from '../constant'\r\nimport '../dashboard.css'\r\nimport { GetUserProfile, GetUsers, SetCurrentPage } from '../redux/actions'\r\nimport { getColumnSearchProps } from './searchInput'\r\nimport { Tabs } from 'antd'\r\nimport ProfileTab from './profileTab'\r\nimport CoursesTab from './coursesTab'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction StudentList() {\r\n  const userList = useSelector(state => state.Dashboard.userList)\r\n  const isLoading = useSelector(state => state.Dashboard.isLoading)\r\n  const detailPage = useSelector(state => state.Dashboard.detailPage)\r\n  const userDetail = useSelector(state => state.Dashboard.userDetail)\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchColumn] = useState('')\r\n  const refInput = useRef()\r\n  const [filteredInfo, setFilterInfo] = useState(null)\r\n\r\n  useEffect(() => {\r\n    dispatch(GetUsers.get({ role: `${ROLES.STUDENT},${ROLES.NOT_VERIFIED}` }))\r\n  }, [])\r\n\r\n  const handleView = record => {\r\n    dispatch(GetUserProfile.get(record.id))\r\n    dispatch(\r\n      SetCurrentPage.get({\r\n        currentPage: PAGE.STUDENT,\r\n        detailPage: PAGE.PROFILE\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleChange = (pagination, filters, sorter) => {\r\n    setFilterInfo(filters)\r\n  }\r\n\r\n  const userColumns = [\r\n    {\r\n      ...getColumnSearchProps(\r\n        'id',\r\n        'Enter id to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n      sorter: (a, b) => a.id.localeCompare(b.id)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'fullName',\r\n        'Enter name to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Name',\r\n      dataIndex: 'fullName',\r\n      key: 'fullName',\r\n      sorter: (a, b) => a.fullName.localeCompare(b.fullName)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'email',\r\n        'Enter email to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Email',\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n      sorter: (a, b) => a.email.localeCompare(b.email)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'phoneNumber',\r\n        'Enter email to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Phone number',\r\n      dataIndex: 'phoneNumber',\r\n      key: 'phoneNumber',\r\n      sorter: (a, b) => a.phoneNumber.localeCompare(b.phoneNumber)\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'role',\r\n      render: (value, record, index) => {\r\n        switch (value) {\r\n          case ROLES.STUDENT:\r\n            return <span style={{ color: 'green' }}>{'Verified'}</span>\r\n          case ROLES.NOT_VERIFIED:\r\n            return <span style={{ color: 'red' }}>{'Not verified'}</span>\r\n          default:\r\n            return <span />\r\n        }\r\n      },\r\n      filters: ACCOUNT_STATUS,\r\n      filteredValue: filteredInfo ? filteredInfo.name : null,\r\n      onFilter: (value, record) => record.role === value\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <EyeOutlined\r\n              style={{ fontSize: 20 }}\r\n              onClick={() => handleView(record)}\r\n            />\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (detailPage === PAGE.PROFILE) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\" style={{ alignSelf: 'center' }}>\r\n          Profile\r\n        </span>\r\n        <Tabs defaultActiveKey=\"1\" centered>\r\n          <TabPane tab=\"Information\" key=\"1\">\r\n            <ProfileTab user={userDetail} />\r\n          </TabPane>\r\n          <TabPane tab=\"All courses\" key=\"2\">\r\n            <CoursesTab\r\n              courseList={userDetail.enrollment}\r\n              role={ROLES.STUDENT}\r\n            />\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"chooseContainer\">\r\n      <span className=\"titleTopic\">Students</span>\r\n      <Table\r\n        columns={userColumns}\r\n        dataSource={userList}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StudentList\r\n","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\categoryList.jsx",["331"],"import {\r\n  DeleteOutlined,\r\n  EditOutlined,\r\n  LoadingOutlined,\r\n  PlusCircleOutlined\r\n} from '@ant-design/icons'\r\nimport { Button, Modal, Space, Spin, Table } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { COLOR } from 'ultis/functions'\r\nimport '../dashboard.css'\r\nimport { DeleteCategory, GetAllCategories } from '../redux/actions'\r\nimport AddCategoryModal from './addCategory'\r\nimport { getColumnSearchProps } from './searchInput'\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction CategoryList() {\r\n  const categoryList = useSelector(state => state.Dashboard.categoryList)\r\n  const isLoading = useSelector(state => state.Dashboard.isLoading)\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchColumn] = useState('')\r\n  const refInput = useRef()\r\n  let realList = []\r\n  categoryList.forEach(item => {\r\n    realList.push({\r\n      name: item.name,\r\n      parent: null,\r\n      id: item.id,\r\n      parentId: item.parentId\r\n    })\r\n    item?.subCategory &&\r\n      item?.subCategory.length > 0 &&\r\n      item?.subCategory.forEach(subCat => {\r\n        realList.push({\r\n          name: subCat.name,\r\n          parent: item.name,\r\n          id: subCat.id,\r\n          parentId: subCat.parentId\r\n        })\r\n      })\r\n  })\r\n  const [edit, setEdit] = useState({ isShow: false, category: null })\r\n\r\n  useEffect(() => {\r\n    dispatch(GetAllCategories.get())\r\n  }, [])\r\n\r\n  const onAddNewCategory = () => {\r\n    setEdit({ isShow: true, category: null })\r\n  }\r\n\r\n  const handleEdit = (value, record) => {\r\n    setEdit({ isShow: true, category: record })\r\n  }\r\n\r\n  const handleDelete = record => {\r\n    Modal.confirm({\r\n      title: 'Confirm',\r\n      icon: <DeleteOutlined style={{ color: COLOR.primary1 }} />,\r\n      content: 'Do you confirm to delete this category?',\r\n      okText: 'Confirm',\r\n      cancelText: 'Cancel',\r\n      centered: true,\r\n      okButtonProps: { style: { backgroundColor: COLOR.primary1 } },\r\n      onOk: () => {\r\n        dispatch(DeleteCategory.get(record.id))\r\n        Modal.destroyAll()\r\n      }\r\n    })\r\n  }\r\n\r\n  const categoryColumns = [\r\n    {\r\n      ...getColumnSearchProps(\r\n        'name',\r\n        'Enter title to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Title',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      sorter: (a, b) => a.name.localeCompare(b.name)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'parent',\r\n        'Enter title to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Parent',\r\n      dataIndex: 'parent',\r\n      key: 'parent',\r\n      sorter: (a, b) => a.parent.localeCompare(b.parent)\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <EditOutlined\r\n              style={{ fontSize: 20 }}\r\n              onClick={() => handleEdit(value, record)}\r\n            />\r\n            <DeleteOutlined\r\n              style={{ fontSize: 20, color: '#FF0000' }}\r\n              onClick={() => handleDelete(record)}\r\n            />\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\">Categories</span>\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<PlusCircleOutlined />}\r\n          style={{ width: 200, marginBottom: 32 }}\r\n          onClick={() => onAddNewCategory()}\r\n          size=\"large\"\r\n        >\r\n          Add new category\r\n        </Button>\r\n        <Table columns={categoryColumns} dataSource={realList} />\r\n      </div>\r\n      <AddCategoryModal\r\n        visible={edit.isShow}\r\n        onClose={() => {\r\n          setEdit({ isShow: false, category: null })\r\n        }}\r\n        category={edit.category}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryList\r\n","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\coursesList.jsx",["332"],"import { DeleteOutlined, LoadingOutlined } from '@ant-design/icons'\r\nimport { Modal, Space, Spin, Table } from 'antd'\r\nimport Avatar from 'antd/lib/avatar/avatar'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { COLOR } from 'ultis/functions'\r\nimport '../dashboard.css'\r\nimport { DeleteCourse, GetAllCourses } from '../redux/actions'\r\nimport { getColumnSearchProps } from './searchInput'\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction CoursesList() {\r\n  const courseList = useSelector(state => state.Dashboard.courseList)\r\n  const isLoading = useSelector(state => state.Dashboard.isLoading)\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchColumn] = useState('')\r\n  const refInput = useRef()\r\n\r\n  useEffect(() => {\r\n    dispatch(GetAllCourses.get())\r\n  }, [])\r\n\r\n  const handleDelete = record => {\r\n    Modal.confirm({\r\n      title: 'Confirm',\r\n      icon: <DeleteOutlined style={{ color: COLOR.primary1 }} />,\r\n      content: `Do you confirm to delete ${record.name}?`,\r\n      okText: 'Confirm',\r\n      cancelText: 'Cancel',\r\n      centered: true,\r\n      okButtonProps: { style: { backgroundColor: COLOR.primary1 } },\r\n      onOk: () => {\r\n        dispatch(DeleteCourse.get(record.id))\r\n        Modal.destroyAll()\r\n      }\r\n    })\r\n  }\r\n\r\n  const courseColumns = [\r\n    {\r\n      ...getColumnSearchProps(\r\n        'name',\r\n        'Enter name to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Course',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      sorter: (a, b) => a.name.localeCompare(b.name),\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <Avatar shape=\"square\" size={56} src={record?.thumbnail} />\r\n            <span>{value}</span>\r\n          </Space>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'category',\r\n        'Enter category to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Category',\r\n      dataIndex: 'category',\r\n      key: 'category',\r\n      sorter: (a, b) => a.category.localeCompare(b.category)\r\n    },\r\n    {\r\n      title: 'Total enrollment',\r\n      dataIndex: 'enrollCount',\r\n      key: 'enrollCount',\r\n      sorter: (a, b) => Number(a.enrollCount) > Number(b.enrollCount)\r\n    },\r\n    {\r\n      title: 'Rating',\r\n      dataIndex: 'rating',\r\n      key: 'rating',\r\n      sorter: (a, b) => a.rating > b.rating\r\n    },\r\n    {\r\n      title: 'Price',\r\n      dataIndex: 'price',\r\n      key: 'price',\r\n      sorter: (a, b) => a.price > b.price\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'teacherName',\r\n        'Enter teacher name to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Teacher',\r\n      dataIndex: 'teacherName',\r\n      key: 'teacherName',\r\n      sorter: (a, b) => a.teacherName.localeCompare(b.teacherName),\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <Avatar size={56} src={record?.teacherAvatar} />\r\n            <span>{value}</span>\r\n          </Space>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <DeleteOutlined\r\n              style={{ fontSize: 20, color: '#FF0000' }}\r\n              onClick={() => handleDelete(record)}\r\n            />\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\">Courses</span>\r\n        <Table columns={courseColumns} dataSource={courseList} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CoursesList\r\n","F:\\coursedo.github.io\\src\\pages\\Profile\\components\\changePassTab.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Profile\\components\\profileTab.jsx",["333"],"import { LoadingOutlined, UserOutlined } from '@ant-design/icons'\r\nimport { Avatar, Button, Spin, Typography } from 'antd'\r\nimport CInput from 'components/CInput'\r\nimport { Formik } from 'formik'\r\nimport { UpdateProfile } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { COLOR } from 'ultis/functions'\r\nimport * as yup from 'yup'\r\nimport '../profile.css'\r\nimport AvatarDialog from './avatarDialog'\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nconst validationSchema = yup.object().shape({\r\n  fullName: yup\r\n    .string()\r\n    .trim()\r\n    .required('* Please input password')\r\n    .min(3, 'Full name must include at least 3 characters')\r\n    .max(64, 'Full name must include at most 48 characters')\r\n    .matches(\r\n      /[^a-z0-9A-Z_ÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂưăạảấầẩẫậắằẳẵặẹẻẽềềểỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ]/u,\r\n      {\r\n        message: 'Invalid full name'\r\n      }\r\n    ),\r\n  phoneNumber: yup\r\n    .string()\r\n    .required('* Please input phone number')\r\n    .matches(/((09|03|07|08|05)+([0-9]{8})\\b)/, {\r\n      message: 'Invalid phone number'\r\n    })\r\n})\r\n\r\nfunction ProfileTab({ user }) {\r\n  const [isEdit, setEdit] = useState(false)\r\n  const isLoading = useSelector(state => state.Auth.isLoading)\r\n  const dispatch = useDispatch()\r\n  const inputRef = useRef()\r\n  const [src, setSrc] = useState(null)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (!isLoading) {\r\n      setEdit(false)\r\n    }\r\n  }, [isLoading])\r\n\r\n  const handleUpdateProfile = values => {\r\n    dispatch(UpdateProfile.get({ id: user.id, data: values }))\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleUpdateProfile(values)\r\n    }\r\n  }\r\n\r\n  const readSrc = picture => {\r\n    let reader = new FileReader()\r\n    reader.readAsDataURL(picture)\r\n    reader.onloadend = () => {\r\n      setSrc(reader.result)\r\n    }\r\n  }\r\n\r\n  const onCloseDialog = () => {\r\n    setSrc(null)\r\n  }\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        fullName: user?.fullName || '',\r\n        phoneNumber: user?.phoneNumber || ''\r\n      }}\r\n      isInitialValid={false}\r\n      validationSchema={validationSchema}\r\n      onSubmit={values => handleUpdateProfile(values)}\r\n    >\r\n      {({\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        values,\r\n        isValid,\r\n        errors,\r\n        touched,\r\n        setFieldTouched\r\n      }) => {\r\n        return (\r\n          <div style={{ textAlign: 'center' }}>\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                flex: 1,\r\n                justifyContent: 'space-around',\r\n                alignItems: 'center',\r\n                padding: 48,\r\n                flexDirection: isDesktopOrLaptop ? 'row' : 'column'\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  textAlign: 'center',\r\n                  marginBottom: isDesktopOrLaptop ? 0 : 32\r\n                }}\r\n              >\r\n                <input\r\n                  accept=\"image/*\"\r\n                  style={{ display: 'none' }}\r\n                  ref={inputRef}\r\n                  type=\"file\"\r\n                  onChange={e => readSrc(e.target.files[0])}\r\n                />\r\n                <a onClick={() => inputRef.current.click()}>\r\n                  {isLoading ? (\r\n                    <Spin indicator={loadingIcon} />\r\n                  ) : user?.avatar ? (\r\n                    <Avatar size={150} src={user?.avatar} />\r\n                  ) : (\r\n                    <Avatar size={150} icon={<UserOutlined />} />\r\n                  )}\r\n                </a>\r\n\r\n                <Typography style={{ fontSize: 20, marginTop: 16 }}>\r\n                  {user.fullName}\r\n                </Typography>\r\n              </div>\r\n\r\n              <div style={{ width: isDesktopOrLaptop ? 400 : '100%' }}>\r\n                <CInput\r\n                  className=\"inputBox\"\r\n                  placeholder=\"Full name\"\r\n                  defaultValue={values.fullName}\r\n                  disabled={!isEdit}\r\n                  onChange={handleChange('fullName')}\r\n                  onTouchStart={() => setFieldTouched('fullName')}\r\n                  onBlur={handleBlur('fullName')}\r\n                  onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                  error={errors.fullName}\r\n                />\r\n                <CInput\r\n                  className=\"inputBox\"\r\n                  placeholder=\"Email\"\r\n                  defaultValue={user?.email}\r\n                  disabled={true}\r\n                />\r\n                <CInput\r\n                  className=\"inputBox\"\r\n                  placeholder=\"Phone number\"\r\n                  defaultValue={values.phoneNumber}\r\n                  disabled={!isEdit}\r\n                  onChange={handleChange('phoneNumber')}\r\n                  onTouchStart={() => setFieldTouched('phoneNumber')}\r\n                  onBlur={handleBlur('phoneNumber')}\r\n                  onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                  error={errors.phoneNumber}\r\n                />\r\n              </div>\r\n            </div>\r\n            {isEdit ? (\r\n              <Button\r\n                disabled={!isValid}\r\n                loading={isLoading}\r\n                type=\"primary\"\r\n                onClick={handleSubmit}\r\n              >\r\n                {isLoading ? 'Updating' : 'Update'}\r\n              </Button>\r\n            ) : (\r\n              <Button type=\"primary\" onClick={() => setEdit(true)}>\r\n                {'Edit'}\r\n              </Button>\r\n            )}\r\n            <AvatarDialog\r\n              open={src != null}\r\n              value={src}\r\n              onClose={onCloseDialog}\r\n            />\r\n          </div>\r\n        )\r\n      }}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default ProfileTab\r\n","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\searchInput.js",[],"F:\\coursedo.github.io\\src\\components\\Header\\index.jsx",["334","335"],"import { MenuOutlined, UserOutlined } from '@ant-design/icons'\r\nimport {\r\n  Anchor,\r\n  Avatar,\r\n  Button,\r\n  Drawer,\r\n  Dropdown,\r\n  Input,\r\n  Menu,\r\n  Popover\r\n} from 'antd'\r\nimport { Categories } from 'components/Categories'\r\nimport { UpdateSearch } from 'pages/Courses/redux/actions'\r\nimport { SignOut } from 'pages/SignIn/redux/actions'\r\nimport React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { ROLES } from 'ultis/functions'\r\n\r\nconst { Search } = Input\r\nconst { Link } = Anchor\r\n\r\nconst { SubMenu } = Menu\r\n\r\nfunction AppHeader(props) {\r\n  const [visible, setVisible] = useState(false)\r\n  const history = useHistory()\r\n  const user = useSelector(state => state.Auth.user)\r\n  const categoryList = useSelector(state => state.Dashboard.categoryList)\r\n  const dispatch = useDispatch()\r\n\r\n  const showDrawer = () => {\r\n    console.info('show')\r\n    setVisible(true)\r\n  }\r\n\r\n  const onClose = () => {\r\n    setVisible(false)\r\n  }\r\n\r\n  const studentPopover = (\r\n    <Menu style={{ width: 200 }}>\r\n      <Menu.Item\r\n        key={'profile'}\r\n        onClick={() => {\r\n          history.push(`/profile`)\r\n        }}\r\n      >\r\n        Profile\r\n      </Menu.Item>\r\n      <Menu.Item\r\n        key={'course'}\r\n        onClick={() => {\r\n          history.push(`/my-courses`)\r\n        }}\r\n      >\r\n        My courses\r\n      </Menu.Item>\r\n      <Menu.Item\r\n        key={'logout'}\r\n        onClick={() => {\r\n          dispatch(SignOut.get())\r\n        }}\r\n      >\r\n        Log Out\r\n      </Menu.Item>\r\n    </Menu>\r\n  )\r\n\r\n  const teacherPopover = (\r\n    <Menu style={{ width: 200 }}>\r\n      <Menu.Item\r\n        key={'profile'}\r\n        onClick={() => {\r\n          history.push(`/profile`)\r\n        }}\r\n      >\r\n        Profile\r\n      </Menu.Item>\r\n      <Menu.Item\r\n        key={'logout'}\r\n        onClick={() => {\r\n          dispatch(SignOut.get())\r\n        }}\r\n      >\r\n        Log Out\r\n      </Menu.Item>\r\n    </Menu>\r\n  )\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"header\">\r\n        <div style={{ display: 'flex' }}>\r\n          <div id=\"logo\">\r\n            <span\r\n              id=\"logoText\"\r\n              onClick={() =>\r\n                history.push({\r\n                  pathname: '/',\r\n                  state: { from: `/` }\r\n                })\r\n              }\r\n            >\r\n              coursedo\r\n            </span>\r\n          </div>\r\n          <div>\r\n            {user?.role !== 1 ? (\r\n              <Dropdown\r\n                overlay={Categories(categoryList)}\r\n                style={{ marginBottom: 30 }}\r\n              >\r\n                <a id=\"categoriesTxt\" className=\"ant-dropdown-link\" href=\"#\">\r\n                  Categories\r\n                </a>\r\n              </Dropdown>\r\n            ) : (\r\n              <div />\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"mobileHidden\">\r\n          {!(props?.from === 'addCourse') && user?.role === ROLES.TEACHER && (\r\n            <Button\r\n              type=\"primary\"\r\n              style={{ borderRadius: 50, marginRight: 24 }}\r\n              onClick={() => history.push('/create')}\r\n            >\r\n              Add new course\r\n            </Button>\r\n          )}\r\n          {user?.role !== 1 ? (\r\n            <div>\r\n              <Search\r\n                style={{ width: '30vw' }}\r\n                placeholder=\"Search for Courses i.e web-development\"\r\n                enterButton=\"Search\"\r\n                size=\"large\"\r\n                onSearch={value => {\r\n                  const keyword = value.trim()\r\n                  if (/\\S+/.test(keyword)) {\r\n                    dispatch(UpdateSearch.get())\r\n                    history.push({\r\n                      pathname: `/courses`,\r\n                      search: `keyword=${keyword}`,\r\n                      state: { from: `/` }\r\n                    })\r\n                  }\r\n                }}\r\n              />\r\n              <Button\r\n                shape=\"round\"\r\n                style={{ borderWidth: 0 }}\r\n                id=\"btnTxt\"\r\n                onClick={() =>\r\n                  history.push({\r\n                    pathname: '/courses',\r\n                    state: { from: `/` }\r\n                  })\r\n                }\r\n              >\r\n                Courses\r\n              </Button>\r\n              <Button\r\n                shape=\"round\"\r\n                style={{ borderWidth: 0, marginRight: 30 }}\r\n                id=\"btnTxt\"\r\n                onClick={() =>\r\n                  history.push({\r\n                    pathname: '/about',\r\n                    state: { from: `/` }\r\n                  })\r\n                }\r\n              >\r\n                About\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <div />\r\n          )}\r\n\r\n          {user ? (\r\n            user?.avatar ? (\r\n              <Popover\r\n                placement=\"bottomRight\"\r\n                content={\r\n                  user?.role === ROLES.TEACHER ? teacherPopover : studentPopover\r\n                }\r\n                trigger=\"click\"\r\n              >\r\n                <Avatar size={48} src={user?.avatar} />\r\n              </Popover>\r\n            ) : (\r\n              <Popover\r\n                placement=\"bottomRight\"\r\n                content={\r\n                  user?.role === ROLES.TEACHER ? teacherPopover : studentPopover\r\n                }\r\n                trigger=\"click\"\r\n              >\r\n                <Avatar size={48} icon={<UserOutlined />} />\r\n              </Popover>\r\n            )\r\n          ) : (\r\n            <Button\r\n              type=\"primary\"\r\n              style={{ borderRadius: 50 }}\r\n              onClick={() =>\r\n                history.push({\r\n                  pathname: '/signin',\r\n                  state: { from: `/` }\r\n                })\r\n              }\r\n            >\r\n              Sign in\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div className=\"mobileVisible\">\r\n          <Button type=\"primary\" onClick={showDrawer}>\r\n            <MenuOutlined />\r\n          </Button>\r\n          <Drawer\r\n            placement=\"right\"\r\n            closable={false}\r\n            onClose={onClose}\r\n            visible={visible}\r\n          >\r\n            <Anchor targetOffset=\"65\">\r\n              {user?.role !== 1 ? (\r\n                <Search\r\n                  allowClear\r\n                  placeholder=\"Search for Courses i.e web-development\"\r\n                  onSearch={value => props.onSearch(value)}\r\n                  enterButton={'Search'}\r\n                />\r\n              ) : (\r\n                <div />\r\n              )}\r\n              {user ? (\r\n                <Popover\r\n                  placement=\"bottomRight\"\r\n                  content={\r\n                    user?.role === ROLES.TEACHER\r\n                      ? teacherPopover\r\n                      : studentPopover\r\n                  }\r\n                  trigger=\"click\"\r\n                >\r\n                  <p\r\n                    className=\"ant-anchor-link\"\r\n                    style={{\r\n                      fontFamily: 'Source Sans Pro',\r\n                      fontWeight: 'bold',\r\n                      paddingTop: 10\r\n                    }}\r\n                  >\r\n                    {user.fullName}\r\n                  </p>\r\n                </Popover>\r\n              ) : (\r\n                <div />\r\n              )}\r\n              {user?.role !== 1 ? (\r\n                <div>\r\n                  <Link href=\"#courses\" title=\"Courses\" />\r\n                  <Link href=\"#about\" title=\"About\" />\r\n                </div>\r\n              ) : (\r\n                <div />\r\n              )}\r\n              {!(props?.from === 'addCourse') &&\r\n                user?.role === ROLES.TEACHER && (\r\n                  <Link href=\"#create\" title=\"Add new course\" />\r\n                )}\r\n              {!user ? (\r\n                <div\r\n                  style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center'\r\n                  }}\r\n                >\r\n                  <Button\r\n                    type=\"primary\"\r\n                    style={{ borderRadius: 50, width: '80%', marginBlock: 10 }}\r\n                    onClick={() =>\r\n                      history.push({\r\n                        pathname: '/signin',\r\n                        state: { from: `/` }\r\n                      })\r\n                    }\r\n                  >\r\n                    Sign in\r\n                  </Button>\r\n                </div>\r\n              ) : (\r\n                <div />\r\n              )}\r\n            </Anchor>\r\n          </Drawer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AppHeader\r\n","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\coursesTab.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\profileTab.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\addCategory.jsx",[],"F:\\coursedo.github.io\\src\\components\\Footer\\index.jsx",["336"],"import React from 'react'\r\nimport logo from 'assets/logo.png'\r\nimport { Layout } from 'antd'\r\nconst { Footer } = Layout\r\n\r\nfunction FooterComponent() {\r\n  return (\r\n    <Footer style={{ backgroundColor: '#212121', textAlign: 'center' }}>\r\n      <img\r\n        src={logo}\r\n        width=\"100\"\r\n        height=\"100\"\r\n        style={{ objectFit: 'contain' }}\r\n      />\r\n      <p>All Right Reserved | COURSEDO 2021</p>\r\n    </Footer>\r\n  )\r\n}\r\n\r\nexport default FooterComponent\r\n","F:\\coursedo.github.io\\src\\pages\\Profile\\components\\avatarDialog.jsx",[],"F:\\coursedo.github.io\\src\\components\\CourseCard\\index.jsx",[],"F:\\coursedo.github.io\\src\\components\\CateCard\\index.jsx",[],"F:\\coursedo.github.io\\src\\core\\reducer.js",[],"F:\\coursedo.github.io\\src\\core\\epic.js",[],"F:\\coursedo.github.io\\src\\components\\Categories\\index.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Home\\redux\\epics.js",[],"F:\\coursedo.github.io\\src\\pages\\CreateCourse\\redux\\reducer.js",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\redux\\reducer.js",[],"F:\\coursedo.github.io\\src\\pages\\SignIn\\redux\\reducer.js",[],"F:\\coursedo.github.io\\src\\pages\\SignIn\\redux\\epics.js",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\redux\\epics.js",[],"F:\\coursedo.github.io\\src\\pages\\CreateCourse\\redux\\epics.js",["337"],"import GlobalModal from 'components/GlobalModal'\r\nimport { DeleteCategoryFailed } from 'pages/Dashboard/redux/actions'\r\nimport EditCourse from 'pages/EditCourse'\r\nimport { combineEpics, ofType } from 'redux-observable'\r\nimport { catchError, exhaustMap, map } from 'rxjs/operators'\r\nimport { request } from 'ultis/api'\r\nimport { history, MODAL_TYPE } from 'ultis/functions'\r\nimport {\r\n  AddCourse,\r\n  AddCourseFailed,\r\n  AddCourseSuccess,\r\n  DeleteChapter,\r\n  DeleteChapterSuccess,\r\n  GetCourseDetail,\r\n  GetCourseDetailFailed,\r\n  GetCourseDetailSuccess,\r\n  UpdateCourse,\r\n  UpdateCourseFailed,\r\n  UpdateCourseSuccess\r\n} from './actions'\r\n\r\nconst addCourseEpic$ = action$ =>\r\n  action$.pipe(\r\n    ofType(AddCourse.type),\r\n    exhaustMap(action => {\r\n      return request({\r\n        method: 'POST',\r\n        url: 'course',\r\n        param: action.payload\r\n      }).pipe(\r\n        map(result => {\r\n          if (result.status === 201) {\r\n            GlobalModal.alertMessage(\r\n              'Information',\r\n              'Succeed creating course. Go back to home',\r\n              MODAL_TYPE.NORMAL,\r\n              () => history.replace('/')\r\n            )\r\n            return AddCourseSuccess.get(result.data)\r\n          }\r\n          GlobalModal.alertMessage('Information', result.data?.message)\r\n          return AddCourseFailed.get(result)\r\n        }),\r\n        catchError(error => {\r\n          return AddCourseFailed.get(error)\r\n        })\r\n      )\r\n    })\r\n  )\r\n\r\nconst editCourseEpic$ = action$ =>\r\n  action$.pipe(\r\n    ofType(UpdateCourse.type),\r\n    exhaustMap(action => {\r\n      return request({\r\n        method: 'PATCH',\r\n        url: `course/${action.payload.id}`,\r\n        param: action.payload.data\r\n      }).pipe(\r\n        map(result => {\r\n          if (result.status === 200) {\r\n            GlobalModal.alertMessage(\r\n              'Information',\r\n              'Succeed editing course. Go back.',\r\n              MODAL_TYPE.NORMAL,\r\n              () => history.replace(`/course/${action.payload.id}`)\r\n            )\r\n            return UpdateCourseSuccess.get(result.data)\r\n          }\r\n          GlobalModal.alertMessage('Information', result.data?.message)\r\n          return UpdateCourseFailed.get(result)\r\n        }),\r\n        catchError(error => {\r\n          return UpdateCourseFailed.get(error)\r\n        })\r\n      )\r\n    })\r\n  )\r\n\r\nconst getCourseEpic$ = action$ =>\r\n  action$.pipe(\r\n    ofType(GetCourseDetail.type),\r\n    exhaustMap(action => {\r\n      return request({\r\n        method: 'GET',\r\n        url: `course/${action.payload}`\r\n      }).pipe(\r\n        map(result => {\r\n          if (result.status === 200) {\r\n            return GetCourseDetailSuccess.get(result.data)\r\n          }\r\n          return GetCourseDetailFailed.get(result)\r\n        }),\r\n        catchError(error => {\r\n          return GetCourseDetailFailed.get(error)\r\n        })\r\n      )\r\n    })\r\n  )\r\n\r\nconst deleteChapterEpic$ = action$ =>\r\n  action$.pipe(\r\n    ofType(DeleteChapter.type),\r\n    exhaustMap(action => {\r\n      return request({\r\n        method: 'DELETE',\r\n        url: `course/${action.payload.courseId}/chapter/${action.payload.chapterId}`\r\n      }).pipe(\r\n        map(result => {\r\n          if (result.status === 204) {\r\n            return DeleteChapterSuccess.get(result.data)\r\n          }\r\n          return DeleteCategoryFailed.get(result)\r\n        }),\r\n        catchError(error => {\r\n          return DeleteCategoryFailed.get(error)\r\n        })\r\n      )\r\n    })\r\n  )\r\n\r\nexport const courseEpics = combineEpics(\r\n  addCourseEpic$,\r\n  getCourseEpic$,\r\n  editCourseEpic$,\r\n  deleteChapterEpic$\r\n)\r\n","F:\\coursedo.github.io\\src\\pages\\Home\\redux\\reducer.js",[],"F:\\coursedo.github.io\\src\\ultis\\api.js",[],"F:\\coursedo.github.io\\src\\pages\\Courses\\redux\\epics.js",["338"],"import GlobalModal from 'components/GlobalModal'\r\n// @ts-ignore\r\nimport { store } from 'core/store'\r\nimport { combineEpics, ofType } from 'redux-observable'\r\nimport { catchError, exhaustMap, map } from 'rxjs/operators'\r\nimport { request } from 'ultis/api'\r\nimport {\r\n  GetCoursesCate,\r\n  GetCoursesCateFailed,\r\n  GetCoursesCateSuccess,\r\n  GetCoursesFilter,\r\n  GetCoursesFilterFailed,\r\n  GetCoursesFilterSuccess\r\n} from './actions'\r\n\r\nconst getCourseFilterEpic$ = action$ =>\r\n  action$.pipe(\r\n    ofType(GetCoursesFilter.type),\r\n    exhaustMap(action => {\r\n      return request({\r\n        method: 'GET',\r\n        url: `course`,\r\n        param: action.payload\r\n      }).pipe(\r\n        map(result => {\r\n          if (result.status === 200) {\r\n            return GetCoursesFilterSuccess.get({\r\n              ...result.data,\r\n              page: action.payload.page || null,\r\n              sort: action.payload?.sort || null,\r\n              sortOrder: action.payload?.sortOrder || null,\r\n            })\r\n          }\r\n          GlobalModal.alertMessage('Information', result.data?.message)\r\n          return GetCoursesFilterFailed.get(result)\r\n        }),\r\n        // @ts-ignore\r\n        catchError(error => {\r\n          return GetCoursesFilterFailed.get(error)\r\n        })\r\n      )\r\n    })\r\n  )\r\nconst getCourseCateEpic$ = action$ =>\r\n  action$.pipe(\r\n    ofType(GetCoursesCate.type),\r\n    exhaustMap(action => {\r\n      return request({\r\n        method: 'GET',\r\n        url: `course`,\r\n        param: action.payload\r\n      }).pipe(\r\n        map(result => {\r\n          if (result.status === 200) {\r\n            return GetCoursesCateSuccess.get({\r\n              ...result.data,\r\n              page: action.payload.page || null,\r\n              sort: action.payload?.sort || null,\r\n              sortOrder: action.payload?.sortOrder || null,\r\n            })\r\n          }\r\n          GlobalModal.alertMessage('Information', result.data?.message)\r\n          return GetCoursesCateFailed.get(result)\r\n        }),\r\n        // @ts-ignore\r\n        catchError((error) => {\r\n          return GetCoursesCateFailed.get(error)\r\n        })\r\n      )\r\n    })\r\n  )\r\n\r\nexport const coursesEpics = combineEpics(\r\n  getCourseFilterEpic$,\r\n  getCourseCateEpic$\r\n)\r\n","F:\\coursedo.github.io\\src\\pages\\Courses\\redux\\actions.js",[],"F:\\coursedo.github.io\\src\\pages\\Courses\\redux\\reducer.js",[],"F:\\coursedo.github.io\\src\\pages\\Courses\\Category\\index.jsx",["339","340","341"],"import { Button, Col, Menu, Pagination, Row, Select } from 'antd'\r\nimport bgPic from 'assets/images/bg.png'\r\nimport CourseCard from 'components/CourseCard'\r\nimport Footer from 'components/Footer'\r\nimport Header from 'components/Header'\r\nimport 'components/Header/header.css'\r\nimport 'pages/Home/home.css'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { history } from 'ultis/functions'\r\nimport { GetCoursesCate, UpdateCurCate } from '../redux/actions'\r\nimport queryString from 'query-string'\r\nconst { Option } = Select\r\nconst { SubMenu } = Menu\r\n\r\nfunction CateCourses(props) {\r\n  const dispatch = useDispatch()\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n  const { courseList, page, sort, sortOrder, total, curCate } = useSelector(\r\n    state => state.CourseList\r\n  )\r\n  const { categoryList } = useSelector(state => state.Dashboard)\r\n  const user = useSelector(state => state.Auth.user)\r\n  const value = queryString.parse(props.location.search)\r\n  const id = props.match.params.id\r\n\r\n  useEffect(() => {\r\n    const val = {\r\n      category: id,\r\n      page: page,\r\n      limit: 6\r\n    }\r\n    dispatch(GetCoursesCate.get(val))\r\n    return () => {}\r\n  }, [id, page])\r\n\r\n  const background = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          flex: 1,\r\n          backgroundColor: 'white'\r\n        }}\r\n      >\r\n        {isDesktopOrLaptop && (\r\n          <div id=\"landing\" style={{ backgroundImage: `url(${bgPic})` }}>\r\n            <span id=\"welcomeTxt\">\r\n              Browse Thousands of Our Video Tutorials Curated Only for you.\r\n            </span>\r\n            {user ? (\r\n              <div />\r\n            ) : (\r\n              <Button\r\n                style={{\r\n                  marginTop: '1vw',\r\n                  backgroundColor: 'white',\r\n                  color: '#FFC000'\r\n                }}\r\n                type=\"primary\"\r\n                onClick={() => history.push('/signup')}\r\n              >\r\n                Join for Free\r\n              </Button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderCourses = () => {\r\n    return (\r\n      <Row gutter={16}>\r\n        {courseList.length > 0 ? (\r\n          courseList.map(item => {\r\n            return (\r\n              <Col span={8} xs={24} sm={12} md={8} style={{ marginBlock: 30 }}>\r\n                <CourseCard\r\n                  id={item.id}\r\n                  img={item.thumbnail}\r\n                  title={item.name}\r\n                  teacher={item.teacherName}\r\n                  cate={item.category}\r\n                  price={item.price}\r\n                  rating={item.rating}\r\n                  total={item.ratingCount}\r\n                />\r\n              </Col>\r\n            )\r\n          })\r\n        ) : (\r\n          <div />\r\n        )}\r\n      </Row>\r\n    )\r\n  }\r\n\r\n  const handleChange = value => {\r\n    let val = null\r\n    if (value === '1') {\r\n      val = {\r\n        category: id,\r\n        page: 1,\r\n        limit: 6\r\n      }\r\n    } else if (value === '2') {\r\n      val = {\r\n        category: id,\r\n        page: 1,\r\n        limit: 6,\r\n        sort: 'rating'\r\n      }\r\n    } else if (value === '3') {\r\n      val = {\r\n        category: id,\r\n        page: 1,\r\n        limit: 6,\r\n        sort: 'price',\r\n        sortOrder: 'asc'\r\n      }\r\n    } else if (value === '4') {\r\n      val = {\r\n        category: id,\r\n        page: 1,\r\n        limit: 6,\r\n        sort: 'price',\r\n        sortOrder: 'desc'\r\n      }\r\n    }\r\n    dispatch(GetCoursesCate.get(val))\r\n  }\r\n\r\n  const updatePage = num => {\r\n    const val = {\r\n      category: id,\r\n      page: num,\r\n      limit: 6,\r\n      sort: sort,\r\n      sortOrder: sortOrder\r\n    }\r\n    dispatch(GetCoursesCate.get(val))\r\n  }\r\n\r\n  const renderHeader = () => {\r\n    return (\r\n      <Row\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'row',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          flex: 1,\r\n          marginTop: 50\r\n        }}\r\n      >\r\n        <Col>\r\n          <p id=\"catTitle\">{curCate}</p>\r\n        </Col>\r\n\r\n        <Col>\r\n          <Select\r\n            defaultValue=\"Sort By\"\r\n            style={{ width: 120 }}\r\n            onChange={handleChange}\r\n          >\r\n            <Option value=\"1\">Sort</Option>\r\n            <Option value=\"2\">Rating</Option>\r\n            <Option value=\"3\">Price Increase</Option>\r\n            <Option value=\"4\">Price Decrease</Option>\r\n          </Select>\r\n        </Col>\r\n      </Row>\r\n    )\r\n  }\r\n\r\n  const renderListCat = () => {\r\n    return (\r\n      <Menu style={{ width: 256 }} mode=\"inline\">\r\n        {categoryList?.length > 0 ? (\r\n          categoryList.map((item, index) => {\r\n            return (\r\n              <SubMenu\r\n                key={'sub' + index.toString()}\r\n                title={item.name}\r\n                onTitleClick={() => {\r\n                  dispatch(UpdateCurCate.get(item?.name))\r\n                  history.push(`/categories/${item.id}`)\r\n                }}\r\n              >\r\n                {item.subCategory?.length > 0 ? (\r\n                  item.subCategory.map(sub => {\r\n                    return (\r\n                      <Menu.Item\r\n                        key={sub.id.toString()}\r\n                        onClick={() => {\r\n                          dispatch(UpdateCurCate.get(sub?.name))\r\n                          history.push(`/categories/${sub.id}`)\r\n                        }}\r\n                      >\r\n                        {sub.name}\r\n                      </Menu.Item>\r\n                    )\r\n                  })\r\n                ) : (\r\n                  <div />\r\n                )}\r\n              </SubMenu>\r\n            )\r\n          })\r\n        ) : (\r\n          <div />\r\n        )}\r\n      </Menu>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Header />\r\n      {background()}\r\n      <div className=\"container-fluid\">\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flex: 1,\r\n              flexDirection: 'column'\r\n            }}\r\n          >\r\n            {renderHeader()}\r\n            {renderCourses()}\r\n            <div\r\n              style={{\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                display: 'flex',\r\n                flex: 1,\r\n                marginBlock: 60\r\n              }}\r\n            >\r\n              <Pagination\r\n                current={page}\r\n                onChange={num => updatePage(num)}\r\n                total={total}\r\n                pageSize={6}\r\n              />\r\n            </div>\r\n          </div>\r\n          {isDesktopOrLaptop && (\r\n            <div style={{ marginTop: 50 }}>{renderListCat()}</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CateCourses\r\n","F:\\coursedo.github.io\\src\\pages\\DetailCourse\\redux\\epics.js",[],"F:\\coursedo.github.io\\src\\pages\\DetailCourse\\redux\\actions.js",[],"F:\\coursedo.github.io\\src\\pages\\DetailCourse\\redux\\reducer.js",[],"F:\\coursedo.github.io\\src\\pages\\DetailCourse\\index.jsx",["342","343","344","345","346","347","348","349"],"import {\r\n  Breadcrumb,\r\n  Button,\r\n  Col,\r\n  Menu,\r\n  Pagination,\r\n  Rate,\r\n  Row,\r\n  Select\r\n} from 'antd'\r\nimport bgPic from 'assets/images/bg.png'\r\nimport CourseCard from 'components/CourseCard'\r\nimport Footer from 'components/Footer'\r\nimport Header from 'components/Header'\r\nimport 'components/Header/header.css'\r\nimport 'pages/Home/home.css'\r\nimport './styles.css'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport {\r\n  AddToWatchList,\r\n  CleanCourse,\r\n  EnrollCourse,\r\n  GetCourseDetail\r\n} from './redux/actions'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { UpdateCurCate } from 'pages/Courses/redux/actions'\r\nimport { ROLES } from 'ultis/functions'\r\nimport { Tabs } from 'antd'\r\nimport IntroduceTab from './components/introduceTab'\r\nimport moment from 'moment'\r\nimport SyllabusTab from './components/syllabusTab'\r\nimport SwipeList from 'pages/Home/components/swipeComponent'\r\nimport FeedbackTab from './components/feedbackTab'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nfunction DetailCourse(props) {\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n  const user = useSelector(state => state.Auth.user)\r\n  const id = props.match.params.id\r\n  const course = useSelector(state => state.DetailCourse.course)\r\n\r\n  useEffect(() => {\r\n    dispatch(GetCourseDetail.get(id))\r\n    return () => {\r\n      dispatch(CleanCourse.get())\r\n    }\r\n  }, [dispatch, id])\r\n\r\n  const background = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'block',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          backgroundColor: 'white'\r\n        }}\r\n      >\r\n        {isDesktopOrLaptop ? (\r\n          <div\r\n            className=\"courseBg\"\r\n            style={{\r\n              backgroundImage: `url(${\r\n                course?.thumbnail\r\n                  ? course?.thumbnail\r\n                  : 'https://source.unsplash.com/random'\r\n              })`,\r\n              width: '100vw',\r\n              height: '50vh'\r\n            }}\r\n          >\r\n            <div className=\"overBg\">{renderHeaderContent()}</div>\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className=\"courseBgPhone\"\r\n            style={{\r\n              backgroundImage: `url(${\r\n                course?.thumbnail\r\n                  ? course?.thumbnail\r\n                  : 'https://source.unsplash.com/random'\r\n              })`,\r\n              width: '100vw',\r\n              height: 'auto'\r\n            }}\r\n          >\r\n            <div className=\"overBg\">{renderHeaderContent()}</div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderHeaderContent = () => {\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"container-fluid\">\r\n          <Row>\r\n            <Col span={12}>\r\n              <Breadcrumb>\r\n                <Breadcrumb.Item>\r\n                  <a\r\n                    id=\"courseTeacher\"\r\n                    onClick={() => {\r\n                      dispatch(UpdateCurCate.get(course?.category))\r\n                      history.push(`/categories/${course?.categoryId}`)\r\n                    }}\r\n                  >\r\n                    {course?.category}\r\n                  </a>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item>\r\n                  <a id=\"courseTeacher\">{course?.name}</a>\r\n                </Breadcrumb.Item>\r\n              </Breadcrumb>\r\n              <p id=\"courseHeader\">{course?.name}</p>\r\n              <p id=\"courseTeacher\">{course?.teacherName}</p>\r\n              <Row>\r\n                <Rate\r\n                  className=\"courseTeacher\"\r\n                  disabled\r\n                  defaultValue={course?.rating}\r\n                />\r\n                <p id=\"courseTeacher\">({course?.ratingCount})</p>\r\n              </Row>\r\n              <Row style={{ display: 'flex', alignItems: 'center' }}>\r\n                {course?.promotionPrice !== null &&\r\n                  course?.promotionPrice >= 0 &&\r\n                  course?.promotionPrice < course?.price && (\r\n                    <p id=\"promotionPrice\">$ {course?.price}</p>\r\n                  )}\r\n\r\n                <p\r\n                  id=\"courseTeacher\"\r\n                  style={{ fontSize: 24, fontWeight: 'bold' }}\r\n                >\r\n                  {course?.price === 0 || course?.promotionPrice === 0\r\n                    ? 'FREE'\r\n                    : course?.promotionPrice > 0\r\n                    ? '$' + course?.promotionPrice\r\n                    : '$' + course?.price}\r\n                </p>\r\n              </Row>\r\n              <Row>\r\n                <p id=\"courseTeacher\">{course?.enrollCount} already enrolled</p>\r\n              </Row>\r\n              {user ? (\r\n                user?.role === ROLES.STUDENT ? (\r\n                  course?.isEnrolled === false ? (\r\n                    <Row>\r\n                      <Button\r\n                        style={{\r\n                          backgroundColor: '#FFC000',\r\n                          color: 'white',\r\n                          height: 60,\r\n                          width: 200,\r\n                          fontSize: 20,\r\n                          marginRight: 20\r\n                        }}\r\n                        type=\"primary\"\r\n                        onClick={() => {\r\n                          const value = {\r\n                            id: course?.id,\r\n                            data: {\r\n                              paidStatus: true,\r\n                              total:\r\n                                course?.promotionPrice &&\r\n                                course?.promotionPrice > 0\r\n                                  ? course?.promotionPrice\r\n                                  : course?.price\r\n                            }\r\n                          }\r\n                          dispatch(EnrollCourse.get(value))\r\n                        }}\r\n                      >\r\n                        Buy now\r\n                      </Button>\r\n                      <Button\r\n                        style={{\r\n                          backgroundColor: 'white',\r\n                          color: '#FFC000',\r\n                          height: 60,\r\n                          width: 200,\r\n                          fontSize: 20\r\n                        }}\r\n                        type=\"primary\"\r\n                        onClick={() => {\r\n                          const value = {\r\n                            id: user.id,\r\n                            courseId: course.id\r\n                          }\r\n                          dispatch(AddToWatchList.get(value))\r\n                        }}\r\n                      >\r\n                        Add to watchlist\r\n                      </Button>\r\n                    </Row>\r\n                  ) : (\r\n                    <Button\r\n                      style={{\r\n                        backgroundColor: 'white',\r\n                        color: '#FFC000',\r\n                        height: 60,\r\n                        width: 200,\r\n                        fontSize: 20\r\n                      }}\r\n                      type=\"primary\"\r\n                      onClick={() => {\r\n                        const value = {\r\n                          id: user.id,\r\n                          courseId: course?.id\r\n                        }\r\n                        dispatch(AddToWatchList.get(value))\r\n                      }}\r\n                    >\r\n                      Add to watchlist\r\n                    </Button>\r\n                  )\r\n                ) : (\r\n                  <div />\r\n                )\r\n              ) : (\r\n                <Button\r\n                  style={{\r\n                    marginTop: '1vw',\r\n                    backgroundColor: '#FFC000',\r\n                    color: 'white',\r\n                    height: 60,\r\n                    width: 200,\r\n                    fontSize: 20\r\n                  }}\r\n                  type=\"primary\"\r\n                  onClick={() => history.push('/signup')}\r\n                >\r\n                  Buy now\r\n                </Button>\r\n              )}\r\n              <p id=\"courseTeacher\">\r\n                Last update: {moment(course?.updatedAt).format('llll')}\r\n              </p>\r\n            </Col>\r\n            <Col\r\n              span={12}\r\n              style={{\r\n                display: 'flex',\r\n                alignItems: 'center'\r\n              }}\r\n            >\r\n              <p id=\"courseTeacher\">{course?.shortDescription}</p>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Header />\r\n      {background()}\r\n      <div className=\"container-fluid\">\r\n        <Tabs size=\"large\" defaultActiveKey=\"1\" centered>\r\n          <TabPane tab=\"Information\" key=\"1\">\r\n            <IntroduceTab\r\n              description={course?.description}\r\n              teacherName={course?.teacherName}\r\n              teacherEmail={course?.teacherEmail}\r\n              teacherAvatar={course?.teacherAvatar}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"Syllabus\" key=\"2\">\r\n            <SyllabusTab\r\n              chapters={course?.chapters}\r\n              poster={course?.thumbnail}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"Ratings & Reviews\" key=\"3\">\r\n            <FeedbackTab\r\n              id={course?.id}\r\n              rating={course?.rating}\r\n              ratingCount={course?.ratingCount}\r\n              allows={course?.isEnrolled}\r\n            />\r\n          </TabPane>\r\n        </Tabs>\r\n        <div id=\"swipe\" style={{ paddingBottom: 50 }}>\r\n          <p id=\"introHeader\" style={{ color: '#FF8A00' }}>\r\n            Similar courses\r\n          </p>\r\n          <SwipeList list={course?.relatedCourses} type={'courses'} />\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DetailCourse\r\n","F:\\coursedo.github.io\\src\\pages\\DetailCourse\\components\\introduceTab.jsx",["350"],"import { UserOutlined } from '@ant-design/icons'\r\nimport { Avatar, Col, Row } from 'antd'\r\nimport React from 'react'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport { useDispatch } from 'react-redux'\r\nimport '../styles.css'\r\n\r\nfunction IntroduceTab({\r\n  teacherAvatar,\r\n  teacherName,\r\n  teacherEmail,\r\n  description\r\n}) {\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <div>\r\n      <p id=\"introHeader\" style={{ color: '#FF8A00' }}>\r\n        Instructor\r\n      </p>\r\n      <div>\r\n        <Row>\r\n          {teacherAvatar !== null ? (\r\n            <Avatar size={68} src={teacherAvatar} />\r\n          ) : (\r\n            <Avatar size={68} icon={<UserOutlined />} />\r\n          )}\r\n          <Col style={{ marginLeft: 20 }}>\r\n            <p id=\"introTxt\">{teacherName}</p>\r\n            <a href={'mailto:' + teacherEmail} id=\"desTxt\">\r\n              {teacherEmail}\r\n            </a>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n      <p id=\"introHeader\" style={{ color: '#FF8A00' }}>\r\n        Description\r\n      </p>\r\n      <div>{ReactHtmlParser(description)}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default IntroduceTab\r\n","F:\\coursedo.github.io\\src\\pages\\DetailCourse\\components\\syllabusTab.jsx",["351"],"import { Button, Col, Empty, Menu, Row } from 'antd'\r\nimport React, { useState } from 'react'\r\nimport ReactPlayer from 'react-player'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { SaveProgress, UpdateCurChapter } from '../redux/actions'\r\nimport '../styles.css'\r\n\r\nconst { SubMenu } = Menu\r\n\r\nfunction SyllabusTab({ chapters, poster }) {\r\n  const dispatch = useDispatch()\r\n  const chapter = useSelector(state => state.DetailCourse.chapter)\r\n  const course = useSelector(state => state.DetailCourse.course)\r\n  const [progress, setProgress] = useState(0)\r\n\r\n  const renderChapter = () => {\r\n    return (\r\n      <Menu style={{ width: 256 }} mode=\"inline\">\r\n        {chapters?.length > 0 ? (\r\n          chapters.map(sub => {\r\n            return (\r\n              <Menu.Item\r\n                key={sub.id.toString()}\r\n                onClick={() => {\r\n                  dispatch(UpdateCurChapter.get(sub))\r\n                }}\r\n              >\r\n                Chapter {sub.numberId}: {sub.name}\r\n                <br />\r\n                {sub.description}\r\n              </Menu.Item>\r\n            )\r\n          })\r\n        ) : (\r\n          <div />\r\n        )}\r\n      </Menu>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div style={{ width: '100vw' }}>\r\n      <Row>\r\n        <Col span={6} xs={24} sm={12} md={6}>\r\n          {renderChapter()}\r\n        </Col>\r\n        <Col span={18} xs={24} sm={18}>\r\n          {chapter !== null ? (\r\n            <div>\r\n              <p id=\"introTxt\">\r\n                Chapter {chapter?.numberId}: {chapter?.name}\r\n              </p>\r\n              <p id=\"desTxt\">Description: {chapter?.description}</p>\r\n            </div>\r\n          ) : (\r\n            <div />\r\n          )}\r\n          {chapter?.video !== null ? (\r\n            <div>\r\n              <ReactPlayer\r\n                url={chapter?.video}\r\n                onProgress={({ playedSeconds }) => setProgress(playedSeconds)}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n      {chapter !== null && chapter?.video !== null && course?.isEnrolled ? (\r\n        <Row style={{ marginTop: 50 }}>\r\n          <Col span={8} />\r\n          <Col span={8} xs={24} sm={12} md={8}>\r\n            <Button\r\n              style={{\r\n                marginTop: '1vw',\r\n                backgroundColor: '#FFC000',\r\n                color: 'white',\r\n                height: 40,\r\n                width: 200,\r\n                fontSize: 20,\r\n                alignItems: 'center'\r\n              }}\r\n              type=\"primary\"\r\n              onClick={() => {\r\n                const value = {\r\n                  data: {\r\n                    currentChapter: chapter?.numberId,\r\n                    currentVideoTime: progress\r\n                  },\r\n                  courseId: course?.id,\r\n                  enrollmentId: course?.enrollmentId\r\n                }\r\n                dispatch(SaveProgress.get(value))\r\n              }}\r\n            >\r\n              Update progression\r\n            </Button>\r\n          </Col>\r\n          <Col span={8} />\r\n        </Row>\r\n      ) : (\r\n        <div />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SyllabusTab\r\n","F:\\coursedo.github.io\\src\\pages\\DetailCourse\\components\\feedbackTab.jsx",["352","353"],"F:\\coursedo.github.io\\src\\pages\\About\\index.jsx",["354","355","356","357","358","359","360"],"import { Button } from 'antd'\r\nimport bgPic from 'assets/images/bg.png'\r\nimport Footer from 'components/Footer'\r\nimport Header from 'components/Header'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { history } from 'ultis/functions'\r\nimport '../../components/Header/header.css'\r\nimport './about.css'\r\n\r\nfunction About() {\r\n    const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <Header onSearch={val => console.info('keyword', val)} />\r\n            <div className=\"panel panel-info\">\r\n                <div className=\"panel-heading\">\r\n                    <h3 className=\"panel-title\">About COURSEDO</h3>\r\n                </div>\r\n                <div className=\"panel-body\">\r\n                    <p><span>+84 938394171 </span>\r\n                        <span>coursedo.com@gmail.com</span>\r\n                        <span>227 Nguyen Van Cu street, Ward 4, District 5, HCMC city</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default About\r\n","F:\\coursedo.github.io\\src\\pages\\MyCourses\\index.jsx",["361","362"],"import { LoadingOutlined } from '@ant-design/icons'\r\nimport { Spin, Tabs } from 'antd'\r\nimport Footer from 'components/Footer'\r\nimport Header from 'components/Header'\r\nimport CoursesTab from 'pages/Dashboard/component/coursesTab'\r\nimport 'pages/Profile/profile.css'\r\nimport { GetProfile, GetWatchlist } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { COLOR, ROLES } from 'ultis/functions'\r\nimport WatchlistTab from './components/watchlistTab'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction MyCourses() {\r\n  const userDetail = useSelector(state => state.Auth.user)\r\n  const isLoadingProfile = useSelector(state => state.Auth.isLoadingProfile)\r\n  const watchlist = useSelector(state => state.Auth.watchlist)\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (!userDetail || userDetail.role === ROLES.ADMIN) {\r\n      history.replace('/')\r\n    } else {\r\n      dispatch(GetProfile.get(userDetail.id))\r\n      if (userDetail.role === ROLES.STUDENT) {\r\n        dispatch(GetWatchlist.get(userDetail.id))\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!userDetail || userDetail.role === ROLES.ADMIN) {\r\n      history.replace('/')\r\n    }\r\n  }, [userDetail])\r\n\r\n  if (isLoadingProfile || !userDetail) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"chooseContainer\" style={{ minWidth: 500 }}>\r\n        <span className=\"titleTopic\" style={{ alignSelf: 'center' }}>\r\n          My courses\r\n        </span>\r\n        <div style={{ minHeight: '40vh' }}>\r\n          {userDetail.role === ROLES.TEACHER ? (\r\n            <CoursesTab\r\n              role={userDetail.role}\r\n              courseList={userDetail.courses}\r\n            />\r\n          ) : (\r\n            <Tabs defaultActiveKey=\"1\" centered>\r\n              <TabPane tab=\"My enrollment\" key=\"1\">\r\n                <CoursesTab\r\n                  role={userDetail.role}\r\n                  courseList={userDetail.enrollment}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"My watchlist\" key=\"2\">\r\n                <WatchlistTab courseList={watchlist} />\r\n              </TabPane>\r\n            </Tabs>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyCourses\r\n","F:\\coursedo.github.io\\src\\pages\\MyCourses\\components\\watchlistTab.jsx",[],{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","replacedBy":"366"},{"ruleId":"367","severity":1,"message":"368","line":24,"column":6,"nodeType":"369","endLine":24,"endColumn":12,"suggestions":"370"},{"ruleId":"367","severity":1,"message":"368","line":25,"column":6,"nodeType":"369","endLine":25,"endColumn":12,"suggestions":"371"},{"ruleId":"372","severity":1,"message":"373","line":133,"column":21,"nodeType":"374","endLine":133,"endColumn":36},{"ruleId":"367","severity":1,"message":"375","line":15,"column":6,"nodeType":"369","endLine":15,"endColumn":8,"suggestions":"376"},{"ruleId":"367","severity":1,"message":"377","line":26,"column":6,"nodeType":"369","endLine":26,"endColumn":12,"suggestions":"378"},{"ruleId":"367","severity":1,"message":"368","line":33,"column":6,"nodeType":"369","endLine":33,"endColumn":12,"suggestions":"379"},{"ruleId":"372","severity":1,"message":"373","line":116,"column":21,"nodeType":"374","endLine":116,"endColumn":36},{"ruleId":"367","severity":1,"message":"380","line":66,"column":6,"nodeType":"369","endLine":66,"endColumn":8,"suggestions":"381"},{"ruleId":"382","severity":1,"message":"383","line":81,"column":9,"nodeType":"384","messageId":"385","endLine":81,"endColumn":24},{"ruleId":"382","severity":1,"message":"386","line":8,"column":28,"nodeType":"384","messageId":"385","endLine":8,"endColumn":36},{"ruleId":"382","severity":1,"message":"387","line":11,"column":10,"nodeType":"384","messageId":"385","endLine":11,"endColumn":20},{"ruleId":"367","severity":1,"message":"388","line":38,"column":6,"nodeType":"369","endLine":38,"endColumn":48,"suggestions":"389"},{"ruleId":"367","severity":1,"message":"368","line":34,"column":6,"nodeType":"369","endLine":34,"endColumn":12,"suggestions":"390"},{"ruleId":"367","severity":1,"message":"391","line":42,"column":6,"nodeType":"369","endLine":42,"endColumn":15,"suggestions":"392"},{"ruleId":"367","severity":1,"message":"393","line":28,"column":6,"nodeType":"369","endLine":28,"endColumn":8,"suggestions":"394"},{"ruleId":"367","severity":1,"message":"395","line":78,"column":6,"nodeType":"369","endLine":78,"endColumn":12,"suggestions":"396"},{"ruleId":"382","severity":1,"message":"383","line":93,"column":9,"nodeType":"384","messageId":"385","endLine":93,"endColumn":24},{"ruleId":"367","severity":1,"message":"391","line":27,"column":6,"nodeType":"369","endLine":27,"endColumn":8,"suggestions":"397"},{"ruleId":"367","severity":1,"message":"391","line":38,"column":6,"nodeType":"369","endLine":38,"endColumn":8,"suggestions":"398"},{"ruleId":"367","severity":1,"message":"391","line":33,"column":6,"nodeType":"369","endLine":33,"endColumn":8,"suggestions":"399"},{"ruleId":"367","severity":1,"message":"391","line":50,"column":6,"nodeType":"369","endLine":50,"endColumn":8,"suggestions":"400"},{"ruleId":"367","severity":1,"message":"391","line":25,"column":6,"nodeType":"369","endLine":25,"endColumn":8,"suggestions":"401"},{"ruleId":"402","severity":1,"message":"403","line":119,"column":17,"nodeType":"404","endLine":119,"endColumn":61},{"ruleId":"382","severity":1,"message":"405","line":23,"column":9,"nodeType":"384","messageId":"385","endLine":23,"endColumn":16},{"ruleId":"402","severity":1,"message":"406","line":114,"column":17,"nodeType":"404","endLine":114,"endColumn":78},{"ruleId":"407","severity":1,"message":"408","line":9,"column":7,"nodeType":"404","endLine":14,"endColumn":9},{"ruleId":"382","severity":1,"message":"409","line":3,"column":8,"nodeType":"384","messageId":"385","endLine":3,"endColumn":18},{"ruleId":"382","severity":1,"message":"410","line":3,"column":10,"nodeType":"384","messageId":"385","endLine":3,"endColumn":15},{"ruleId":"382","severity":1,"message":"386","line":8,"column":28,"nodeType":"384","messageId":"385","endLine":8,"endColumn":36},{"ruleId":"382","severity":1,"message":"411","line":25,"column":9,"nodeType":"384","messageId":"385","endLine":25,"endColumn":14},{"ruleId":"367","severity":1,"message":"391","line":36,"column":6,"nodeType":"369","endLine":36,"endColumn":16,"suggestions":"412"},{"ruleId":"382","severity":1,"message":"413","line":5,"column":3,"nodeType":"384","messageId":"385","endLine":5,"endColumn":7},{"ruleId":"382","severity":1,"message":"414","line":6,"column":3,"nodeType":"384","messageId":"385","endLine":6,"endColumn":13},{"ruleId":"382","severity":1,"message":"415","line":9,"column":3,"nodeType":"384","messageId":"385","endLine":9,"endColumn":9},{"ruleId":"382","severity":1,"message":"416","line":11,"column":8,"nodeType":"384","messageId":"385","endLine":11,"endColumn":13},{"ruleId":"382","severity":1,"message":"417","line":12,"column":8,"nodeType":"384","messageId":"385","endLine":12,"endColumn":18},{"ruleId":"382","severity":1,"message":"386","line":18,"column":28,"nodeType":"384","messageId":"385","endLine":18,"endColumn":36},{"ruleId":"402","severity":1,"message":"403","line":107,"column":19,"nodeType":"404","endLine":113,"endColumn":20},{"ruleId":"402","severity":1,"message":"403","line":118,"column":19,"nodeType":"404","endLine":118,"endColumn":41},{"ruleId":"382","severity":1,"message":"418","line":14,"column":9,"nodeType":"384","messageId":"385","endLine":14,"endColumn":17},{"ruleId":"382","severity":1,"message":"405","line":8,"column":9,"nodeType":"384","messageId":"385","endLine":8,"endColumn":16},{"ruleId":"382","severity":1,"message":"419","line":3,"column":23,"nodeType":"384","messageId":"385","endLine":3,"endColumn":34},{"ruleId":"367","severity":1,"message":"420","line":21,"column":6,"nodeType":"369","endLine":21,"endColumn":16,"suggestions":"421"},{"ruleId":"382","severity":1,"message":"422","line":1,"column":10,"nodeType":"384","messageId":"385","endLine":1,"endColumn":16},{"ruleId":"382","severity":1,"message":"416","line":2,"column":8,"nodeType":"384","messageId":"385","endLine":2,"endColumn":13},{"ruleId":"382","severity":1,"message":"423","line":5,"column":17,"nodeType":"384","messageId":"385","endLine":5,"endColumn":26},{"ruleId":"382","severity":1,"message":"424","line":6,"column":10,"nodeType":"384","messageId":"385","endLine":6,"endColumn":21},{"ruleId":"382","severity":1,"message":"419","line":6,"column":23,"nodeType":"384","messageId":"385","endLine":6,"endColumn":34},{"ruleId":"382","severity":1,"message":"425","line":8,"column":10,"nodeType":"384","messageId":"385","endLine":8,"endColumn":17},{"ruleId":"382","severity":1,"message":"426","line":13,"column":11,"nodeType":"384","messageId":"385","endLine":13,"endColumn":28},{"ruleId":"367","severity":1,"message":"427","line":36,"column":6,"nodeType":"369","endLine":36,"endColumn":8,"suggestions":"428"},{"ruleId":"367","severity":1,"message":"368","line":42,"column":6,"nodeType":"369","endLine":42,"endColumn":18,"suggestions":"429"},"no-native-reassign",["430"],"no-negated-in-lhs",["431"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["432"],["433"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'dispatch' and 'token'. Either include them or remove the dependency array.",["434"],"React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["435"],["436"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'user'. Either include them or remove the dependency array.",["437"],"no-unused-vars","'handleUploadImg' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'checkBadge' is defined but never used.","React Hook useEffect has a missing dependency: 'total'. Either include it or remove the dependency array.",["438"],["439"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["440"],"React Hook useEffect has missing dependencies: 'history' and 'userDetail'. Either include them or remove the dependency array.",["441"],"React Hook useEffect has missing dependencies: 'courseId', 'dispatch', and 'history'. Either include them or remove the dependency array.",["442"],["443"],["444"],["445"],["446"],["447"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'SubMenu' is assigned a value but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'EditCourse' is defined but never used.","'store' is defined but never used.","'value' is assigned a value but never used.",["448"],"'Menu' is defined but never used.","'Pagination' is defined but never used.","'Select' is defined but never used.","'bgPic' is defined but never used.","'CourseCard' is defined but never used.","'dispatch' is assigned a value but never used.","'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'props.id'. Either include it or remove the dependency array.",["449"],"'Button' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'history' is defined but never used.","'isDesktopOrLaptop' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'userDetail'. Either include them or remove the dependency array.",["450"],["451"],"no-global-assign","no-unsafe-negation",{"desc":"452","fix":"453"},{"desc":"452","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"452","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"452","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"471","fix":"473"},{"desc":"471","fix":"474"},{"desc":"471","fix":"475"},{"desc":"471","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"467","fix":"483"},"Update the dependencies array to be: [history, user]",{"range":"484","text":"485"},{"range":"486","text":"485"},"Update the dependencies array to be: [dispatch, token]",{"range":"487","text":"488"},"Update the dependencies array to be: [history, token, user]",{"range":"489","text":"490"},{"range":"491","text":"485"},"Update the dependencies array to be: [dispatch, history, user]",{"range":"492","text":"493"},"Update the dependencies array to be: [dispatch, keyword, page, sortOrder, sort, total]",{"range":"494","text":"495"},{"range":"496","text":"485"},"Update the dependencies array to be: [dispatch, history]",{"range":"497","text":"498"},"Update the dependencies array to be: [history, userDetail]",{"range":"499","text":"500"},"Update the dependencies array to be: [courseId, dispatch, history, user]",{"range":"501","text":"502"},"Update the dependencies array to be: [dispatch]",{"range":"503","text":"504"},{"range":"505","text":"504"},{"range":"506","text":"504"},{"range":"507","text":"504"},{"range":"508","text":"504"},"Update the dependencies array to be: [dispatch, id, page]",{"range":"509","text":"510"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"511","text":"512"},"Update the dependencies array to be: [dispatch, history, userDetail]",{"range":"513","text":"514"},{"range":"515","text":"500"},[820,826],"[history, user]",[844,850],[448,450],"[dispatch, token]",[902,908],"[history, token, user]",[1025,1031],[2178,2180],"[dispatch, history, user]",[1399,1441],"[dispatch, keyword, page, sortOrder, sort, total]",[1256,1262],[1401,1410],"[dispatch, history]",[884,886],"[history, userDetail]",[2592,2598],"[courseId, dispatch, history, user]",[1039,1041],"[dispatch]",[1370,1372],[1365,1367],[1580,1582],[974,976],[1300,1310],"[dispatch, id, page]",[590,600],"[dispatch, props.id]",[1302,1304],"[dispatch, history, userDetail]",[1429,1441]]