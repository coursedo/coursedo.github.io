[{"F:\\coursedo.github.io\\src\\index.js":"1","F:\\coursedo.github.io\\src\\reportWebVitals.js":"2","F:\\coursedo.github.io\\src\\App.js":"3","F:\\coursedo.github.io\\src\\core\\store.js":"4","F:\\coursedo.github.io\\src\\components\\GlobalModal\\index.js":"5","F:\\coursedo.github.io\\src\\ultis\\functions.js":"6","F:\\coursedo.github.io\\src\\core\\reducer.js":"7","F:\\coursedo.github.io\\src\\core\\epic.js":"8","F:\\coursedo.github.io\\src\\pages\\ForgotPassword\\index.jsx":"9","F:\\coursedo.github.io\\src\\pages\\Home\\index.jsx":"10","F:\\coursedo.github.io\\src\\pages\\SignUp\\index.jsx":"11","F:\\coursedo.github.io\\src\\pages\\VerifyEmail\\index.jsx":"12","F:\\coursedo.github.io\\src\\pages\\CreatePassword\\index.jsx":"13","F:\\coursedo.github.io\\src\\pages\\Dashboard\\index.jsx":"14","F:\\coursedo.github.io\\src\\pages\\SignIn\\index.jsx":"15","F:\\coursedo.github.io\\src\\pages\\SignIn\\redux\\actions.js":"16","F:\\coursedo.github.io\\src\\pages\\SignIn\\redux\\epics.js":"17","F:\\coursedo.github.io\\src\\pages\\SignIn\\redux\\reducer.js":"18","F:\\coursedo.github.io\\src\\pages\\Dashboard\\redux\\epics.js":"19","F:\\coursedo.github.io\\src\\pages\\Dashboard\\redux\\reducer.js":"20","F:\\coursedo.github.io\\src\\pages\\Dashboard\\redux\\actions.js":"21","F:\\coursedo.github.io\\src\\ultis\\api.js":"22","F:\\coursedo.github.io\\src\\pages\\Dashboard\\constant.js":"23","F:\\coursedo.github.io\\src\\components\\CInput\\index.jsx":"24","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\teacherList.jsx":"25","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\coursesList.jsx":"26","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\categoryList.jsx":"27","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\searchInput.js":"28","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\addCategory.jsx":"29","F:\\coursedo.github.io\\src\\components\\Header\\index.jsx":"30","F:\\coursedo.github.io\\src\\components\\Categories\\index.jsx":"31","F:\\coursedo.github.io\\src\\pages\\Home\\constant.js":"32","F:\\coursedo.github.io\\src\\components\\CourseCard\\index.jsx":"33","F:\\coursedo.github.io\\src\\pages\\Home\\components\\swipeComponent.jsx":"34","F:\\coursedo.github.io\\src\\pages\\Home\\components\\discoverBtn.jsx":"35","F:\\coursedo.github.io\\src\\components\\Footer\\index.jsx":"36","F:\\coursedo.github.io\\src\\components\\CateCard\\index.jsx":"37","F:\\coursedo.github.io\\src\\pages\\Courses\\index.jsx":"38","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\studentList.jsx":"39","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\addTeacher.jsx":"40","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\coursesTab.jsx":"41","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\profileTab.jsx":"42","F:\\coursedo.github.io\\src\\ultis\\firebaseConfig.js":"43","F:\\coursedo.github.io\\src\\pages\\CreateCourse\\redux\\epics.js":"44","F:\\coursedo.github.io\\src\\pages\\CreateCourse\\redux\\actions.js":"45","F:\\coursedo.github.io\\src\\pages\\CreateCourse\\redux\\reducer.js":"46","F:\\coursedo.github.io\\src\\pages\\CreateCourse\\index.jsx":"47","F:\\coursedo.github.io\\src\\pages\\CreateCourse\\constant.js":"48"},{"size":1229,"mtime":1610262896000,"results":"49","hashOfConfig":"50"},{"size":375,"mtime":1610167306000,"results":"51","hashOfConfig":"50"},{"size":1217,"mtime":1610269696000,"results":"52","hashOfConfig":"50"},{"size":1047,"mtime":1610167306000,"results":"53","hashOfConfig":"50"},{"size":2342,"mtime":1610167306000,"results":"54","hashOfConfig":"50"},{"size":847,"mtime":1610262954000,"results":"55","hashOfConfig":"50"},{"size":496,"mtime":1610269570000,"results":"56","hashOfConfig":"50"},{"size":307,"mtime":1610269570000,"results":"57","hashOfConfig":"50"},{"size":3965,"mtime":1610167306000,"results":"58","hashOfConfig":"50"},{"size":3297,"mtime":1610269098000,"results":"59","hashOfConfig":"50"},{"size":6074,"mtime":1610167306000,"results":"60","hashOfConfig":"50"},{"size":648,"mtime":1610167306000,"results":"61","hashOfConfig":"50"},{"size":4565,"mtime":1610167306000,"results":"62","hashOfConfig":"50"},{"size":4105,"mtime":1610262894000,"results":"63","hashOfConfig":"50"},{"size":5201,"mtime":1610190896000,"results":"64","hashOfConfig":"50"},{"size":1185,"mtime":1610167306000,"results":"65","hashOfConfig":"50"},{"size":5111,"mtime":1610262894000,"results":"66","hashOfConfig":"50"},{"size":528,"mtime":1610167306000,"results":"67","hashOfConfig":"50"},{"size":4650,"mtime":1610262894000,"results":"68","hashOfConfig":"50"},{"size":1688,"mtime":1610262894000,"results":"69","hashOfConfig":"50"},{"size":1432,"mtime":1610262894000,"results":"70","hashOfConfig":"50"},{"size":1806,"mtime":1610167306000,"results":"71","hashOfConfig":"50"},{"size":277,"mtime":1610262894000,"results":"72","hashOfConfig":"50"},{"size":333,"mtime":1610167306000,"results":"73","hashOfConfig":"50"},{"size":4736,"mtime":1610262894000,"results":"74","hashOfConfig":"50"},{"size":3743,"mtime":1610190896000,"results":"75","hashOfConfig":"50"},{"size":4302,"mtime":1610190896000,"results":"76","hashOfConfig":"50"},{"size":2787,"mtime":1610190896000,"results":"77","hashOfConfig":"50"},{"size":4116,"mtime":1610262894000,"results":"78","hashOfConfig":"50"},{"size":3873,"mtime":1610269810000,"results":"79","hashOfConfig":"50"},{"size":1323,"mtime":1610264560000,"results":"80","hashOfConfig":"50"},{"size":1502,"mtime":1610200018000,"results":"81","hashOfConfig":"50"},{"size":1662,"mtime":1610260790000,"results":"82","hashOfConfig":"50"},{"size":2103,"mtime":1610260764000,"results":"83","hashOfConfig":"50"},{"size":589,"mtime":1610204168000,"results":"84","hashOfConfig":"50"},{"size":463,"mtime":1610262430000,"results":"85","hashOfConfig":"50"},{"size":704,"mtime":1610260740000,"results":"86","hashOfConfig":"50"},{"size":5969,"mtime":1610269058000,"results":"87","hashOfConfig":"50"},{"size":5031,"mtime":1610262894000,"results":"88","hashOfConfig":"50"},{"size":8174,"mtime":1610262894000,"results":"89","hashOfConfig":"50"},{"size":3124,"mtime":1610262894000,"results":"90","hashOfConfig":"50"},{"size":1340,"mtime":1610262894000,"results":"91","hashOfConfig":"50"},{"size":523,"mtime":1610262894000,"results":"92","hashOfConfig":"50"},{"size":1218,"mtime":1610269570000,"results":"93","hashOfConfig":"50"},{"size":249,"mtime":1610269570000,"results":"94","hashOfConfig":"50"},{"size":285,"mtime":1610269570000,"results":"95","hashOfConfig":"50"},{"size":16667,"mtime":1610269570000,"results":"96","hashOfConfig":"50"},{"size":970,"mtime":1610269570000,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"101"},"yiyuk4",{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"101"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"101"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"101"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"101"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"101"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"101"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"101"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"101"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"101"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"101"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"168","messages":"169","errorCount":1,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"101"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"101"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"101"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\coursedo.github.io\\src\\index.js",["210"],"import { ConfigProvider } from 'antd'\r\nimport viVN from 'antd/es/locale/vi_VN'\r\nimport GlobalModal, { ModalProvider } from 'components/GlobalModal'\r\nimport { persistor, store } from 'core/store'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { IconContext } from 'react-icons'\r\nimport { Provider } from 'react-redux'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport App from './App'\r\nimport './index.css'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ConfigProvider locale={viVN}>\r\n        <PersistGate loading={null} persistor={persistor}>\r\n          <IconContext.Provider\r\n            value={{\r\n              className: 'react-icon-clasname',\r\n              style: { verticalAlign: 'middle' }\r\n            }}\r\n          >\r\n            <App />\r\n            <GlobalModal />\r\n          </IconContext.Provider>\r\n        </PersistGate>\r\n      </ConfigProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n",["211","212"],"F:\\coursedo.github.io\\src\\reportWebVitals.js",[],"F:\\coursedo.github.io\\src\\App.js",[],"F:\\coursedo.github.io\\src\\core\\store.js",[],"F:\\coursedo.github.io\\src\\components\\GlobalModal\\index.js",[],"F:\\coursedo.github.io\\src\\ultis\\functions.js",[],"F:\\coursedo.github.io\\src\\core\\reducer.js",[],"F:\\coursedo.github.io\\src\\core\\epic.js",[],"F:\\coursedo.github.io\\src\\pages\\ForgotPassword\\index.jsx",["213"],"import { Button } from 'antd'\r\nimport CInput from 'components/CInput'\r\nimport { Form, Formik } from 'formik'\r\nimport { ResetPassword } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory } from 'react-router-dom'\r\nimport * as yup from 'yup'\r\nimport '../SignIn/signin.css'\r\nimport forgotPic from 'assets/images/forgot_password.jpg'\r\nimport logo from 'assets/logo.png'\r\n\r\nfunction ForgotPassword() {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth?.user)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  const validationSchema = yup.object().shape({\r\n    email: yup\r\n      .string()\r\n      .trim()\r\n      .max(48, 'Email must have at most 48 characters')\r\n      .label('Email')\r\n      .email('Invalid email')\r\n      .required('* Please input email')\r\n  })\r\n\r\n  const handleForgot = values => {\r\n    dispatch(\r\n      ResetPassword.get({\r\n        ...values,\r\n        email: values.email.toLowerCase()\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleForgot(values)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"bg\">\r\n      <div id=\"loginBg\">\r\n        <a href=\"/\" style={{ textDecoration: 'none', color: 'white' }}>\r\n          <img src={logo} alt=\"forgot\" width={100} />\r\n        </a>\r\n        <div id=\"loginBox\">\r\n          <Formik\r\n            initialValues={{\r\n              email: ''\r\n            }}\r\n            isInitialValid={false}\r\n            validationSchema={validationSchema}\r\n            onSubmit={values => handleForgot(values)}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              values,\r\n              isValid,\r\n              errors,\r\n              touched,\r\n              setFieldTouched\r\n            }) => {\r\n              return (\r\n                <Form className=\"formStyle\">\r\n                  <span id=\"loginStyle\">\r\n                    Ok let’s fetch you ya’ login details\r\n                  </span>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.email}\r\n                    onChange={handleChange('email')}\r\n                    onTouchStart={() => setFieldTouched('email')}\r\n                    onBlur={handleBlur('email')}\r\n                    placeholder=\"Email\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.email}\r\n                  />\r\n                  <div style={{ alignSelf: 'flex-end', marginBottom: 34 }}>\r\n                    <span>Already have an account? </span>\r\n                    <Button\r\n                      style={{ padding: 0 }}\r\n                      color=\"primary\"\r\n                      type=\"link\"\r\n                      onClick={() =>\r\n                        history.push({\r\n                          pathname: '/signin',\r\n                          state: { from: `/forgot` }\r\n                        })\r\n                      }\r\n                    >\r\n                      Back to Sign Up\r\n                    </Button>\r\n                  </div>\r\n                  <Button\r\n                    id=\"loginBtn\"\r\n                    disabled={!isValid}\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Proceed\r\n                  </Button>\r\n                </Form>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      {isDesktopOrLaptop && (\r\n        <div id=\"imgBg\" style={{ backgroundImage: `url(${forgotPic})` }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ForgotPassword\r\n","F:\\coursedo.github.io\\src\\pages\\Home\\index.jsx",["214","215","216","217","218"],"import { Button } from 'antd'\r\nimport GlobalModal from 'components/GlobalModal'\r\nimport Header from 'components/Header'\r\nimport { SignOut } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { history, MODAL_TYPE } from 'ultis/functions'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport bgPic from 'assets/images/bg.png'\r\nimport './home.css'\r\nimport { courses } from './constant'\r\nimport SwipeList from './components/swipeComponent'\r\nimport DiscoBtn from './components/discoverBtn'\r\nimport Footer from 'components/Footer'\r\nimport { GetAllCategories } from 'pages/Dashboard/redux/actions'\r\nimport { useSelector } from 'react-redux'\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch()\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    dispatch(GetAllCategories.get())\r\n    return () => {}\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          flex: 1,\r\n          backgroundColor: 'white'\r\n        }}\r\n      >\r\n        {/* <Button\r\n          onClick={() => {\r\n            GlobalModal.alertMessage('Information', 'Ha ha', MODAL_TYPE.CHOICE)\r\n          }}\r\n        >\r\n          Mở modal\r\n        </Button>\r\n        <Button type=\"primary\" onClick={() => history.push('/signup')}>\r\n          Đăng ký\r\n        </Button>\r\n        <Button onClick={() => history.push('/signin')}>Đăng nhập</Button>\r\n        <Button onClick={() => dispatch(SignOut.get())}>Log out</Button> */}\r\n        {isDesktopOrLaptop && (\r\n          <div id=\"landing\" style={{ backgroundImage: `url(${bgPic})` }}>\r\n            <span id=\"welcomeTxt\">\r\n              Get Access to Unlimited Educational Resources. Everywhere,\r\n              Everytime!\r\n            </span>\r\n            <Button\r\n              style={{\r\n                marginTop: '1vw',\r\n                backgroundColor: 'white',\r\n                color: '#FFC000'\r\n              }}\r\n              type=\"primary\"\r\n              onClick={() => history.push('/signup')}\r\n            >\r\n              Join for Free\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div id=\"swipe\">\r\n        <p id=\"type\">Trending Courses</p>\r\n        <SwipeList list={courses} type={'courses'} />\r\n        <DiscoBtn onClick={() => history.push('/courses')} />\r\n      </div>\r\n      <div id=\"swipe\">\r\n        <p id=\"type\">Most Popular Courses</p>\r\n        <SwipeList list={courses} type={'courses'} />\r\n        <DiscoBtn onClick={() => history.push('/courses')} />\r\n      </div>\r\n      <div id=\"swipe\">\r\n        <p id=\"type\">Newest Courses</p>\r\n        <SwipeList list={courses} type={'courses'} />\r\n        <DiscoBtn onClick={() => history.push('/courses')} />\r\n      </div>\r\n      <div id=\"swipe\">\r\n        <p id=\"type\">Top categories</p>\r\n        <SwipeList list={courses} type={'category'} />\r\n        <DiscoBtn onClick={() => history.push('/categories')} />\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","F:\\coursedo.github.io\\src\\pages\\SignUp\\index.jsx",["219","220"],"import { Button } from 'antd'\r\nimport CInput from 'components/CInput'\r\nimport { Form, Formik } from 'formik'\r\nimport { SignUpRequest } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { ROLES } from 'ultis/functions'\r\nimport * as yup from 'yup'\r\nimport '../SignIn/signin.css'\r\nimport signupPic from 'assets/images/signup.png'\r\nimport logo from 'assets/logo.png'\r\n\r\nfunction SignUp() {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth?.user)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  const validationSchema = yup.object().shape({\r\n    email: yup\r\n      .string()\r\n      .trim()\r\n      .max(48, 'Email must have at most 48 characters')\r\n      .label('Email')\r\n      .email('Invalid email')\r\n      .required('* Please input email'),\r\n    password: yup\r\n      .string()\r\n      .required('* Please input password')\r\n      .min(8, 'Password must include at least 8 characters')\r\n      .max(48, 'Password must include at most 48 characters')\r\n      .matches(/(?=.{8,})/, {\r\n        message: 'Password must include at least 8 characters'\r\n      }),\r\n    fullName: yup\r\n      .string()\r\n      .trim()\r\n      .required('* Please input password')\r\n      .min(3, 'Full name must include at least 3 characters')\r\n      .max(64, 'Full name must include at most 48 characters')\r\n      .matches(\r\n        /[^a-z0-9A-Z_ÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂưăạảấầẩẫậắằẳẵặẹẻẽềềểỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ]/u,\r\n        {\r\n          message: 'Invalid full name'\r\n        }\r\n      )\r\n  })\r\n\r\n  const handleSignup = values => {\r\n    dispatch(\r\n      SignUpRequest.get({\r\n        ...values,\r\n        email: values.email.toLowerCase(),\r\n        role: ROLES.NOT_VERIFIED\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleSignup(values)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"bg\">\r\n      <div id=\"loginBg\">\r\n        <a href=\"/\" style={{ textDecoration: 'none', color: 'white' }}>\r\n          <img src={logo} alt=\"signup\" width={100} />\r\n        </a>\r\n        <div id=\"loginBox\">\r\n          <Formik\r\n            initialValues={{\r\n              email: '',\r\n              password: '',\r\n              fullName: ''\r\n            }}\r\n            isInitialValid={false}\r\n            validationSchema={validationSchema}\r\n            onSubmit={values => handleSignup(values)}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              values,\r\n              isValid,\r\n              errors,\r\n              touched,\r\n              setFieldTouched\r\n            }) => {\r\n              return (\r\n                <Form className=\"formStyle\">\r\n                  <span id=\"loginStyle\">Please create a new account here</span>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.fullName}\r\n                    onChange={handleChange('fullName')}\r\n                    onTouchStart={() => setFieldTouched('fullName')}\r\n                    onBlur={handleBlur('fullName')}\r\n                    placeholder=\"Full name\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.fullName}\r\n                  />\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.email}\r\n                    onChange={handleChange('email')}\r\n                    onTouchStart={() => setFieldTouched('email')}\r\n                    onBlur={handleBlur('email')}\r\n                    placeholder=\"Email\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.email}\r\n                  />\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    type=\"password\"\r\n                    onChange={handleChange('password')}\r\n                    onTouchStart={() => setFieldTouched('password')}\r\n                    value={values.password}\r\n                    onBlur={handleBlur('password')}\r\n                    placeholder=\"Password\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.password}\r\n                    type=\"password\"\r\n                  />\r\n                  <div style={{ alignSelf: 'flex-end', marginBottom: 34 }}>\r\n                    <span>Already have an account? </span>\r\n                    <Button\r\n                      style={{ padding: 0 }}\r\n                      color=\"primary\"\r\n                      type=\"link\"\r\n                      onClick={() =>\r\n                        history.push({\r\n                          pathname: '/signin',\r\n                          state: { from: `/signup` }\r\n                        })\r\n                      }\r\n                    >\r\n                      Sign in\r\n                    </Button>\r\n                  </div>\r\n                  <Button\r\n                    id=\"loginBtn\"\r\n                    disabled={!isValid}\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Sign up\r\n                  </Button>\r\n                </Form>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      {isDesktopOrLaptop && (\r\n        <div id=\"imgBg\" style={{ backgroundImage: `url(${signupPic})` }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignUp\r\n","F:\\coursedo.github.io\\src\\pages\\VerifyEmail\\index.jsx",["221"],"import { Space, Spin } from 'antd'\r\nimport { VerifyEmail } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport '../SignIn/signin.css'\r\n\r\nfunction VerifyEmailPage() {\r\n  const param = useParams()\r\n  const { token } = param\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(VerifyEmail.get({ token }))\r\n  }, [])\r\n\r\n  return (\r\n    <Space\r\n      style={{ display: 'flex', justifyContent: 'center', paddingTop: 48 }}\r\n    >\r\n      <Spin size=\"large\" />\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default VerifyEmailPage\r\n","F:\\coursedo.github.io\\src\\pages\\CreatePassword\\index.jsx",["222"],"import { Button } from 'antd'\r\nimport CInput from 'components/CInput'\r\nimport { Form, Formik } from 'formik'\r\nimport { CreatePassword } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport * as yup from 'yup'\r\nimport '../SignIn/signin.css'\r\nimport forgotPic from 'assets/images/forgot_password.jpg'\r\nimport logo from 'assets/logo.png'\r\n\r\nfunction CreatePasswordPage() {\r\n  const param = useParams()\r\n  const { token } = param\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth?.user)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (user || !token) {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  const validationSchema = yup.object().shape({\r\n    password: yup\r\n      .string()\r\n      .required('* Please input password')\r\n      .min(8, 'Password must include at least 8 characters')\r\n      .max(48, 'Password must include at most 48 characters')\r\n      .matches(/(?=.{8,})/, {\r\n        message: 'Password must include at least 8 characters'\r\n      }),\r\n    confirm: yup\r\n      .string()\r\n      .required('* Please input password')\r\n      .min(8, 'Password must include at least 8 characters')\r\n      .max(48, 'Password must include at most 48 characters')\r\n      .matches(/(?=.{8,})/, {\r\n        message: 'Password must include at least 8 characters'\r\n      })\r\n      .oneOf(\r\n        [yup.ref('password'), null],\r\n        'Confirm password must be the same as password'\r\n      )\r\n  })\r\n\r\n  const handleCreate = values => {\r\n    dispatch(\r\n      CreatePassword.get({\r\n        password: values.password,\r\n        token: token\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleCreate(values)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"bg\">\r\n      <div id=\"loginBg\">\r\n        <a href=\"/\" style={{ textDecoration: 'none', color: 'white' }}>\r\n          <img src={logo} alt=\"logo\" width={100} />\r\n        </a>\r\n        <div id=\"loginBox\">\r\n          <Formik\r\n            initialValues={{\r\n              password: '',\r\n              confirm: ''\r\n            }}\r\n            isInitialValid={false}\r\n            validationSchema={validationSchema}\r\n            onSubmit={values => handleCreate(values)}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              values,\r\n              isValid,\r\n              errors,\r\n              touched,\r\n              setFieldTouched\r\n            }) => {\r\n              return (\r\n                <Form className=\"formStyle\">\r\n                  <span id=\"loginStyle\">Input new password to continue</span>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.password}\r\n                    onChange={handleChange('password')}\r\n                    onTouchStart={() => setFieldTouched('password')}\r\n                    onBlur={handleBlur('password')}\r\n                    placeholder=\"New password\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.password}\r\n                    type=\"password\"\r\n                  />\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.confirm}\r\n                    onChange={handleChange('confirm')}\r\n                    onTouchStart={() => setFieldTouched('confirm')}\r\n                    onBlur={handleBlur('confirm')}\r\n                    placeholder=\"Confirm password\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.confirm}\r\n                    type=\"password\"\r\n                  />\r\n                  <Button\r\n                    style={{ marginTop: 24 }}\r\n                    id=\"loginBtn\"\r\n                    disabled={!isValid}\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Reset password\r\n                  </Button>\r\n                </Form>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      {isDesktopOrLaptop && (\r\n        <div id=\"imgBg\" style={{ backgroundImage: `url(${forgotPic})` }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreatePasswordPage\r\n","F:\\coursedo.github.io\\src\\pages\\Dashboard\\index.jsx",["223"],"import { LoadingOutlined, UserOutlined } from '@ant-design/icons'\r\nimport { Avatar, Button, Menu, Spin } from 'antd'\r\nimport { SignOut } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { FaChalkboardTeacher } from 'react-icons/fa'\r\nimport { FiBookOpen, FiGrid, FiUsers } from 'react-icons/fi'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { COLOR, ROLES } from 'ultis/functions'\r\nimport CategoryList from './component/categoryList'\r\nimport CoursesList from './component/coursesList'\r\nimport TeacherList from './component/teacherList'\r\nimport { PAGE } from './constant'\r\nimport './dashboard.css'\r\nimport { SetCurrentPage } from './redux/actions'\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction Dashboard() {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth.user)\r\n  const isLoadingDashboard = useSelector(\r\n    state => state.Dashboard.isLoadingDashboard\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!user || user?.role !== ROLES.ADMIN) {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  const currentPage = useSelector(state => state.Dashboard.currentPage)\r\n\r\n  const onMenuSelect = ({ item, key, keyPath, selectedKeys, domEvent }) => {\r\n    dispatch(SetCurrentPage.get({ currentPage: key }))\r\n  }\r\n\r\n  const handleSignOut = () => {\r\n    dispatch(SignOut.get())\r\n    history.replace('/')\r\n  }\r\n\r\n  const renderRightDashboard = () => {\r\n    switch (currentPage) {\r\n      case PAGE.CATEGORY:\r\n        return <CategoryList />\r\n      case PAGE.COURSE:\r\n        return <CoursesList />\r\n      case PAGE.TEACHER:\r\n        return <TeacherList />\r\n      case PAGE.STUDENT:\r\n        return <TeacherList />\r\n      default:\r\n        return <CategoryList />\r\n    }\r\n  }\r\n\r\n  if (isLoadingDashboard) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div id=\"dashboardBg\">\r\n      <div id=\"menuContainer\">\r\n        {user?.avatar ? (\r\n          <Avatar size={100} src={user?.avatar} />\r\n        ) : (\r\n          <Avatar size={100} icon={<UserOutlined />} />\r\n        )}\r\n        <span id=\"adminName\">{user.fullName ? user.fullName : 'Admin'}</span>\r\n        <Menu\r\n          defaultSelectedKeys={[PAGE.CATEGORY]}\r\n          selectedKeys={[currentPage]}\r\n          mode=\"inline\"\r\n          onSelect={onMenuSelect}\r\n          style={{ backgroundColor: COLOR.primary1 }}\r\n        >\r\n          <Menu.Item\r\n            style={{ color: 'white' }}\r\n            className=\"customItem\"\r\n            key={PAGE.CATEGORY}\r\n            icon={<FiGrid size={16} style={{ marginRight: 8 }} />}\r\n          >\r\n            Categories\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            style={{ color: 'white' }}\r\n            className=\"customItem\"\r\n            key={PAGE.COURSE}\r\n            icon={<FiBookOpen size={16} style={{ marginRight: 8 }} />}\r\n          >\r\n            Courses\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            style={{ color: 'white' }}\r\n            className=\"customItem\"\r\n            key={PAGE.TEACHER}\r\n            icon={<FaChalkboardTeacher size={14} style={{ marginRight: 8 }} />}\r\n          >\r\n            Teachers\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            style={{ color: 'white' }}\r\n            className=\"customItem\"\r\n            key={PAGE.STUDENT}\r\n            icon={<FiUsers size={16} style={{ marginRight: 8 }} />}\r\n          >\r\n            Students\r\n          </Menu.Item>\r\n        </Menu>\r\n        <Button\r\n          type=\"ghost\"\r\n          style={{\r\n            width: '80%',\r\n            marginTop: 64,\r\n            borderColor: 'white',\r\n            borderRadius: 8,\r\n            color: 'white'\r\n          }}\r\n          onClick={() => handleSignOut()}\r\n        >\r\n          Log out\r\n        </Button>\r\n      </div>\r\n      {renderRightDashboard()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","F:\\coursedo.github.io\\src\\pages\\SignIn\\index.jsx",["224","225"],"import { Button } from 'antd'\r\nimport signinPic from 'assets/images/signin.png'\r\nimport logo from 'assets/logo.png'\r\nimport CInput from 'components/CInput'\r\nimport { Form, Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { ROLES } from 'ultis/functions'\r\nimport * as yup from 'yup'\r\nimport { SignInRequest } from './redux/actions'\r\nimport './signin.css'\r\n\r\nfunction SignIn() {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth?.user)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      if (user.role === ROLES.ADMIN) {\r\n        history.replace('/admin')\r\n      } else {\r\n        if (history.location.state) {\r\n          history.goBack()\r\n        } else {\r\n          history.replace('/')\r\n        }\r\n      }\r\n    }\r\n  }, [user])\r\n\r\n  const validationSchema = yup.object().shape({\r\n    password: yup\r\n      .string()\r\n      .required('* Please input password')\r\n      .min(8, 'Password must include at least 8 characters')\r\n      .max(48, 'Password must include at most 48 characters')\r\n      .matches(/(?=.{8,})/, {\r\n        message: 'Password must include at least 8 characters'\r\n      }),\r\n    email: yup\r\n      .string()\r\n      .trim()\r\n      .max(48, 'Email must have at most 48 characters')\r\n      .label('Email')\r\n      .email('Invalid email')\r\n      .required('* Please input email')\r\n  })\r\n\r\n  const handleLogin = values => {\r\n    dispatch(\r\n      SignInRequest.get({ ...values, email: values.email.toLowerCase() })\r\n    )\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleLogin(values)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"bg\">\r\n      <div id=\"loginBg\">\r\n        <a href=\"/\" style={{ textDecoration: 'none', color: 'white' }}>\r\n          <img src={logo} alt=\"signin\" width={100} />\r\n        </a>\r\n        <div id=\"loginBox\">\r\n          <Formik\r\n            initialValues={{\r\n              password: '',\r\n              email: ''\r\n            }}\r\n            isInitialValid={false}\r\n            validationSchema={validationSchema}\r\n            onSubmit={values => handleLogin(values)}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              values,\r\n              isValid,\r\n              errors,\r\n              touched,\r\n              setFieldTouched\r\n            }) => {\r\n              return (\r\n                <Form className=\"formStyle\">\r\n                  <span id=\"loginStyle\">\r\n                    Sign in to your account to continue\r\n                  </span>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.email}\r\n                    onChange={handleChange('email')}\r\n                    onTouchStart={() => setFieldTouched('email')}\r\n                    onBlur={handleBlur('email')}\r\n                    placeholder=\"Email\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.email}\r\n                  />\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    type=\"password\"\r\n                    onChange={handleChange('password')}\r\n                    onTouchStart={() => setFieldTouched('password')}\r\n                    value={values.password}\r\n                    onBlur={handleBlur('password')}\r\n                    placeholder=\"Password\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.password}\r\n                    type=\"password\"\r\n                  />\r\n                  <div className=\"buttomBox\">\r\n                    <Button\r\n                      style={{ padding: 0 }}\r\n                      color=\"primary\"\r\n                      type=\"link\"\r\n                      onClick={() => history.push('/forgot')}\r\n                    >\r\n                      Forgot password?\r\n                    </Button>\r\n                    <div>\r\n                      <span>Don’t have an account? </span>\r\n                      <Button\r\n                        style={{ padding: 0 }}\r\n                        color=\"primary\"\r\n                        type=\"link\"\r\n                        onClick={() => history.push('/signup')}\r\n                      >\r\n                        Sign up\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                  <Button\r\n                    id=\"loginBtn\"\r\n                    disabled={!isValid}\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Sign in\r\n                  </Button>\r\n                </Form>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      {isDesktopOrLaptop && (\r\n        <div id=\"imgBg\" style={{ backgroundImage: `url(${signinPic})` }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignIn\r\n","F:\\coursedo.github.io\\src\\pages\\SignIn\\redux\\actions.js",[],"F:\\coursedo.github.io\\src\\pages\\SignIn\\redux\\epics.js",[],"F:\\coursedo.github.io\\src\\pages\\SignIn\\redux\\reducer.js",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\redux\\epics.js",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\redux\\reducer.js",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\redux\\actions.js",[],"F:\\coursedo.github.io\\src\\ultis\\api.js",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\constant.js",[],"F:\\coursedo.github.io\\src\\components\\CInput\\index.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\teacherList.jsx",["226","227"],"import {\r\n  DeleteOutlined,\r\n  LoadingOutlined,\r\n  PlusCircleOutlined\r\n} from '@ant-design/icons'\r\nimport { Button, Modal, Space, Spin, Table } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { COLOR } from 'ultis/functions'\r\nimport '../dashboard.css'\r\nimport { getColumnSearchProps } from './searchInput'\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction TeacherList() {\r\n  const categoryList = useSelector(state => state.Dashboard.categoryList)\r\n  const isLoading = useSelector(state => state.Dashboard.isLoading)\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchColumn] = useState('')\r\n  const refInput = useRef()\r\n  let realList = []\r\n  categoryList.forEach(item => {\r\n    realList.push({\r\n      name: item.name,\r\n      parent: null,\r\n      id: item.id,\r\n      parentId: item.parentId\r\n    })\r\n    item?.subCategory &&\r\n      item?.subCategory.length > 0 &&\r\n      item?.subCategory.forEach(subCat => {\r\n        realList.push({\r\n          name: subCat.name,\r\n          parent: item.name,\r\n          id: subCat.id,\r\n          parentId: subCat.parentId\r\n        })\r\n      })\r\n  })\r\n  const [edit, setEdit] = useState({ isShow: false, category: null })\r\n\r\n  useEffect(() => {\r\n    // dispatch(GetAllCategories.get())\r\n  }, [])\r\n\r\n  const onAddNewCategory = () => {\r\n    setEdit({ isShow: true, category: null })\r\n  }\r\n\r\n  const handleDelete = record => {\r\n    Modal.confirm({\r\n      title: 'Confirm',\r\n      icon: <DeleteOutlined style={{ color: COLOR.primary1 }} />,\r\n      content: 'Do you confirm to delete this category?',\r\n      okText: 'Confirm',\r\n      cancelText: 'Cancel',\r\n      centered: true,\r\n      okButtonProps: { style: { backgroundColor: COLOR.primary1 } },\r\n      onOk: () => {\r\n        // dispatch(DeleteCategory.get(record.id))\r\n        Modal.destroyAll()\r\n      }\r\n    })\r\n  }\r\n\r\n  const categoryColumns = [\r\n    {\r\n      ...getColumnSearchProps(\r\n        'name',\r\n        'Enter title to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Title',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      sorter: (a, b) => a.name.localeCompare(b.name)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'parent',\r\n        'Enter title to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Parent',\r\n      dataIndex: 'parent',\r\n      key: 'parent',\r\n      sorter: (a, b) => a.parent.localeCompare(b.parent)\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <DeleteOutlined\r\n              style={{ fontSize: 20, color: '#FF0000' }}\r\n              onClick={() => handleDelete(record)}\r\n            />\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\">Categories</span>\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<PlusCircleOutlined />}\r\n          style={{ width: 200, marginBottom: 32 }}\r\n          onClick={() => onAddNewCategory()}\r\n          size=\"large\"\r\n        >\r\n          Add new category\r\n        </Button>\r\n        <Table columns={categoryColumns} dataSource={realList} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TeacherList\r\n","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\coursesList.jsx",["228","229"],"import {\r\n  DeleteOutlined,\r\n  LoadingOutlined,\r\n  PlusCircleOutlined\r\n} from '@ant-design/icons'\r\nimport { Button, Modal, Space, Spin, Table } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { COLOR } from 'ultis/functions'\r\nimport '../dashboard.css'\r\nimport { getColumnSearchProps } from './searchInput'\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction CoursesList() {\r\n  const categoryList = useSelector(state => state.Dashboard.categoryList)\r\n  const isLoading = useSelector(state => state.Dashboard.isLoading)\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchColumn] = useState('')\r\n  const refInput = useRef()\r\n  let realList = []\r\n  categoryList.forEach(item => {\r\n    realList.push({\r\n      name: item.name,\r\n      parent: null,\r\n      id: item.id,\r\n      parentId: item.parentId\r\n    })\r\n    item?.subCategory &&\r\n      item?.subCategory.length > 0 &&\r\n      item?.subCategory.forEach(subCat => {\r\n        realList.push({\r\n          name: subCat.name,\r\n          parent: item.name,\r\n          id: subCat.id,\r\n          parentId: subCat.parentId\r\n        })\r\n      })\r\n  })\r\n  const [edit, setEdit] = useState({ isShow: false, category: null })\r\n\r\n  useEffect(() => {\r\n    // dispatch(GetAllCategories.get())\r\n  }, [])\r\n\r\n  const onAddNewCategory = () => {\r\n    setEdit({ isShow: true, category: null })\r\n  }\r\n\r\n  const handleDelete = record => {\r\n    Modal.confirm({\r\n      title: 'Confirm',\r\n      icon: <DeleteOutlined style={{ color: COLOR.primary1 }} />,\r\n      content: 'Do you confirm to delete this category?',\r\n      okText: 'Confirm',\r\n      cancelText: 'Cancel',\r\n      centered: true,\r\n      okButtonProps: { style: { backgroundColor: COLOR.primary1 } },\r\n      onOk: () => {\r\n        // dispatch(DeleteCategory.get(record.id))\r\n        Modal.destroyAll()\r\n      }\r\n    })\r\n  }\r\n\r\n  const categoryColumns = [\r\n    {\r\n      ...getColumnSearchProps(\r\n        'name',\r\n        'Enter title to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Title',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      sorter: (a, b) => a.name.localeCompare(b.name)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'parent',\r\n        'Enter title to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Parent',\r\n      dataIndex: 'parent',\r\n      key: 'parent',\r\n      sorter: (a, b) => a.parent.localeCompare(b.parent)\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <DeleteOutlined\r\n              style={{ fontSize: 20, color: '#FF0000' }}\r\n              onClick={() => handleDelete(record)}\r\n            />\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\">Categories</span>\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<PlusCircleOutlined />}\r\n          style={{ width: 200, marginBottom: 32 }}\r\n          onClick={() => onAddNewCategory()}\r\n          size=\"large\"\r\n        >\r\n          Add new category\r\n        </Button>\r\n        <Table columns={categoryColumns} dataSource={realList} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CoursesList\r\n","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\categoryList.jsx",["230"],"import {\r\n  DeleteOutlined,\r\n  EditOutlined,\r\n  LoadingOutlined,\r\n  PlusCircleOutlined\r\n} from '@ant-design/icons'\r\nimport { Button, Modal, Space, Spin, Table } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { COLOR } from 'ultis/functions'\r\nimport '../dashboard.css'\r\nimport { DeleteCategory, GetAllCategories } from '../redux/actions'\r\nimport AddCategoryModal from './addCategory'\r\nimport { getColumnSearchProps } from './searchInput'\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction CategoryList() {\r\n  const categoryList = useSelector(state => state.Dashboard.categoryList)\r\n  const isLoading = useSelector(state => state.Dashboard.isLoading)\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchColumn] = useState('')\r\n  const refInput = useRef()\r\n  let realList = []\r\n  categoryList.forEach(item => {\r\n    realList.push({\r\n      name: item.name,\r\n      parent: null,\r\n      id: item.id,\r\n      parentId: item.parentId\r\n    })\r\n    item?.subCategory &&\r\n      item?.subCategory.length > 0 &&\r\n      item?.subCategory.forEach(subCat => {\r\n        realList.push({\r\n          name: subCat.name,\r\n          parent: item.name,\r\n          id: subCat.id,\r\n          parentId: subCat.parentId\r\n        })\r\n      })\r\n  })\r\n  const [edit, setEdit] = useState({ isShow: false, category: null })\r\n\r\n  useEffect(() => {\r\n    dispatch(GetAllCategories.get())\r\n  }, [])\r\n\r\n  const onAddNewCategory = () => {\r\n    setEdit({ isShow: true, category: null })\r\n  }\r\n\r\n  const handleEdit = (value, record) => {\r\n    setEdit({ isShow: true, category: record })\r\n  }\r\n\r\n  const handleDelete = record => {\r\n    Modal.confirm({\r\n      title: 'Confirm',\r\n      icon: <DeleteOutlined style={{ color: COLOR.primary1 }} />,\r\n      content: 'Do you confirm to delete this category?',\r\n      okText: 'Confirm',\r\n      cancelText: 'Cancel',\r\n      centered: true,\r\n      okButtonProps: { style: { backgroundColor: COLOR.primary1 } },\r\n      onOk: () => {\r\n        dispatch(DeleteCategory.get(record.id))\r\n        Modal.destroyAll()\r\n      }\r\n    })\r\n  }\r\n\r\n  const categoryColumns = [\r\n    {\r\n      ...getColumnSearchProps(\r\n        'name',\r\n        'Enter title to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Title',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      sorter: (a, b) => a.name.localeCompare(b.name)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'parent',\r\n        'Enter title to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Parent',\r\n      dataIndex: 'parent',\r\n      key: 'parent',\r\n      sorter: (a, b) => a.parent.localeCompare(b.parent)\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <EditOutlined\r\n              style={{ fontSize: 20 }}\r\n              onClick={() => handleEdit(value, record)}\r\n            />\r\n            <DeleteOutlined\r\n              style={{ fontSize: 20, color: '#FF0000' }}\r\n              onClick={() => handleDelete(record)}\r\n            />\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\">Categories</span>\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<PlusCircleOutlined />}\r\n          style={{ width: 200, marginBottom: 32 }}\r\n          onClick={() => onAddNewCategory()}\r\n          size=\"large\"\r\n        >\r\n          Add new category\r\n        </Button>\r\n        <Table columns={categoryColumns} dataSource={realList} />\r\n      </div>\r\n      <AddCategoryModal\r\n        visible={edit.isShow}\r\n        onClose={() => {\r\n          setEdit({ isShow: false, category: null })\r\n        }}\r\n        category={edit.category}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryList\r\n","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\searchInput.js",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\addCategory.jsx",[],"F:\\coursedo.github.io\\src\\components\\Header\\index.jsx",["231","232","233"],"import { UserOutlined } from '@ant-design/icons'\r\nimport { Avatar, Button, Dropdown, Input } from 'antd'\r\nimport { Categories } from 'components/Categories'\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport './header.css'\r\n\r\nconst Search = Input.Search\r\nimport { ROLES } from 'ultis/functions'\r\n\r\nfunction Header(props) {\r\n  const user = useSelector(state => state.Auth.user)\r\n  const categoryList = useSelector(state => state.Dashboard.categoryList)\r\n  const history = useHistory()\r\n  return (\r\n    <div id=\"headerView\">\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          flex: 1,\r\n          justifyContent: 'flex-start',\r\n          alignItems: 'center'\r\n        }}\r\n      >\r\n        <span\r\n          id=\"logoText\"\r\n          onClick={() =>\r\n            history.push({\r\n              pathname: '/',\r\n              state: { from: `/` }\r\n            })\r\n          }\r\n        >\r\n          coursedo\r\n        </span>\r\n        {user?.role !== 1 ? (\r\n          <Dropdown\r\n            overlay={Categories(categoryList)}\r\n            style={{ marginBottom: 30 }}\r\n          >\r\n            <a id=\"categoriesTxt\" className=\"ant-dropdown-link\" href=\"#\">\r\n              Categories\r\n            </a>\r\n          </Dropdown>\r\n        ) : (\r\n          <div />\r\n        )}\r\n      </div>\r\n      {user?.role !== 1 ? (\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            alignItems: 'center',\r\n            justifyContent: 'center'\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              marginLeft: 30,\r\n              marginRight: 30\r\n            }}\r\n          >\r\n            <Search\r\n              id=\"search\"\r\n              placeholder=\"Search for Courses i.e web-development\"\r\n              enterButton=\"Search\"\r\n              size=\"large\"\r\n              onSearch={value => props.onSearch(value)}\r\n            />\r\n          </div>\r\n\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flex: 1,\r\n              justifyContent: 'flex-end',\r\n              marginRight: 60\r\n            }}\r\n          >\r\n            <Button\r\n              shape=\"round\"\r\n              style={{ borderWidth: 0 }}\r\n              id=\"btnTxt\"\r\n              onClick={() =>\r\n                history.push({\r\n                  pathname: '/courses',\r\n                  state: { from: `/` }\r\n                })\r\n              }\r\n            >\r\n              Courses\r\n            </Button>\r\n            <Button\r\n              shape=\"round\"\r\n              style={{ borderWidth: 0 }}\r\n              id=\"btnTxt\"\r\n              onClick={() =>\r\n                history.push({\r\n                  pathname: '/contact',\r\n                  state: { from: `/` }\r\n                })\r\n              }\r\n            >\r\n              Contact Us\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div />\r\n      )}\r\n      {!(props?.from === 'addCourse') && user?.role === ROLES.TEACHER && (\r\n        <Button\r\n          type=\"primary\"\r\n          style={{ borderRadius: 50, marginRight: 24 }}\r\n          onClick={() => history.push('/create')}\r\n        >\r\n          Add new course\r\n        </Button>\r\n      )}\r\n      {user ? (\r\n        user?.avatar ? (\r\n          <Avatar size={48} src={user?.avatar} />\r\n        ) : (\r\n          <Button\r\n            type=\"primary\"\r\n            style={{ borderRadius: 50 }}\r\n            onClick={() =>\r\n              history.push({\r\n                pathname: '/signin',\r\n                state: { from: `/` }\r\n              })\r\n            }\r\n          >\r\n            Sign in\r\n          </Button>\r\n        )\r\n      ) : (\r\n        <div />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","F:\\coursedo.github.io\\src\\components\\Categories\\index.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Home\\constant.js",[],"F:\\coursedo.github.io\\src\\components\\CourseCard\\index.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Home\\components\\swipeComponent.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Home\\components\\discoverBtn.jsx",[],"F:\\coursedo.github.io\\src\\components\\Footer\\index.jsx",["234"],"import React from 'react'\r\nimport logo from 'assets/logo.png'\r\nimport { Layout } from 'antd'\r\nconst { Footer } = Layout\r\n\r\nfunction FooterComponent({ children }) {\r\n  return (\r\n    <Footer style={{ backgroundColor: '#212121' }}>\r\n      <img\r\n        src={logo}\r\n        width=\"100\"\r\n        height=\"100\"\r\n        style={{ objectFit: 'contain' }}\r\n      />\r\n      <p>All Right Reserved | COURSEDO 2021</p>\r\n    </Footer>\r\n  )\r\n}\r\n\r\nexport default FooterComponent\r\n","F:\\coursedo.github.io\\src\\components\\CateCard\\index.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Courses\\index.jsx",["235"],"import { Button, Pagination, Menu, Col, Row, Select } from 'antd'\r\nimport bgPic from 'assets/images/bg.png'\r\nimport Footer from 'components/Footer'\r\nimport Header from 'components/Header'\r\nimport React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { history } from 'ultis/functions'\r\nimport 'pages/Home/home.css'\r\nimport { courses } from 'pages/Home/constant'\r\nimport CourseCard from 'components/CourseCard'\r\nimport { useSelector } from 'react-redux'\r\nconst { Option } = Select\r\nconst { SubMenu } = Menu\r\n\r\nfunction Courses() {\r\n  const dispatch = useDispatch()\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n  const [current, setCurrentPage] = useState(0)\r\n  const categoryList = useSelector(state => state.Dashboard.categoryList)\r\n  const user = useSelector(state => state.Auth.user)\r\n\r\n  const background = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          flex: 1,\r\n          backgroundColor: 'white'\r\n        }}\r\n      >\r\n        {isDesktopOrLaptop && (\r\n          <div id=\"landing\" style={{ backgroundImage: `url(${bgPic})` }}>\r\n            <span id=\"welcomeTxt\">\r\n              Browse Thousands of Our Video Tutorials Curated Only for you.\r\n            </span>\r\n            {user ? (\r\n              <div />\r\n            ) : (\r\n              <Button\r\n                style={{\r\n                  marginTop: '1vw',\r\n                  backgroundColor: 'white',\r\n                  color: '#FFC000'\r\n                }}\r\n                type=\"primary\"\r\n                onClick={() => history.push('/forgot')}\r\n              >\r\n                Join for Free\r\n              </Button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderCourses = () => {\r\n    return (\r\n      <Row gutter={16}>\r\n        {courses.length > 0 ? (\r\n          courses.map(item => {\r\n            return (\r\n              <Col\r\n                span={8}\r\n                xs={24}\r\n                sm={12}\r\n                md={8}\r\n                style={{ marginBlock: '3vh' }}\r\n              >\r\n                <CourseCard\r\n                  img={item.img}\r\n                  title={item.title}\r\n                  teacher={item.teacher}\r\n                  cate={item.category}\r\n                  price={item.price}\r\n                  rating={item.rating}\r\n                  total={item.total}\r\n                />\r\n              </Col>\r\n            )\r\n          })\r\n        ) : (\r\n          <div />\r\n        )}\r\n      </Row>\r\n    )\r\n  }\r\n\r\n  const handleChange = value => {\r\n    console.log(`selected ${value}`)\r\n  }\r\n\r\n  const renderHeader = () => {\r\n    return (\r\n      <Row\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'row',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          flex: 1,\r\n          marginTop: '5vh'\r\n        }}\r\n      >\r\n        <Col>\r\n          <h3 id=\"catTitle\">All Courses</h3>\r\n        </Col>\r\n\r\n        <Col>\r\n          <Select\r\n            defaultValue=\"Sort By\"\r\n            style={{ width: 120 }}\r\n            onChange={handleChange}\r\n          >\r\n            <Option value=\"default\">Sort</Option>\r\n            <Option value=\"ratingDesc\">Rating</Option>\r\n            <Option value=\"priceInc\">Price Increase</Option>\r\n            <Option value=\"priceDecs\">Price Decrease</Option>\r\n          </Select>\r\n        </Col>\r\n      </Row>\r\n    )\r\n  }\r\n\r\n  const renderListCat = () => {\r\n    return (\r\n      <Menu style={{ width: 256 }} mode=\"inline\">\r\n        {categoryList?.length > 0 ? (\r\n          categoryList.map((item, index) => {\r\n            return (\r\n              <SubMenu key={'sub' + index.toString()} title={item.name}>\r\n                {item.subCategory?.length > 0 ? (\r\n                  item.subCategory.map(sub => {\r\n                    return (\r\n                      <Menu.Item key={sub.id.toString()}>{sub.name}</Menu.Item>\r\n                    )\r\n                  })\r\n                ) : (\r\n                  <div />\r\n                )}\r\n              </SubMenu>\r\n            )\r\n          })\r\n        ) : (\r\n          <div />\r\n        )}\r\n      </Menu>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {background()}\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'row',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'flex-start',\r\n          flex: 1,\r\n          backgroundColor: 'white'\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            flex: 1\r\n          }}\r\n        >\r\n          {renderHeader()}\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              flex: 0.7,\r\n              paddingBlock: '3vh',\r\n              paddingLeft: '5vw',\r\n              paddingRight: '5vw'\r\n            }}\r\n          >\r\n            {renderCourses()}\r\n          </div>\r\n          <div\r\n            style={{\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              display: 'flex',\r\n              flex: 1,\r\n              marginBottom: '2vh'\r\n            }}\r\n          >\r\n            <Pagination\r\n              current={current}\r\n              onChange={setCurrentPage}\r\n              total={50}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'flex-start',\r\n            flex: 0.3,\r\n            backgroundColor: 'white',\r\n            paddingBlock: '3vh'\r\n          }}\r\n        >\r\n          {renderListCat()}\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Courses\r\n","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\studentList.jsx",["236"],"import { EyeOutlined, LoadingOutlined } from '@ant-design/icons'\r\nimport { Space, Spin, Table } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { COLOR, ROLES } from 'ultis/functions'\r\nimport { ACCOUNT_STATUS, PAGE } from '../constant'\r\nimport '../dashboard.css'\r\nimport { GetUserProfile, GetUsers, SetCurrentPage } from '../redux/actions'\r\nimport { getColumnSearchProps } from './searchInput'\r\nimport { Tabs } from 'antd'\r\nimport ProfileTab from './profileTab'\r\nimport CoursesTab from './coursesTab'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction StudentList() {\r\n  const userList = useSelector(state => state.Dashboard.userList)\r\n  const isLoading = useSelector(state => state.Dashboard.isLoading)\r\n  const detailPage = useSelector(state => state.Dashboard.detailPage)\r\n  const userDetail = useSelector(state => state.Dashboard.userDetail)\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchColumn] = useState('')\r\n  const refInput = useRef()\r\n  const [filteredInfo, setFilterInfo] = useState(null)\r\n\r\n  useEffect(() => {\r\n    dispatch(GetUsers.get({ role: `${ROLES.STUDENT},${ROLES.NOT_VERIFIED}` }))\r\n  }, [])\r\n\r\n  const handleView = record => {\r\n    dispatch(GetUserProfile.get(record.id))\r\n    dispatch(\r\n      SetCurrentPage.get({\r\n        currentPage: PAGE.STUDENT,\r\n        detailPage: PAGE.PROFILE\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleChange = (pagination, filters, sorter) => {\r\n    setFilterInfo(filters)\r\n  }\r\n\r\n  const userColumns = [\r\n    {\r\n      ...getColumnSearchProps(\r\n        'id',\r\n        'Enter id to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n      sorter: (a, b) => a.id.localeCompare(b.id)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'fullName',\r\n        'Enter name to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Name',\r\n      dataIndex: 'fullName',\r\n      key: 'fullName',\r\n      sorter: (a, b) => a.fullName.localeCompare(b.fullName)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'email',\r\n        'Enter email to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Email',\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n      sorter: (a, b) => a.email.localeCompare(b.email)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'phoneNumber',\r\n        'Enter email to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Phone number',\r\n      dataIndex: 'phoneNumber',\r\n      key: 'phoneNumber',\r\n      sorter: (a, b) => a.phoneNumber.localeCompare(b.phoneNumber)\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'role',\r\n      render: (value, record, index) => {\r\n        switch (value) {\r\n          case ROLES.STUDENT:\r\n            return <span style={{ color: 'green' }}>{'Verified'}</span>\r\n          case ROLES.NOT_VERIFIED:\r\n            return <span style={{ color: 'red' }}>{'Not verified'}</span>\r\n          default:\r\n            return <span />\r\n        }\r\n      },\r\n      filters: ACCOUNT_STATUS,\r\n      filteredValue: filteredInfo ? filteredInfo.name : null,\r\n      onFilter: (value, record) => record.role === value\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <EyeOutlined\r\n              style={{ fontSize: 20 }}\r\n              onClick={() => handleView(record)}\r\n            />\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (detailPage === PAGE.PROFILE) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\" style={{ alignSelf: 'center' }}>\r\n          Profile\r\n        </span>\r\n        <Tabs defaultActiveKey=\"1\" centered>\r\n          <TabPane tab=\"Information\" key=\"1\">\r\n            <ProfileTab user={userDetail} />\r\n          </TabPane>\r\n          <TabPane tab=\"All courses\" key=\"2\">\r\n            <CoursesTab\r\n              courseList={userDetail.enrollment}\r\n              role={ROLES.STUDENT}\r\n            />\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"chooseContainer\">\r\n      <span className=\"titleTopic\">Students</span>\r\n      <Table\r\n        columns={userColumns}\r\n        dataSource={userList}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StudentList\r\n","F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\addTeacher.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\coursesTab.jsx",[],"F:\\coursedo.github.io\\src\\pages\\Dashboard\\component\\profileTab.jsx",[],"F:\\coursedo.github.io\\src\\ultis\\firebaseConfig.js",[],"F:\\coursedo.github.io\\src\\pages\\CreateCourse\\redux\\epics.js",[],"F:\\coursedo.github.io\\src\\pages\\CreateCourse\\redux\\actions.js",[],"F:\\coursedo.github.io\\src\\pages\\CreateCourse\\redux\\reducer.js",[],"F:\\coursedo.github.io\\src\\pages\\CreateCourse\\index.jsx",["237","238"],"F:\\coursedo.github.io\\src\\pages\\CreateCourse\\constant.js",[],{"ruleId":"239","severity":1,"message":"240","line":3,"column":23,"nodeType":"241","messageId":"242","endLine":3,"endColumn":36},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","severity":1,"message":"248","line":24,"column":6,"nodeType":"249","endLine":24,"endColumn":12,"suggestions":"250"},{"ruleId":"239","severity":1,"message":"251","line":2,"column":8,"nodeType":"241","messageId":"242","endLine":2,"endColumn":19},{"ruleId":"239","severity":1,"message":"252","line":4,"column":10,"nodeType":"241","messageId":"242","endLine":4,"endColumn":17},{"ruleId":"239","severity":1,"message":"253","line":7,"column":19,"nodeType":"241","messageId":"242","endLine":7,"endColumn":29},{"ruleId":"239","severity":1,"message":"254","line":16,"column":10,"nodeType":"241","messageId":"242","endLine":16,"endColumn":21},{"ruleId":"247","severity":1,"message":"255","line":25,"column":6,"nodeType":"249","endLine":25,"endColumn":8,"suggestions":"256"},{"ruleId":"247","severity":1,"message":"248","line":25,"column":6,"nodeType":"249","endLine":25,"endColumn":12,"suggestions":"257"},{"ruleId":"258","severity":1,"message":"259","line":133,"column":21,"nodeType":"260","endLine":133,"endColumn":36},{"ruleId":"247","severity":1,"message":"261","line":15,"column":6,"nodeType":"249","endLine":15,"endColumn":8,"suggestions":"262"},{"ruleId":"247","severity":1,"message":"263","line":26,"column":6,"nodeType":"249","endLine":26,"endColumn":12,"suggestions":"264"},{"ruleId":"247","severity":1,"message":"248","line":33,"column":6,"nodeType":"249","endLine":33,"endColumn":12,"suggestions":"265"},{"ruleId":"247","severity":1,"message":"248","line":33,"column":6,"nodeType":"249","endLine":33,"endColumn":12,"suggestions":"266"},{"ruleId":"258","severity":1,"message":"259","line":116,"column":21,"nodeType":"260","endLine":116,"endColumn":36},{"ruleId":"239","severity":1,"message":"267","line":20,"column":9,"nodeType":"241","messageId":"242","endLine":20,"endColumn":17},{"ruleId":"239","severity":1,"message":"268","line":43,"column":10,"nodeType":"241","messageId":"242","endLine":43,"endColumn":14},{"ruleId":"239","severity":1,"message":"267","line":20,"column":9,"nodeType":"241","messageId":"242","endLine":20,"endColumn":17},{"ruleId":"239","severity":1,"message":"268","line":43,"column":10,"nodeType":"241","messageId":"242","endLine":43,"endColumn":14},{"ruleId":"247","severity":1,"message":"255","line":50,"column":6,"nodeType":"249","endLine":50,"endColumn":8,"suggestions":"269"},{"ruleId":"239","severity":1,"message":"270","line":1,"column":10,"nodeType":"241","messageId":"242","endLine":1,"endColumn":22},{"ruleId":"271","severity":2,"message":"272","line":10,"column":1,"nodeType":"273","endLine":10,"endColumn":40,"fix":"274"},{"ruleId":"275","severity":1,"message":"276","line":42,"column":13,"nodeType":"277","endLine":42,"endColumn":74},{"ruleId":"278","severity":1,"message":"279","line":9,"column":7,"nodeType":"277","endLine":14,"endColumn":9},{"ruleId":"239","severity":1,"message":"267","line":17,"column":9,"nodeType":"241","messageId":"242","endLine":17,"endColumn":17},{"ruleId":"247","severity":1,"message":"255","line":33,"column":6,"nodeType":"249","endLine":33,"endColumn":8,"suggestions":"280"},{"ruleId":"247","severity":1,"message":"281","line":66,"column":6,"nodeType":"249","endLine":66,"endColumn":8,"suggestions":"282"},{"ruleId":"239","severity":1,"message":"283","line":81,"column":9,"nodeType":"241","messageId":"242","endLine":81,"endColumn":24},"no-unused-vars","'ModalProvider' is defined but never used.","Identifier","unusedVar","no-native-reassign",["284"],"no-negated-in-lhs",["285"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["286"],"'GlobalModal' is defined but never used.","'SignOut' is defined but never used.","'MODAL_TYPE' is defined but never used.","'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["287"],["288"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'dispatch' and 'token'. Either include them or remove the dependency array.",["289"],"React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["290"],["291"],["292"],"'dispatch' is assigned a value but never used.","'edit' is assigned a value but never used.",["293"],"'UserOutlined' is defined but never used.","import/first","Import in body of module; reorder to top.","ImportDeclaration",{"range":"294","text":"295"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["296"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'user'. Either include them or remove the dependency array.",["297"],"'handleUploadImg' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"298","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"298","fix":"307"},{"desc":"298","fix":"308"},{"desc":"300","fix":"309"},[0,368],"import { UserOutlined } from '@ant-design/icons'\r\nimport { Avatar, Button, Dropdown, Input } from 'antd'\r\nimport { Categories } from 'components/Categories'\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport './header.css'\r\nimport { ROLES } from 'ultis/functions'\r\n\r\nconst Search = Input.Search",{"desc":"300","fix":"310"},{"desc":"311","fix":"312"},"Update the dependencies array to be: [history, user]",{"range":"313","text":"314"},"Update the dependencies array to be: [dispatch]",{"range":"315","text":"316"},{"range":"317","text":"314"},"Update the dependencies array to be: [dispatch, token]",{"range":"318","text":"319"},"Update the dependencies array to be: [history, token, user]",{"range":"320","text":"321"},{"range":"322","text":"314"},{"range":"323","text":"314"},{"range":"324","text":"316"},{"range":"325","text":"316"},"Update the dependencies array to be: [dispatch, history, user]",{"range":"326","text":"327"},[820,826],"[history, user]",[928,930],"[dispatch]",[844,850],[448,450],"[dispatch, token]",[902,908],"[history, token, user]",[1205,1211],[1025,1031],[1580,1582],[1365,1367],[2178,2180],"[dispatch, history, user]"]