[{"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\index.js":"1","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\App.js":"2","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\reportWebVitals.js":"3","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\core\\store.js":"4","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\ultis\\functions.js":"5","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\core\\epic.js":"6","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\core\\reducer.js":"7","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\SignIn\\index.jsx":"8","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Home\\index.jsx":"9","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\SignUp\\index.jsx":"10","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\SignIn\\redux\\epics.js":"11","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\SignIn\\redux\\reducer.js":"12","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\SignIn\\redux\\actions.js":"13","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\ultis\\api.js":"14","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\components\\GlobalModal\\index.js":"15","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\components\\CInput\\index.jsx":"16","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\ForgotPassword\\index.jsx":"17","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\components\\Header\\index.jsx":"18","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\CreatePassword\\index.jsx":"19","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\VerifyEmail\\index.jsx":"20","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\index.jsx":"21","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\constant.js":"22","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\redux\\actions.js":"23","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\categoryList.jsx":"24","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\teacherList.jsx":"25","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\coursesList.jsx":"26","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\searchInput.js":"27","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\redux\\epics.js":"28","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\redux\\reducer.js":"29","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\addCategory.jsx":"30","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\addTeacher.jsx":"31","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\ultis\\firebaseConfig.js":"32","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\studentList.jsx":"33","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\profileTab.jsx":"34","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\coursesTab.jsx":"35","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\CreateCourse\\index.jsx":"36","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\CreateCourse\\constant.js":"37","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\CreateCourse\\redux\\reducer.js":"38","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\CreateCourse\\redux\\epics.js":"39","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\CreateCourse\\redux\\actions.js":"40"},{"size":1190,"mtime":1610194528064,"results":"41","hashOfConfig":"42"},{"size":1009,"mtime":1610252810729,"results":"43","hashOfConfig":"42"},{"size":375,"mtime":1607629974841,"results":"44","hashOfConfig":"42"},{"size":1047,"mtime":1598279743963,"results":"45","hashOfConfig":"42"},{"size":902,"mtime":1610264628250,"results":"46","hashOfConfig":"42"},{"size":307,"mtime":1610263073322,"results":"47","hashOfConfig":"42"},{"size":496,"mtime":1610263063629,"results":"48","hashOfConfig":"42"},{"size":5201,"mtime":1610180666079,"results":"49","hashOfConfig":"42"},{"size":1112,"mtime":1609693462867,"results":"50","hashOfConfig":"42"},{"size":6074,"mtime":1610009495492,"results":"51","hashOfConfig":"42"},{"size":5111,"mtime":1610201457242,"results":"52","hashOfConfig":"42"},{"size":528,"mtime":1609692535516,"results":"53","hashOfConfig":"42"},{"size":1185,"mtime":1610015032969,"results":"54","hashOfConfig":"42"},{"size":1806,"mtime":1598279584112,"results":"55","hashOfConfig":"42"},{"size":2342,"mtime":1609780499882,"results":"56","hashOfConfig":"42"},{"size":333,"mtime":1609781395260,"results":"57","hashOfConfig":"42"},{"size":3965,"mtime":1609991217720,"results":"58","hashOfConfig":"42"},{"size":1375,"mtime":1610249673711,"results":"59","hashOfConfig":"42"},{"size":4565,"mtime":1609991545792,"results":"60","hashOfConfig":"42"},{"size":648,"mtime":1610015872625,"results":"61","hashOfConfig":"42"},{"size":4105,"mtime":1610228820116,"results":"62","hashOfConfig":"42"},{"size":277,"mtime":1610205404114,"results":"63","hashOfConfig":"42"},{"size":1432,"mtime":1610205584177,"results":"64","hashOfConfig":"42"},{"size":4302,"mtime":1610187203968,"results":"65","hashOfConfig":"42"},{"size":4736,"mtime":1610229031201,"results":"66","hashOfConfig":"42"},{"size":3743,"mtime":1610187245895,"results":"67","hashOfConfig":"42"},{"size":2787,"mtime":1610186628475,"results":"68","hashOfConfig":"42"},{"size":4650,"mtime":1610205668785,"results":"69","hashOfConfig":"42"},{"size":1688,"mtime":1610205752726,"results":"70","hashOfConfig":"42"},{"size":4116,"mtime":1610190828162,"results":"71","hashOfConfig":"42"},{"size":8174,"mtime":1610201151180,"results":"72","hashOfConfig":"42"},{"size":523,"mtime":1610195803589,"results":"73","hashOfConfig":"42"},{"size":5031,"mtime":1610228051270,"results":"74","hashOfConfig":"42"},{"size":1340,"mtime":1610228427160,"results":"75","hashOfConfig":"42"},{"size":3124,"mtime":1610227833237,"results":"76","hashOfConfig":"42"},{"size":16667,"mtime":1610264672662,"results":"77","hashOfConfig":"42"},{"size":970,"mtime":1610255242608,"results":"78","hashOfConfig":"42"},{"size":285,"mtime":1610262890671,"results":"79","hashOfConfig":"42"},{"size":1218,"mtime":1610264350311,"results":"80","hashOfConfig":"42"},{"size":249,"mtime":1610262978806,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1unttm2",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"84"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"84"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"84"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\index.js",[],["173","174"],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\App.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\reportWebVitals.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\core\\store.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\ultis\\functions.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\core\\epic.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\core\\reducer.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\SignIn\\index.jsx",["175","176"],"import { Button } from 'antd'\r\nimport signinPic from 'assets/images/signin.png'\r\nimport logo from 'assets/logo.png'\r\nimport CInput from 'components/CInput'\r\nimport { Form, Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { ROLES } from 'ultis/functions'\r\nimport * as yup from 'yup'\r\nimport { SignInRequest } from './redux/actions'\r\nimport './signin.css'\r\n\r\nfunction SignIn() {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth?.user)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      if (user.role === ROLES.ADMIN) {\r\n        history.replace('/admin')\r\n      } else {\r\n        if (history.location.state) {\r\n          history.goBack()\r\n        } else {\r\n          history.replace('/')\r\n        }\r\n      }\r\n    }\r\n  }, [user])\r\n\r\n  const validationSchema = yup.object().shape({\r\n    password: yup\r\n      .string()\r\n      .required('* Please input password')\r\n      .min(8, 'Password must include at least 8 characters')\r\n      .max(48, 'Password must include at most 48 characters')\r\n      .matches(/(?=.{8,})/, {\r\n        message: 'Password must include at least 8 characters'\r\n      }),\r\n    email: yup\r\n      .string()\r\n      .trim()\r\n      .max(48, 'Email must have at most 48 characters')\r\n      .label('Email')\r\n      .email('Invalid email')\r\n      .required('* Please input email')\r\n  })\r\n\r\n  const handleLogin = values => {\r\n    dispatch(\r\n      SignInRequest.get({ ...values, email: values.email.toLowerCase() })\r\n    )\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleLogin(values)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"bg\">\r\n      <div id=\"loginBg\">\r\n        <a href=\"/\" style={{ textDecoration: 'none', color: 'white' }}>\r\n          <img src={logo} alt=\"signin\" width={100} />\r\n        </a>\r\n        <div id=\"loginBox\">\r\n          <Formik\r\n            initialValues={{\r\n              password: '',\r\n              email: ''\r\n            }}\r\n            isInitialValid={false}\r\n            validationSchema={validationSchema}\r\n            onSubmit={values => handleLogin(values)}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              values,\r\n              isValid,\r\n              errors,\r\n              touched,\r\n              setFieldTouched\r\n            }) => {\r\n              return (\r\n                <Form className=\"formStyle\">\r\n                  <span id=\"loginStyle\">\r\n                    Sign in to your account to continue\r\n                  </span>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.email}\r\n                    onChange={handleChange('email')}\r\n                    onTouchStart={() => setFieldTouched('email')}\r\n                    onBlur={handleBlur('email')}\r\n                    placeholder=\"Email\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.email}\r\n                  />\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    type=\"password\"\r\n                    onChange={handleChange('password')}\r\n                    onTouchStart={() => setFieldTouched('password')}\r\n                    value={values.password}\r\n                    onBlur={handleBlur('password')}\r\n                    placeholder=\"Password\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.password}\r\n                    type=\"password\"\r\n                  />\r\n                  <div className=\"buttomBox\">\r\n                    <Button\r\n                      style={{ padding: 0 }}\r\n                      color=\"primary\"\r\n                      type=\"link\"\r\n                      onClick={() => history.push('/forgot')}\r\n                    >\r\n                      Forgot password?\r\n                    </Button>\r\n                    <div>\r\n                      <span>Don’t have an account? </span>\r\n                      <Button\r\n                        style={{ padding: 0 }}\r\n                        color=\"primary\"\r\n                        type=\"link\"\r\n                        onClick={() => history.push('/signup')}\r\n                      >\r\n                        Sign up\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                  <Button\r\n                    id=\"loginBtn\"\r\n                    disabled={!isValid}\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Sign in\r\n                  </Button>\r\n                </Form>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      {isDesktopOrLaptop && (\r\n        <div id=\"imgBg\" style={{ backgroundImage: `url(${signinPic})` }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignIn\r\n","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Home\\index.jsx",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\SignUp\\index.jsx",["177","178"],"import { Button } from 'antd'\r\nimport CInput from 'components/CInput'\r\nimport { Form, Formik } from 'formik'\r\nimport { SignUpRequest } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { ROLES } from 'ultis/functions'\r\nimport * as yup from 'yup'\r\nimport '../SignIn/signin.css'\r\nimport signupPic from 'assets/images/signup.png'\r\nimport logo from 'assets/logo.png'\r\n\r\nfunction SignUp() {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth?.user)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  const validationSchema = yup.object().shape({\r\n    email: yup\r\n      .string()\r\n      .trim()\r\n      .max(48, 'Email must have at most 48 characters')\r\n      .label('Email')\r\n      .email('Invalid email')\r\n      .required('* Please input email'),\r\n    password: yup\r\n      .string()\r\n      .required('* Please input password')\r\n      .min(8, 'Password must include at least 8 characters')\r\n      .max(48, 'Password must include at most 48 characters')\r\n      .matches(/(?=.{8,})/, {\r\n        message: 'Password must include at least 8 characters'\r\n      }),\r\n    fullName: yup\r\n      .string()\r\n      .trim()\r\n      .required('* Please input password')\r\n      .min(3, 'Full name must include at least 3 characters')\r\n      .max(64, 'Full name must include at most 48 characters')\r\n      .matches(\r\n        /[^a-z0-9A-Z_ÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼỀỀỂưăạảấầẩẫậắằẳẵặẹẻẽềềểỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợụủứừỬỮỰỲỴÝỶỸửữựỳỵỷỹ]/u,\r\n        {\r\n          message: 'Invalid full name'\r\n        }\r\n      )\r\n  })\r\n\r\n  const handleSignup = values => {\r\n    dispatch(\r\n      SignUpRequest.get({\r\n        ...values,\r\n        email: values.email.toLowerCase(),\r\n        role: ROLES.NOT_VERIFIED\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleSignup(values)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"bg\">\r\n      <div id=\"loginBg\">\r\n        <a href=\"/\" style={{ textDecoration: 'none', color: 'white' }}>\r\n          <img src={logo} alt=\"signup\" width={100} />\r\n        </a>\r\n        <div id=\"loginBox\">\r\n          <Formik\r\n            initialValues={{\r\n              email: '',\r\n              password: '',\r\n              fullName: ''\r\n            }}\r\n            isInitialValid={false}\r\n            validationSchema={validationSchema}\r\n            onSubmit={values => handleSignup(values)}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              values,\r\n              isValid,\r\n              errors,\r\n              touched,\r\n              setFieldTouched\r\n            }) => {\r\n              return (\r\n                <Form className=\"formStyle\">\r\n                  <span id=\"loginStyle\">Please create a new account here</span>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.fullName}\r\n                    onChange={handleChange('fullName')}\r\n                    onTouchStart={() => setFieldTouched('fullName')}\r\n                    onBlur={handleBlur('fullName')}\r\n                    placeholder=\"Full name\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.fullName}\r\n                  />\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.email}\r\n                    onChange={handleChange('email')}\r\n                    onTouchStart={() => setFieldTouched('email')}\r\n                    onBlur={handleBlur('email')}\r\n                    placeholder=\"Email\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.email}\r\n                  />\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    type=\"password\"\r\n                    onChange={handleChange('password')}\r\n                    onTouchStart={() => setFieldTouched('password')}\r\n                    value={values.password}\r\n                    onBlur={handleBlur('password')}\r\n                    placeholder=\"Password\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.password}\r\n                    type=\"password\"\r\n                  />\r\n                  <div style={{ alignSelf: 'flex-end', marginBottom: 34 }}>\r\n                    <span>Already have an account? </span>\r\n                    <Button\r\n                      style={{ padding: 0 }}\r\n                      color=\"primary\"\r\n                      type=\"link\"\r\n                      onClick={() =>\r\n                        history.push({\r\n                          pathname: '/signin',\r\n                          state: { from: `/signup` }\r\n                        })\r\n                      }\r\n                    >\r\n                      Sign in\r\n                    </Button>\r\n                  </div>\r\n                  <Button\r\n                    id=\"loginBtn\"\r\n                    disabled={!isValid}\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Sign up\r\n                  </Button>\r\n                </Form>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      {isDesktopOrLaptop && (\r\n        <div id=\"imgBg\" style={{ backgroundImage: `url(${signupPic})` }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignUp\r\n","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\SignIn\\redux\\epics.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\SignIn\\redux\\reducer.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\SignIn\\redux\\actions.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\ultis\\api.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\components\\GlobalModal\\index.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\components\\CInput\\index.jsx",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\ForgotPassword\\index.jsx",["179"],"import { Button } from 'antd'\r\nimport CInput from 'components/CInput'\r\nimport { Form, Formik } from 'formik'\r\nimport { ResetPassword } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory } from 'react-router-dom'\r\nimport * as yup from 'yup'\r\nimport '../SignIn/signin.css'\r\nimport forgotPic from 'assets/images/forgot_password.jpg'\r\nimport logo from 'assets/logo.png'\r\n\r\nfunction ForgotPassword() {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth?.user)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  const validationSchema = yup.object().shape({\r\n    email: yup\r\n      .string()\r\n      .trim()\r\n      .max(48, 'Email must have at most 48 characters')\r\n      .label('Email')\r\n      .email('Invalid email')\r\n      .required('* Please input email')\r\n  })\r\n\r\n  const handleForgot = values => {\r\n    dispatch(\r\n      ResetPassword.get({\r\n        ...values,\r\n        email: values.email.toLowerCase()\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleForgot(values)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"bg\">\r\n      <div id=\"loginBg\">\r\n        <a href=\"/\" style={{ textDecoration: 'none', color: 'white' }}>\r\n          <img src={logo} alt=\"forgot\" width={100} />\r\n        </a>\r\n        <div id=\"loginBox\">\r\n          <Formik\r\n            initialValues={{\r\n              email: ''\r\n            }}\r\n            isInitialValid={false}\r\n            validationSchema={validationSchema}\r\n            onSubmit={values => handleForgot(values)}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              values,\r\n              isValid,\r\n              errors,\r\n              touched,\r\n              setFieldTouched\r\n            }) => {\r\n              return (\r\n                <Form className=\"formStyle\">\r\n                  <span id=\"loginStyle\">\r\n                    Ok let’s fetch you ya’ login details\r\n                  </span>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.email}\r\n                    onChange={handleChange('email')}\r\n                    onTouchStart={() => setFieldTouched('email')}\r\n                    onBlur={handleBlur('email')}\r\n                    placeholder=\"Email\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.email}\r\n                  />\r\n                  <div style={{ alignSelf: 'flex-end', marginBottom: 34 }}>\r\n                    <span>Already have an account? </span>\r\n                    <Button\r\n                      style={{ padding: 0 }}\r\n                      color=\"primary\"\r\n                      type=\"link\"\r\n                      onClick={() =>\r\n                        history.push({\r\n                          pathname: '/signin',\r\n                          state: { from: `/forgot` }\r\n                        })\r\n                      }\r\n                    >\r\n                      Back to Sign Up\r\n                    </Button>\r\n                  </div>\r\n                  <Button\r\n                    id=\"loginBtn\"\r\n                    disabled={!isValid}\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Proceed\r\n                  </Button>\r\n                </Form>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      {isDesktopOrLaptop && (\r\n        <div id=\"imgBg\" style={{ backgroundImage: `url(${forgotPic})` }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ForgotPassword\r\n","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\components\\Header\\index.jsx",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\CreatePassword\\index.jsx",["180"],"import { Button } from 'antd'\r\nimport CInput from 'components/CInput'\r\nimport { Form, Formik } from 'formik'\r\nimport { CreatePassword } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport * as yup from 'yup'\r\nimport '../SignIn/signin.css'\r\nimport forgotPic from 'assets/images/forgot_password.jpg'\r\nimport logo from 'assets/logo.png'\r\n\r\nfunction CreatePasswordPage() {\r\n  const param = useParams()\r\n  const { token } = param\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth?.user)\r\n  const isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1224 })\r\n\r\n  useEffect(() => {\r\n    if (user || !token) {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  const validationSchema = yup.object().shape({\r\n    password: yup\r\n      .string()\r\n      .required('* Please input password')\r\n      .min(8, 'Password must include at least 8 characters')\r\n      .max(48, 'Password must include at most 48 characters')\r\n      .matches(/(?=.{8,})/, {\r\n        message: 'Password must include at least 8 characters'\r\n      }),\r\n    confirm: yup\r\n      .string()\r\n      .required('* Please input password')\r\n      .min(8, 'Password must include at least 8 characters')\r\n      .max(48, 'Password must include at most 48 characters')\r\n      .matches(/(?=.{8,})/, {\r\n        message: 'Password must include at least 8 characters'\r\n      })\r\n      .oneOf(\r\n        [yup.ref('password'), null],\r\n        'Confirm password must be the same as password'\r\n      )\r\n  })\r\n\r\n  const handleCreate = values => {\r\n    dispatch(\r\n      CreatePassword.get({\r\n        password: values.password,\r\n        token: token\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleKeyPress = (isValid, event, values) => {\r\n    if (isValid && event.key === 'Enter') {\r\n      handleCreate(values)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"bg\">\r\n      <div id=\"loginBg\">\r\n        <a href=\"/\" style={{ textDecoration: 'none', color: 'white' }}>\r\n          <img src={logo} alt=\"logo\" width={100} />\r\n        </a>\r\n        <div id=\"loginBox\">\r\n          <Formik\r\n            initialValues={{\r\n              password: '',\r\n              confirm: ''\r\n            }}\r\n            isInitialValid={false}\r\n            validationSchema={validationSchema}\r\n            onSubmit={values => handleCreate(values)}\r\n          >\r\n            {({\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              values,\r\n              isValid,\r\n              errors,\r\n              touched,\r\n              setFieldTouched\r\n            }) => {\r\n              return (\r\n                <Form className=\"formStyle\">\r\n                  <span id=\"loginStyle\">Input new password to continue</span>\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.password}\r\n                    onChange={handleChange('password')}\r\n                    onTouchStart={() => setFieldTouched('password')}\r\n                    onBlur={handleBlur('password')}\r\n                    placeholder=\"New password\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.password}\r\n                    type=\"password\"\r\n                  />\r\n                  <CInput\r\n                    className=\"inputBox\"\r\n                    value={values.confirm}\r\n                    onChange={handleChange('confirm')}\r\n                    onTouchStart={() => setFieldTouched('confirm')}\r\n                    onBlur={handleBlur('confirm')}\r\n                    placeholder=\"Confirm password\"\r\n                    onKeyPress={event => handleKeyPress(isValid, event, values)}\r\n                    error={errors.confirm}\r\n                    type=\"password\"\r\n                  />\r\n                  <Button\r\n                    style={{ marginTop: 24 }}\r\n                    id=\"loginBtn\"\r\n                    disabled={!isValid}\r\n                    type=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Reset password\r\n                  </Button>\r\n                </Form>\r\n              )\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      {isDesktopOrLaptop && (\r\n        <div id=\"imgBg\" style={{ backgroundImage: `url(${forgotPic})` }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreatePasswordPage\r\n","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\VerifyEmail\\index.jsx",["181"],"import { Space, Spin } from 'antd'\r\nimport { VerifyEmail } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport '../SignIn/signin.css'\r\n\r\nfunction VerifyEmailPage() {\r\n  const param = useParams()\r\n  const { token } = param\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(VerifyEmail.get({ token }))\r\n  }, [])\r\n\r\n  return (\r\n    <Space\r\n      style={{ display: 'flex', justifyContent: 'center', paddingTop: 48 }}\r\n    >\r\n      <Spin size=\"large\" />\r\n    </Space>\r\n  )\r\n}\r\n\r\nexport default VerifyEmailPage\r\n","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\index.jsx",["182"],"import { LoadingOutlined, UserOutlined } from '@ant-design/icons'\r\nimport { Avatar, Button, Menu, Spin } from 'antd'\r\nimport { SignOut } from 'pages/SignIn/redux/actions'\r\nimport React, { useEffect } from 'react'\r\nimport { FaChalkboardTeacher } from 'react-icons/fa'\r\nimport { FiBookOpen, FiGrid, FiUsers } from 'react-icons/fi'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { COLOR, ROLES } from 'ultis/functions'\r\nimport CategoryList from './component/categoryList'\r\nimport CoursesList from './component/coursesList'\r\nimport StudentList from './component/studentList'\r\nimport TeacherList from './component/teacherList'\r\nimport { PAGE } from './constant'\r\nimport './dashboard.css'\r\nimport { SetCurrentPage } from './redux/actions'\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction Dashboard() {\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(state => state.Auth.user)\r\n  const isLoadingDashboard = useSelector(\r\n    state => state.Dashboard.isLoadingDashboard\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!user || user?.role !== ROLES.ADMIN) {\r\n      history.replace('/')\r\n    }\r\n  }, [user])\r\n\r\n  const currentPage = useSelector(state => state.Dashboard.currentPage)\r\n\r\n  const onMenuSelect = e => {\r\n    dispatch(SetCurrentPage.get({ currentPage: e.key }))\r\n  }\r\n\r\n  const handleSignOut = () => {\r\n    dispatch(SignOut.get())\r\n    history.replace('/')\r\n  }\r\n\r\n  const renderRightDashboard = () => {\r\n    switch (currentPage) {\r\n      case PAGE.CATEGORY:\r\n        return <CategoryList />\r\n      case PAGE.COURSE:\r\n        return <CoursesList />\r\n      case PAGE.TEACHER:\r\n        return <TeacherList />\r\n      case PAGE.STUDENT:\r\n        return <StudentList />\r\n      default:\r\n        return <CategoryList />\r\n    }\r\n  }\r\n\r\n  if (isLoadingDashboard || !user || user.role !== ROLES.ADMIN) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div id=\"dashboardBg\">\r\n      <div id=\"menuContainer\">\r\n        {user?.avatar ? (\r\n          <Avatar size={100} src={user?.avatar} />\r\n        ) : (\r\n          <Avatar size={100} icon={<UserOutlined />} />\r\n        )}\r\n        <span id=\"adminName\">{user.fullName ? user.fullName : 'Admin'}</span>\r\n        <Menu\r\n          defaultSelectedKeys={[PAGE.CATEGORY]}\r\n          selectedKeys={[currentPage]}\r\n          mode=\"inline\"\r\n          onClick={onMenuSelect}\r\n          style={{ backgroundColor: COLOR.primary1 }}\r\n        >\r\n          <Menu.Item\r\n            style={{ color: 'white' }}\r\n            className=\"customItem\"\r\n            key={PAGE.CATEGORY}\r\n            icon={<FiGrid size={16} style={{ marginRight: 8 }} />}\r\n          >\r\n            Categories\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            style={{ color: 'white' }}\r\n            className=\"customItem\"\r\n            key={PAGE.COURSE}\r\n            icon={<FiBookOpen size={16} style={{ marginRight: 8 }} />}\r\n          >\r\n            Courses\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            style={{ color: 'white' }}\r\n            className=\"customItem\"\r\n            key={PAGE.TEACHER}\r\n            icon={<FaChalkboardTeacher size={14} style={{ marginRight: 8 }} />}\r\n          >\r\n            Teachers\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            style={{ color: 'white' }}\r\n            className=\"customItem\"\r\n            key={PAGE.STUDENT}\r\n            icon={<FiUsers size={16} style={{ marginRight: 8 }} />}\r\n          >\r\n            Students\r\n          </Menu.Item>\r\n        </Menu>\r\n        <Button\r\n          type=\"ghost\"\r\n          style={{\r\n            width: '80%',\r\n            marginTop: 64,\r\n            borderColor: 'white',\r\n            borderRadius: 8,\r\n            color: 'white'\r\n          }}\r\n          onClick={() => handleSignOut()}\r\n        >\r\n          Log out\r\n        </Button>\r\n      </div>\r\n      {renderRightDashboard()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\constant.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\redux\\actions.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\categoryList.jsx",["183"],"import {\r\n  DeleteOutlined,\r\n  EditOutlined,\r\n  LoadingOutlined,\r\n  PlusCircleOutlined\r\n} from '@ant-design/icons'\r\nimport { Button, Modal, Space, Spin, Table } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { COLOR } from 'ultis/functions'\r\nimport '../dashboard.css'\r\nimport { DeleteCategory, GetAllCategories } from '../redux/actions'\r\nimport AddCategoryModal from './addCategory'\r\nimport { getColumnSearchProps } from './searchInput'\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction CategoryList() {\r\n  const categoryList = useSelector(state => state.Dashboard.categoryList)\r\n  const isLoading = useSelector(state => state.Dashboard.isLoading)\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchColumn] = useState('')\r\n  const refInput = useRef()\r\n  let realList = []\r\n  categoryList.forEach(item => {\r\n    realList.push({\r\n      name: item.name,\r\n      parent: null,\r\n      id: item.id,\r\n      parentId: item.parentId\r\n    })\r\n    item?.subCategory &&\r\n      item?.subCategory.length > 0 &&\r\n      item?.subCategory.forEach(subCat => {\r\n        realList.push({\r\n          name: subCat.name,\r\n          parent: item.name,\r\n          id: subCat.id,\r\n          parentId: subCat.parentId\r\n        })\r\n      })\r\n  })\r\n  const [edit, setEdit] = useState({ isShow: false, category: null })\r\n\r\n  useEffect(() => {\r\n    dispatch(GetAllCategories.get())\r\n  }, [])\r\n\r\n  const onAddNewCategory = () => {\r\n    setEdit({ isShow: true, category: null })\r\n  }\r\n\r\n  const handleEdit = (value, record) => {\r\n    setEdit({ isShow: true, category: record })\r\n  }\r\n\r\n  const handleDelete = record => {\r\n    Modal.confirm({\r\n      title: 'Confirm',\r\n      icon: <DeleteOutlined style={{ color: COLOR.primary1 }} />,\r\n      content: 'Do you confirm to delete this category?',\r\n      okText: 'Confirm',\r\n      cancelText: 'Cancel',\r\n      centered: true,\r\n      okButtonProps: { style: { backgroundColor: COLOR.primary1 } },\r\n      onOk: () => {\r\n        dispatch(DeleteCategory.get(record.id))\r\n        Modal.destroyAll()\r\n      }\r\n    })\r\n  }\r\n\r\n  const categoryColumns = [\r\n    {\r\n      ...getColumnSearchProps(\r\n        'name',\r\n        'Enter title to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Title',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      sorter: (a, b) => a.name.localeCompare(b.name)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'parent',\r\n        'Enter title to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Parent',\r\n      dataIndex: 'parent',\r\n      key: 'parent',\r\n      sorter: (a, b) => a.parent.localeCompare(b.parent)\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <EditOutlined\r\n              style={{ fontSize: 20 }}\r\n              onClick={() => handleEdit(value, record)}\r\n            />\r\n            <DeleteOutlined\r\n              style={{ fontSize: 20, color: '#FF0000' }}\r\n              onClick={() => handleDelete(record)}\r\n            />\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\">Categories</span>\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<PlusCircleOutlined />}\r\n          style={{ width: 200, marginBottom: 32 }}\r\n          onClick={() => onAddNewCategory()}\r\n          size=\"large\"\r\n        >\r\n          Add new category\r\n        </Button>\r\n        <Table columns={categoryColumns} dataSource={realList} />\r\n      </div>\r\n      <AddCategoryModal\r\n        visible={edit.isShow}\r\n        onClose={() => {\r\n          setEdit({ isShow: false, category: null })\r\n        }}\r\n        category={edit.category}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CategoryList\r\n","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\teacherList.jsx",["184"],"import {\r\n  EyeOutlined,\r\n  LoadingOutlined,\r\n  PlusCircleOutlined\r\n} from '@ant-design/icons'\r\nimport { Button, Space, Spin, Table, Tabs } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { COLOR, ROLES } from 'ultis/functions'\r\nimport { PAGE } from '../constant'\r\nimport '../dashboard.css'\r\nimport { GetUserProfile, GetUsers, SetCurrentPage } from '../redux/actions'\r\nimport AddTeacherModal from './addTeacher'\r\nimport CoursesTab from './coursesTab'\r\nimport ProfileTab from './profileTab'\r\nimport { getColumnSearchProps } from './searchInput'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction TeacherList() {\r\n  const userList = useSelector(state => state.Dashboard.userList)\r\n  const isLoading = useSelector(state => state.Dashboard.isLoading)\r\n  const detailPage = useSelector(state => state.Dashboard.detailPage)\r\n  const userDetail = useSelector(state => state.Dashboard.userDetail)\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchColumn] = useState('')\r\n  const refInput = useRef()\r\n\r\n  const [edit, setEdit] = useState(false)\r\n\r\n  useEffect(() => {\r\n    dispatch(GetUsers.get({ role: ROLES.TEACHER }))\r\n  }, [])\r\n\r\n  const onAddNewTeacher = () => {\r\n    setEdit(true)\r\n  }\r\n\r\n  const handleView = record => {\r\n    dispatch(GetUserProfile.get(record.id))\r\n    dispatch(\r\n      SetCurrentPage.get({\r\n        currentPage: PAGE.TEACHER,\r\n        detailPage: PAGE.PROFILE\r\n      })\r\n    )\r\n  }\r\n\r\n  const userColumns = [\r\n    {\r\n      ...getColumnSearchProps(\r\n        'id',\r\n        'Enter id to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n      sorter: (a, b) => a.id.localeCompare(b.id)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'fullName',\r\n        'Enter name to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Name',\r\n      dataIndex: 'fullName',\r\n      key: 'fullName',\r\n      sorter: (a, b) => a.fullName.localeCompare(b.fullName)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'email',\r\n        'Enter email to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Email',\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n      sorter: (a, b) => a.email.localeCompare(b.email)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'phoneNumber',\r\n        'Enter email to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Phone number',\r\n      dataIndex: 'phoneNumber',\r\n      key: 'phoneNumber',\r\n      sorter: (a, b) => a.phoneNumber.localeCompare(b.phoneNumber)\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <EyeOutlined\r\n              style={{ fontSize: 20 }}\r\n              onClick={() => handleView(record)}\r\n            />\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (detailPage === PAGE.PROFILE) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\" style={{ alignSelf: 'center' }}>\r\n          Profile\r\n        </span>\r\n        <Tabs defaultActiveKey=\"1\" centered>\r\n          <TabPane tab=\"Information\" key=\"1\">\r\n            <ProfileTab user={userDetail} />\r\n          </TabPane>\r\n          <TabPane tab=\"All courses\" key=\"2\">\r\n            <CoursesTab courseList={userDetail.courses} role={ROLES.TEACHER} />\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\">Teachers</span>\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<PlusCircleOutlined />}\r\n          style={{ width: 200, marginBottom: 32 }}\r\n          onClick={() => onAddNewTeacher()}\r\n          size=\"large\"\r\n        >\r\n          Add new teacher\r\n        </Button>\r\n        <Table columns={userColumns} dataSource={userList} />\r\n      </div>\r\n      <AddTeacherModal\r\n        visible={edit}\r\n        onClose={() => {\r\n          setEdit(false)\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TeacherList\r\n","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\coursesList.jsx",["185","186"],"import {\r\n  DeleteOutlined,\r\n  LoadingOutlined,\r\n  PlusCircleOutlined\r\n} from '@ant-design/icons'\r\nimport { Button, Modal, Space, Spin, Table } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { COLOR } from 'ultis/functions'\r\nimport '../dashboard.css'\r\nimport { getColumnSearchProps } from './searchInput'\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction CoursesList() {\r\n  const categoryList = useSelector(state => state.Dashboard.categoryList)\r\n  const isLoading = useSelector(state => state.Dashboard.isLoading)\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchColumn] = useState('')\r\n  const refInput = useRef()\r\n  let realList = []\r\n  categoryList.forEach(item => {\r\n    realList.push({\r\n      name: item.name,\r\n      parent: null,\r\n      id: item.id,\r\n      parentId: item.parentId\r\n    })\r\n    item?.subCategory &&\r\n      item?.subCategory.length > 0 &&\r\n      item?.subCategory.forEach(subCat => {\r\n        realList.push({\r\n          name: subCat.name,\r\n          parent: item.name,\r\n          id: subCat.id,\r\n          parentId: subCat.parentId\r\n        })\r\n      })\r\n  })\r\n  const [edit, setEdit] = useState({ isShow: false, category: null })\r\n\r\n  useEffect(() => {\r\n    // dispatch(GetAllCategories.get())\r\n  }, [])\r\n\r\n  const onAddNewCategory = () => {\r\n    setEdit({ isShow: true, category: null })\r\n  }\r\n\r\n  const handleDelete = record => {\r\n    Modal.confirm({\r\n      title: 'Confirm',\r\n      icon: <DeleteOutlined style={{ color: COLOR.primary1 }} />,\r\n      content: 'Do you confirm to delete this category?',\r\n      okText: 'Confirm',\r\n      cancelText: 'Cancel',\r\n      centered: true,\r\n      okButtonProps: { style: { backgroundColor: COLOR.primary1 } },\r\n      onOk: () => {\r\n        // dispatch(DeleteCategory.get(record.id))\r\n        Modal.destroyAll()\r\n      }\r\n    })\r\n  }\r\n\r\n  const categoryColumns = [\r\n    {\r\n      ...getColumnSearchProps(\r\n        'name',\r\n        'Enter title to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Title',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      sorter: (a, b) => a.name.localeCompare(b.name)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'parent',\r\n        'Enter title to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Parent',\r\n      dataIndex: 'parent',\r\n      key: 'parent',\r\n      sorter: (a, b) => a.parent.localeCompare(b.parent)\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <DeleteOutlined\r\n              style={{ fontSize: 20, color: '#FF0000' }}\r\n              onClick={() => handleDelete(record)}\r\n            />\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\">Categories</span>\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<PlusCircleOutlined />}\r\n          style={{ width: 200, marginBottom: 32 }}\r\n          onClick={() => onAddNewCategory()}\r\n          size=\"large\"\r\n        >\r\n          Add new category\r\n        </Button>\r\n        <Table columns={categoryColumns} dataSource={realList} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CoursesList\r\n","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\searchInput.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\redux\\epics.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\redux\\reducer.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\addCategory.jsx",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\addTeacher.jsx",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\ultis\\firebaseConfig.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\studentList.jsx",["187"],"import { EyeOutlined, LoadingOutlined } from '@ant-design/icons'\r\nimport { Space, Spin, Table } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { COLOR, ROLES } from 'ultis/functions'\r\nimport { ACCOUNT_STATUS, PAGE } from '../constant'\r\nimport '../dashboard.css'\r\nimport { GetUserProfile, GetUsers, SetCurrentPage } from '../redux/actions'\r\nimport { getColumnSearchProps } from './searchInput'\r\nimport { Tabs } from 'antd'\r\nimport ProfileTab from './profileTab'\r\nimport CoursesTab from './coursesTab'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst loadingIcon = (\r\n  <LoadingOutlined style={{ fontSize: 30, color: COLOR.primary1 }} spin />\r\n)\r\n\r\nfunction StudentList() {\r\n  const userList = useSelector(state => state.Dashboard.userList)\r\n  const isLoading = useSelector(state => state.Dashboard.isLoading)\r\n  const detailPage = useSelector(state => state.Dashboard.detailPage)\r\n  const userDetail = useSelector(state => state.Dashboard.userDetail)\r\n  const dispatch = useDispatch()\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchColumn] = useState('')\r\n  const refInput = useRef()\r\n  const [filteredInfo, setFilterInfo] = useState(null)\r\n\r\n  useEffect(() => {\r\n    dispatch(GetUsers.get({ role: `${ROLES.STUDENT},${ROLES.NOT_VERIFIED}` }))\r\n  }, [])\r\n\r\n  const handleView = record => {\r\n    dispatch(GetUserProfile.get(record.id))\r\n    dispatch(\r\n      SetCurrentPage.get({\r\n        currentPage: PAGE.STUDENT,\r\n        detailPage: PAGE.PROFILE\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleChange = (pagination, filters, sorter) => {\r\n    setFilterInfo(filters)\r\n  }\r\n\r\n  const userColumns = [\r\n    {\r\n      ...getColumnSearchProps(\r\n        'id',\r\n        'Enter id to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n      sorter: (a, b) => a.id.localeCompare(b.id)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'fullName',\r\n        'Enter name to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Name',\r\n      dataIndex: 'fullName',\r\n      key: 'fullName',\r\n      sorter: (a, b) => a.fullName.localeCompare(b.fullName)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'email',\r\n        'Enter email to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Email',\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n      sorter: (a, b) => a.email.localeCompare(b.email)\r\n    },\r\n    {\r\n      ...getColumnSearchProps(\r\n        'phoneNumber',\r\n        'Enter email to find',\r\n        searchText,\r\n        setSearchText,\r\n        searchedColumn,\r\n        setSearchColumn,\r\n        refInput\r\n      ),\r\n      title: 'Phone number',\r\n      dataIndex: 'phoneNumber',\r\n      key: 'phoneNumber',\r\n      sorter: (a, b) => a.phoneNumber.localeCompare(b.phoneNumber)\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'role',\r\n      render: (value, record, index) => {\r\n        switch (value) {\r\n          case ROLES.STUDENT:\r\n            return <span style={{ color: 'green' }}>{'Verified'}</span>\r\n          case ROLES.NOT_VERIFIED:\r\n            return <span style={{ color: 'red' }}>{'Not verified'}</span>\r\n          default:\r\n            return <span />\r\n        }\r\n      },\r\n      filters: ACCOUNT_STATUS,\r\n      filteredValue: filteredInfo ? filteredInfo.name : null,\r\n      onFilter: (value, record) => record.role === value\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (value, record) => {\r\n        return (\r\n          <Space>\r\n            <EyeOutlined\r\n              style={{ fontSize: 20 }}\r\n              onClick={() => handleView(record)}\r\n            />\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <Spin indicator={loadingIcon} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (detailPage === PAGE.PROFILE) {\r\n    return (\r\n      <div className=\"chooseContainer\">\r\n        <span className=\"titleTopic\" style={{ alignSelf: 'center' }}>\r\n          Profile\r\n        </span>\r\n        <Tabs defaultActiveKey=\"1\" centered>\r\n          <TabPane tab=\"Information\" key=\"1\">\r\n            <ProfileTab user={userDetail} />\r\n          </TabPane>\r\n          <TabPane tab=\"All courses\" key=\"2\">\r\n            <CoursesTab\r\n              courseList={userDetail.enrollment}\r\n              role={ROLES.STUDENT}\r\n            />\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"chooseContainer\">\r\n      <span className=\"titleTopic\">Students</span>\r\n      <Table\r\n        columns={userColumns}\r\n        dataSource={userList}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StudentList\r\n","D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\profileTab.jsx",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\Dashboard\\component\\coursesTab.jsx",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\CreateCourse\\index.jsx",["188","189"],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\CreateCourse\\constant.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\CreateCourse\\redux\\reducer.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\CreateCourse\\redux\\epics.js",[],"D:\\DH\\Nam4.HK1\\WNC\\coursedo\\src\\pages\\CreateCourse\\redux\\actions.js",[],{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","severity":1,"message":"195","line":33,"column":6,"nodeType":"196","endLine":33,"endColumn":12,"suggestions":"197"},{"ruleId":"198","severity":1,"message":"199","line":116,"column":21,"nodeType":"200","endLine":116,"endColumn":36},{"ruleId":"194","severity":1,"message":"195","line":25,"column":6,"nodeType":"196","endLine":25,"endColumn":12,"suggestions":"201"},{"ruleId":"198","severity":1,"message":"199","line":133,"column":21,"nodeType":"200","endLine":133,"endColumn":36},{"ruleId":"194","severity":1,"message":"195","line":24,"column":6,"nodeType":"196","endLine":24,"endColumn":12,"suggestions":"202"},{"ruleId":"194","severity":1,"message":"203","line":26,"column":6,"nodeType":"196","endLine":26,"endColumn":12,"suggestions":"204"},{"ruleId":"194","severity":1,"message":"205","line":15,"column":6,"nodeType":"196","endLine":15,"endColumn":8,"suggestions":"206"},{"ruleId":"194","severity":1,"message":"195","line":34,"column":6,"nodeType":"196","endLine":34,"endColumn":12,"suggestions":"207"},{"ruleId":"194","severity":1,"message":"208","line":50,"column":6,"nodeType":"196","endLine":50,"endColumn":8,"suggestions":"209"},{"ruleId":"194","severity":1,"message":"208","line":38,"column":6,"nodeType":"196","endLine":38,"endColumn":8,"suggestions":"210"},{"ruleId":"211","severity":1,"message":"212","line":20,"column":9,"nodeType":"213","messageId":"214","endLine":20,"endColumn":17},{"ruleId":"211","severity":1,"message":"215","line":43,"column":10,"nodeType":"213","messageId":"214","endLine":43,"endColumn":14},{"ruleId":"194","severity":1,"message":"208","line":33,"column":6,"nodeType":"196","endLine":33,"endColumn":8,"suggestions":"216"},{"ruleId":"194","severity":1,"message":"217","line":66,"column":6,"nodeType":"196","endLine":66,"endColumn":8,"suggestions":"218"},{"ruleId":"211","severity":1,"message":"219","line":81,"column":9,"nodeType":"213","messageId":"214","endLine":81,"endColumn":24},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["222"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["223"],["224"],"React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["225"],"React Hook useEffect has missing dependencies: 'dispatch' and 'token'. Either include them or remove the dependency array.",["226"],["227"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["228"],["229"],"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'edit' is assigned a value but never used.",["230"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'user'. Either include them or remove the dependency array.",["231"],"'handleUploadImg' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"232","fix":"233"},{"desc":"232","fix":"234"},{"desc":"232","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"232","fix":"240"},{"desc":"241","fix":"242"},{"desc":"241","fix":"243"},{"desc":"241","fix":"244"},{"desc":"245","fix":"246"},"Update the dependencies array to be: [history, user]",{"range":"247","text":"248"},{"range":"249","text":"248"},{"range":"250","text":"248"},"Update the dependencies array to be: [history, token, user]",{"range":"251","text":"252"},"Update the dependencies array to be: [dispatch, token]",{"range":"253","text":"254"},{"range":"255","text":"248"},"Update the dependencies array to be: [dispatch]",{"range":"256","text":"257"},{"range":"258","text":"257"},{"range":"259","text":"257"},"Update the dependencies array to be: [dispatch, history, user]",{"range":"260","text":"261"},[1025,1031],"[history, user]",[844,850],[820,826],[902,908],"[history, token, user]",[448,450],"[dispatch, token]",[1256,1262],[1580,1582],"[dispatch]",[1370,1372],[1365,1367],[2178,2180],"[dispatch, history, user]"]